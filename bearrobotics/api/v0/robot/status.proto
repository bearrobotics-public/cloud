// File: status.proto
//
// Copyright 2024 Bear Robotics, Inc. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

syntax = "proto3";

package bearrobotics.api.v0.robot;

// Represents the state of the robot's battery system.
message BatteryState {
  // State of charge from 0 (battery empty) to 100 (battery full).
  int32 charge_percent = 1;

  enum State {
    STATE_UNKNOWN = 0;
    STATE_CHARGING = 1;

    // Robot is not connected to the charger and is draining energy from
    // battery.
    STATE_DISCHARGING = 2;

    // While connected to the charger, the battery is fully charged, no more
    // energy can be stored into the battery.
    STATE_FULL = 3;
  }
  State state = 2;

  enum ChargeMethod {
    CHARGE_METHOD_UNKNOWN = 0;
    CHARGE_METHOD_NOT_CHARGING = 1;
    CHARGE_METHOD_WIRED = 2;
    CHARGE_METHOD_WIRELESS = 3;
  }
  ChargeMethod charge_method = 3;
}

message EmergencyStopState {
  enum Emergency {
    EMERGENCY_UNKNOWN = 0;

    // Triggers an emergency stop.
    // Overrides and sets navigation-related velocity command to 0 to the motor.
    EMERGENCY_ENGAGED = 1;

    // Wheels will resume acting up on software navigation commands.
    EMERGENCY_DISENGAGED = 2;
  }

  Emergency emergency = 1;
}

// High-level representation of various operating behavior on the robot.
message OperationState {
  // Represents overall health of the robot.
  // (e.g. whether a hardware device is reachable)
  // User may listen to SubscribeSystemStatus for more details.
  enum System {
    SYSTEM_UNKNOWN = 0;

    // No faults are detected in system operation.
    SYSTEM_OK = 1;

    // One or more errors are present on the robot.
    // This could be software-related or hardware communication.
    // The robot may not be operable depending on the nature of the error.
    SYSTEM_ERROR = 2;
  }
  System system = 1;

  // Optional message for human readability. Could be empty.
  string system_message = 2;

  // Represents the robot's current emergency state.
  // Based on the physical e-stop button and software e-stop.
  enum Emergency {
    EMERGENCY_UNKNOWN = 0;

    // Either robot's physical e-stop button is presses or a software e-stop has
    // been triggered. Wheels are locked in a halted state and will not respond
    // to software navigation commands.
    EMERGENCY_ENGAGED = 1;

    // Both physical e-stop button is released and software e-stop is not
    // triggred. Wheels will resume acting up on software navigation commands.
    EMERGENCY_DISENGAGED = 2;
  }
  Emergency emergency = 3;

  // Optional message for human readability. Could be empty.
  string emergency_message = 4;

  // Represents the robot's current charging behavior.
  // Certain charging methods may limit what actions the robot is able to take.
  // User may listen to SubscribeBatteryStatus for more details.
  enum Charging {
    CHARGING_UNKNOWN = 0;

    // No charging method is detected.
    // The robot is able to navigate freely in this state.
    CHARGING_DISCHARGING = 1;

    // The robot is connected to a cable charger.
    // Navigation-related commands will be ignored until the cable charger is
    // unplugged.
    CHARGING_WIRED = 2;

    // The robot is charging without being plugged into a cable charger.
    // (i.e. inductive or contact charger)
    // It is possible to navigate freely during this charging state.
    CHARGING_WIRELESS = 3;
  }
  Charging charging = 5;

  // Represents any mission-related action being in progress on the robot.
  // User may listen to SubscribeMissionStatus for more details.
  enum Mission {
    MISSION_UNKNOWN = 0;

    // Indicates no mission is currently in progress irrespective of other
    // states.
    MISSION_IDLE = 1;

    // The robot is currently on a mission.
    // Robot cannot accept any new mission.
    MISSION_IN_PROGRESS = 2;
  }
  Mission mission = 6;
}

// Represents a single tray state.
message TrayState {
  enum LoadState {
    LOAD_STATE_UNKNOWN = 0;
    LOAD_STATE_LOADED = 1;
    LOAD_STATE_EMPTY = 2;
    LOAD_STATE_OVERLOADED = 3;
  }
  LoadState load_state = 1;

  // Tray load in kilograms. The minimum precision is 10g.
  float weight_kg = 2;

  // Ratio of the load to the maximum load capacity of the tray.
  // The value could exceed 1.0 if the tray is overloaded.
  // Caveats: If the maximum load is not configured correctly (e.g. 0.0),
  // NaN can be returned.
  float load_ratio = 3;
}

// File: mission_status.proto
//
// Copyright 2025 Bear Robotics, Inc. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

syntax = "proto3";

package bearrobotics.api.v1.core;

import "bearrobotics/api/v1/carti/mission.proto";
import "bearrobotics/api/v1/core/annotation.proto";
import "bearrobotics/api/v1/core/mission.proto";
import "bearrobotics/api/v1/servi/mission.proto";


// BaseFeedback provides status updates on mission progress,
// specific to base missions.
message BaseFeedback {
  // Current feedback status of the robot.
  enum Status {
    STATUS_UNKNOWN = 0;

    // The robot is currently navigating to its target.
    STATUS_NAVIGATING = 1;
  }
  Status status = 1;
}

// MissionType defines the different types of missions that can be executed.
// This uses a oneof structure to categorize mission types by their source.
// The individual enum types are defined in their respective mission.proto files.
message MissionType {
  oneof type {
    core.BaseType base_type = 1;
    servi.ServiType servi_type = 2;
    carti.CartiType carti_type = 3;
  }
}

// MissionState represents the current state of a mission assigned to a robot.
message MissionState {
  // Unique identifier for the mission.
  string mission_id = 1;

  // State indicates the current lifecycle state of the mission.
  enum State {
    STATE_UNKNOWN = 0;

    // Initial state when no mission has been run (e.g., feedback is empty).
    STATE_DEFAULT = 1;

    // The mission is actively running.
    STATE_RUNNING = 2;

    // The mission is paused.
    STATE_PAUSED = 3;

    // The mission was canceled before completion.
    STATE_CANCELED = 4;

    // The mission completed successfully.
    STATE_SUCCEEDED = 5;

    // The mission encountered an error or failure.
    STATE_FAILED = 6;
  }
  State state = 2;

  // All goals associated with the mission, in the order the request was given.
  repeated Goal goals = 3;

  // Index of the currently active goal in the goals list.
  int32 current_goal_index = 4;

  // Feedback provides mission-specific runtime information.
  message MissionFeedback {
    oneof feedback {
      // Generic feedback applicable to base mission types. e,g., NavigateMission.
      BaseFeedback base_feedback = 1;

      // Feedback specific to Servi missions.
      servi.Feedback servi_feedback = 2;

      // Feedback specific to Carti missions.
      carti.Feedback carti_feedback = 3;
    }
  }

  // Latest feedback for the mission.
  MissionFeedback mission_feedback = 5;

  // Type of the mission
  MissionType mission_type = 6;

  // Owner of the mission (e.g., "touchscreen", "api", etc.)
  string owner = 7;
}

// MissionStates represents a collection of missions with tracking of the current active mission.
message MissionStates {
  // List of all missions assigned to the robot, in order from first to last assigned mission.
  repeated MissionState missions = 1;

  // Index of the currently active mission in the missions list.
  // -1 if no mission is currently active.
  int32 current_mission_index = 2;
}

// File: cloud_api_service.proto
//
// Copyright 2025 Bear Robotics, Inc. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

syntax = "proto3";

package bearrobotics.api.v1.core;

import "bearrobotics/api/v1/carti/conveyor.proto";
import "bearrobotics/api/v1/core/errors.proto";
import "bearrobotics/api/v1/core/mission_status.proto";
import "bearrobotics/api/v1/core/pose.proto";
import "bearrobotics/api/v1/servi/tray_status.proto";


// Represents the state of the robot's battery system.
message BatteryState {
  // State of charge, from 0 (empty) to 100 (fully charged).
  int32 charge_percent = 1;

  // High-level charging state of the battery.
  enum State {
    STATE_UNKNOWN = 0;

    // Battery is currently charging.
    STATE_CHARGING = 1;

    // Robot is not connected to a charger and is consuming battery power.
    STATE_DISCHARGING = 2;

    // Battery is fully charged while connected to a charger; no additional energy is being stored.
    STATE_FULL = 3;
  }
  State state = 2;

  // Method by which the robot is being charged.
  enum ChargeMethod {
    CHARGE_METHOD_UNKNOWN = 0;

    // No charging method is currently active or applicable.
    CHARGE_METHOD_NONE = 1;

    // Charging via a wired connection.
    CHARGE_METHOD_WIRED = 2;

    // Charging via contact-based interface (e.g., docking station).
    CHARGE_METHOD_CONTACT = 3;
  }
  ChargeMethod charge_method = 3;
}

// Represents the state of the robot's emergency stop system.
message EmergencyStopState {
  enum Emergency {
    EMERGENCY_UNKNOWN = 0;

    // Triggers an emergency stop.
    // Overrides and sets navigation-related velocity command to 0 to the motor.
    EMERGENCY_ENGAGED = 1;

    // Wheels will resume acting upon software navigation commands.
    EMERGENCY_DISENGAGED = 2;
  }

  // Whether the software level emergency stop is engaged.
  Emergency emergency = 1;

  // Whether the physical emergency stop button is engaged.
  Emergency button_pressed = 2;
}

// Represents the online connection state between the cloud and the robot.
message RobotConnection {
  // Current connection state of the robot.
  enum State {
    STATE_UNKNOWN = 0;

    // The robot is connected to Bear cloud services.
    STATE_CONNECTED = 1;

    // The robot is offline or unreachable from the cloud.
    STATE_DISCONNECTED = 2;
  }
  State state = 1;
}

// Represents the set of robot states specifically for Servi robots.
message ServiState {
  // A collection of individual tray states from different trays.
  servi.TrayStates tray_states = 1;
}

// Represents the set of robot states specifically for Carti robots.
message CartiState {
  // Conveyor state, only available for robots with a conveyor installed.
  optional carti.ConveyorState conveyor_state = 1;
}

// Represents the overall state of the robot.
message RobotState {
  // Connection state of the robot.
  RobotConnection connection = 1;

  // Battery state of the robot.
  BatteryState battery = 2;

  // Emergency stop state of the robot.
  EmergencyStopState emergency_stop = 3;

  // Mission state of the robot.
  core.MissionState mission = 4;

  // Pose of the robot.
  core.Pose pose = 5;

  // Error codes returned by the robot.
  core.ErrorCodes error_codes = 6;

  oneof typed_status {
    // Populated when the robot type is a Servi.
    ServiState servi_state = 7;
    // Populated when the robot type is a Carti.
    CartiState carti_state = 8;
  }
}

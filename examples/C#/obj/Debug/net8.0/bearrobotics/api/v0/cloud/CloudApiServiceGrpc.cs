// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bearrobotics/api/v0/cloud/cloud_api_service.proto
// </auto-generated>
// Original file comments:
// File: cloud_api_service.proto
//
// Copyright 2025 Bear Robotics, Inc. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Bearrobotics.Api.V0.Cloud {
  /// <summary>
  /// Cloud API Service.
  ///
  /// The definition of Bear Cloud API service.
  /// </summary>
  public static partial class CloudAPIService
  {
    static readonly string __ServiceName = "bearrobotics.api.v0.cloud.CloudAPIService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.ListRobotIDsRequest> __Marshaller_bearrobotics_api_v0_cloud_ListRobotIDsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.ListRobotIDsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.ListRobotIDsResponse> __Marshaller_bearrobotics_api_v0_cloud_ListRobotIDsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.ListRobotIDsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentRequest> __Marshaller_bearrobotics_api_v0_cloud_GetCurrentMapContentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentResponse> __Marshaller_bearrobotics_api_v0_cloud_GetCurrentMapContentResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetLocationRequest> __Marshaller_bearrobotics_api_v0_cloud_GetLocationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetLocationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetLocationResponse> __Marshaller_bearrobotics_api_v0_cloud_GetLocationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetLocationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetMapRequest> __Marshaller_bearrobotics_api_v0_cloud_GetMapRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetMapRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetMapResponse> __Marshaller_bearrobotics_api_v0_cloud_GetMapResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetMapResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationRequest> __Marshaller_bearrobotics_api_v0_cloud_GetMapAnnotationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationResponse> __Marshaller_bearrobotics_api_v0_cloud_GetMapAnnotationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetMapDataRequest> __Marshaller_bearrobotics_api_v0_cloud_GetMapDataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetMapDataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetMapDataResponse> __Marshaller_bearrobotics_api_v0_cloud_GetMapDataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetMapDataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SwitchMapRequest> __Marshaller_bearrobotics_api_v0_cloud_SwitchMapRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SwitchMapRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SwitchMapResponse> __Marshaller_bearrobotics_api_v0_cloud_SwitchMapResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SwitchMapResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.AppendMissionRequest> __Marshaller_bearrobotics_api_v0_cloud_AppendMissionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.AppendMissionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.AppendMissionResponse> __Marshaller_bearrobotics_api_v0_cloud_AppendMissionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.AppendMissionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.ChargeRobotRequest> __Marshaller_bearrobotics_api_v0_cloud_ChargeRobotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.ChargeRobotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.ChargeRobotResponse> __Marshaller_bearrobotics_api_v0_cloud_ChargeRobotResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.ChargeRobotResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.CreateMissionRequest> __Marshaller_bearrobotics_api_v0_cloud_CreateMissionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.CreateMissionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.CreateMissionResponse> __Marshaller_bearrobotics_api_v0_cloud_CreateMissionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.CreateMissionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SubscribeMissionStatusRequest> __Marshaller_bearrobotics_api_v0_cloud_SubscribeMissionStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SubscribeMissionStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SubscribeMissionStatusResponse> __Marshaller_bearrobotics_api_v0_cloud_SubscribeMissionStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SubscribeMissionStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.UpdateMissionRequest> __Marshaller_bearrobotics_api_v0_cloud_UpdateMissionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.UpdateMissionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.UpdateMissionResponse> __Marshaller_bearrobotics_api_v0_cloud_UpdateMissionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.UpdateMissionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.LocalizeRobotRequest> __Marshaller_bearrobotics_api_v0_cloud_LocalizeRobotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.LocalizeRobotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.LocalizeRobotResponse> __Marshaller_bearrobotics_api_v0_cloud_LocalizeRobotResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.LocalizeRobotResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SetRobotPoseRequest> __Marshaller_bearrobotics_api_v0_cloud_SetRobotPoseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SetRobotPoseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SetRobotPoseResponse> __Marshaller_bearrobotics_api_v0_cloud_SetRobotPoseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SetRobotPoseResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SubscribeLocalizationStatusRequest> __Marshaller_bearrobotics_api_v0_cloud_SubscribeLocalizationStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SubscribeLocalizationStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SubscribeLocalizationStatusResponse> __Marshaller_bearrobotics_api_v0_cloud_SubscribeLocalizationStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SubscribeLocalizationStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SubscribeRobotPoseRequest> __Marshaller_bearrobotics_api_v0_cloud_SubscribeRobotPoseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SubscribeRobotPoseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SubscribeRobotPoseResponse> __Marshaller_bearrobotics_api_v0_cloud_SubscribeRobotPoseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SubscribeRobotPoseResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetProfileRequest> __Marshaller_bearrobotics_api_v0_cloud_GetProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetProfileResponse> __Marshaller_bearrobotics_api_v0_cloud_GetProfileResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetProfileResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesRequest> __Marshaller_bearrobotics_api_v0_cloud_GetRobotProfilesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesResponse> __Marshaller_bearrobotics_api_v0_cloud_GetRobotProfilesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLRequest> __Marshaller_bearrobotics_api_v0_cloud_GetSoundFileUploadURLRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLResponse> __Marshaller_bearrobotics_api_v0_cloud_GetSoundFileUploadURLResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.ListProfileIDsRequest> __Marshaller_bearrobotics_api_v0_cloud_ListProfileIDsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.ListProfileIDsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.ListProfileIDsResponse> __Marshaller_bearrobotics_api_v0_cloud_ListProfileIDsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.ListProfileIDsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SubscribeBatteryStatusRequest> __Marshaller_bearrobotics_api_v0_cloud_SubscribeBatteryStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SubscribeBatteryStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SubscribeBatteryStatusResponse> __Marshaller_bearrobotics_api_v0_cloud_SubscribeBatteryStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SubscribeBatteryStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SubscribeRobotStatusRequest> __Marshaller_bearrobotics_api_v0_cloud_SubscribeRobotStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SubscribeRobotStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SubscribeRobotStatusResponse> __Marshaller_bearrobotics_api_v0_cloud_SubscribeRobotStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SubscribeRobotStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SubscribeTrayStatusesRequest> __Marshaller_bearrobotics_api_v0_cloud_SubscribeTrayStatusesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SubscribeTrayStatusesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.SubscribeTrayStatusesResponse> __Marshaller_bearrobotics_api_v0_cloud_SubscribeTrayStatusesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.SubscribeTrayStatusesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoRequest> __Marshaller_bearrobotics_api_v0_cloud_GetRobotSystemInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoResponse> __Marshaller_bearrobotics_api_v0_cloud_GetRobotSystemInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.ListRobotIDsRequest, global::Bearrobotics.Api.V0.Cloud.ListRobotIDsResponse> __Method_ListRobotIDs = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.ListRobotIDsRequest, global::Bearrobotics.Api.V0.Cloud.ListRobotIDsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRobotIDs",
        __Marshaller_bearrobotics_api_v0_cloud_ListRobotIDsRequest,
        __Marshaller_bearrobotics_api_v0_cloud_ListRobotIDsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentRequest, global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentResponse> __Method_GetCurrentMapContent = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentRequest, global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCurrentMapContent",
        __Marshaller_bearrobotics_api_v0_cloud_GetCurrentMapContentRequest,
        __Marshaller_bearrobotics_api_v0_cloud_GetCurrentMapContentResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetLocationRequest, global::Bearrobotics.Api.V0.Cloud.GetLocationResponse> __Method_GetLocation = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetLocationRequest, global::Bearrobotics.Api.V0.Cloud.GetLocationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLocation",
        __Marshaller_bearrobotics_api_v0_cloud_GetLocationRequest,
        __Marshaller_bearrobotics_api_v0_cloud_GetLocationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetMapRequest, global::Bearrobotics.Api.V0.Cloud.GetMapResponse> __Method_GetMap = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetMapRequest, global::Bearrobotics.Api.V0.Cloud.GetMapResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMap",
        __Marshaller_bearrobotics_api_v0_cloud_GetMapRequest,
        __Marshaller_bearrobotics_api_v0_cloud_GetMapResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationRequest, global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationResponse> __Method_GetMapAnnotation = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationRequest, global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMapAnnotation",
        __Marshaller_bearrobotics_api_v0_cloud_GetMapAnnotationRequest,
        __Marshaller_bearrobotics_api_v0_cloud_GetMapAnnotationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetMapDataRequest, global::Bearrobotics.Api.V0.Cloud.GetMapDataResponse> __Method_GetMapData = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetMapDataRequest, global::Bearrobotics.Api.V0.Cloud.GetMapDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMapData",
        __Marshaller_bearrobotics_api_v0_cloud_GetMapDataRequest,
        __Marshaller_bearrobotics_api_v0_cloud_GetMapDataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.SwitchMapRequest, global::Bearrobotics.Api.V0.Cloud.SwitchMapResponse> __Method_SwitchMap = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.SwitchMapRequest, global::Bearrobotics.Api.V0.Cloud.SwitchMapResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SwitchMap",
        __Marshaller_bearrobotics_api_v0_cloud_SwitchMapRequest,
        __Marshaller_bearrobotics_api_v0_cloud_SwitchMapResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.AppendMissionRequest, global::Bearrobotics.Api.V0.Cloud.AppendMissionResponse> __Method_AppendMission = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.AppendMissionRequest, global::Bearrobotics.Api.V0.Cloud.AppendMissionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AppendMission",
        __Marshaller_bearrobotics_api_v0_cloud_AppendMissionRequest,
        __Marshaller_bearrobotics_api_v0_cloud_AppendMissionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.ChargeRobotRequest, global::Bearrobotics.Api.V0.Cloud.ChargeRobotResponse> __Method_ChargeRobot = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.ChargeRobotRequest, global::Bearrobotics.Api.V0.Cloud.ChargeRobotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChargeRobot",
        __Marshaller_bearrobotics_api_v0_cloud_ChargeRobotRequest,
        __Marshaller_bearrobotics_api_v0_cloud_ChargeRobotResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.CreateMissionRequest, global::Bearrobotics.Api.V0.Cloud.CreateMissionResponse> __Method_CreateMission = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.CreateMissionRequest, global::Bearrobotics.Api.V0.Cloud.CreateMissionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMission",
        __Marshaller_bearrobotics_api_v0_cloud_CreateMissionRequest,
        __Marshaller_bearrobotics_api_v0_cloud_CreateMissionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.SubscribeMissionStatusRequest, global::Bearrobotics.Api.V0.Cloud.SubscribeMissionStatusResponse> __Method_SubscribeMissionStatus = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.SubscribeMissionStatusRequest, global::Bearrobotics.Api.V0.Cloud.SubscribeMissionStatusResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeMissionStatus",
        __Marshaller_bearrobotics_api_v0_cloud_SubscribeMissionStatusRequest,
        __Marshaller_bearrobotics_api_v0_cloud_SubscribeMissionStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.UpdateMissionRequest, global::Bearrobotics.Api.V0.Cloud.UpdateMissionResponse> __Method_UpdateMission = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.UpdateMissionRequest, global::Bearrobotics.Api.V0.Cloud.UpdateMissionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateMission",
        __Marshaller_bearrobotics_api_v0_cloud_UpdateMissionRequest,
        __Marshaller_bearrobotics_api_v0_cloud_UpdateMissionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.LocalizeRobotRequest, global::Bearrobotics.Api.V0.Cloud.LocalizeRobotResponse> __Method_LocalizeRobot = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.LocalizeRobotRequest, global::Bearrobotics.Api.V0.Cloud.LocalizeRobotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LocalizeRobot",
        __Marshaller_bearrobotics_api_v0_cloud_LocalizeRobotRequest,
        __Marshaller_bearrobotics_api_v0_cloud_LocalizeRobotResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.SetRobotPoseRequest, global::Bearrobotics.Api.V0.Cloud.SetRobotPoseResponse> __Method_SetRobotPose = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.SetRobotPoseRequest, global::Bearrobotics.Api.V0.Cloud.SetRobotPoseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetRobotPose",
        __Marshaller_bearrobotics_api_v0_cloud_SetRobotPoseRequest,
        __Marshaller_bearrobotics_api_v0_cloud_SetRobotPoseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.SubscribeLocalizationStatusRequest, global::Bearrobotics.Api.V0.Cloud.SubscribeLocalizationStatusResponse> __Method_SubscribeLocalizationStatus = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.SubscribeLocalizationStatusRequest, global::Bearrobotics.Api.V0.Cloud.SubscribeLocalizationStatusResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeLocalizationStatus",
        __Marshaller_bearrobotics_api_v0_cloud_SubscribeLocalizationStatusRequest,
        __Marshaller_bearrobotics_api_v0_cloud_SubscribeLocalizationStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.SubscribeRobotPoseRequest, global::Bearrobotics.Api.V0.Cloud.SubscribeRobotPoseResponse> __Method_SubscribeRobotPose = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.SubscribeRobotPoseRequest, global::Bearrobotics.Api.V0.Cloud.SubscribeRobotPoseResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeRobotPose",
        __Marshaller_bearrobotics_api_v0_cloud_SubscribeRobotPoseRequest,
        __Marshaller_bearrobotics_api_v0_cloud_SubscribeRobotPoseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetProfileRequest, global::Bearrobotics.Api.V0.Cloud.GetProfileResponse> __Method_GetProfile = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetProfileRequest, global::Bearrobotics.Api.V0.Cloud.GetProfileResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProfile",
        __Marshaller_bearrobotics_api_v0_cloud_GetProfileRequest,
        __Marshaller_bearrobotics_api_v0_cloud_GetProfileResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesRequest, global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesResponse> __Method_GetRobotProfiles = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesRequest, global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRobotProfiles",
        __Marshaller_bearrobotics_api_v0_cloud_GetRobotProfilesRequest,
        __Marshaller_bearrobotics_api_v0_cloud_GetRobotProfilesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLRequest, global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLResponse> __Method_GetSoundFileUploadURL = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLRequest, global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSoundFileUploadURL",
        __Marshaller_bearrobotics_api_v0_cloud_GetSoundFileUploadURLRequest,
        __Marshaller_bearrobotics_api_v0_cloud_GetSoundFileUploadURLResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.ListProfileIDsRequest, global::Bearrobotics.Api.V0.Cloud.ListProfileIDsResponse> __Method_ListProfileIDs = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.ListProfileIDsRequest, global::Bearrobotics.Api.V0.Cloud.ListProfileIDsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListProfileIDs",
        __Marshaller_bearrobotics_api_v0_cloud_ListProfileIDsRequest,
        __Marshaller_bearrobotics_api_v0_cloud_ListProfileIDsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.SubscribeBatteryStatusRequest, global::Bearrobotics.Api.V0.Cloud.SubscribeBatteryStatusResponse> __Method_SubscribeBatteryStatus = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.SubscribeBatteryStatusRequest, global::Bearrobotics.Api.V0.Cloud.SubscribeBatteryStatusResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeBatteryStatus",
        __Marshaller_bearrobotics_api_v0_cloud_SubscribeBatteryStatusRequest,
        __Marshaller_bearrobotics_api_v0_cloud_SubscribeBatteryStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.SubscribeRobotStatusRequest, global::Bearrobotics.Api.V0.Cloud.SubscribeRobotStatusResponse> __Method_SubscribeRobotStatus = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.SubscribeRobotStatusRequest, global::Bearrobotics.Api.V0.Cloud.SubscribeRobotStatusResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeRobotStatus",
        __Marshaller_bearrobotics_api_v0_cloud_SubscribeRobotStatusRequest,
        __Marshaller_bearrobotics_api_v0_cloud_SubscribeRobotStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.SubscribeTrayStatusesRequest, global::Bearrobotics.Api.V0.Cloud.SubscribeTrayStatusesResponse> __Method_SubscribeTrayStatuses = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.SubscribeTrayStatusesRequest, global::Bearrobotics.Api.V0.Cloud.SubscribeTrayStatusesResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeTrayStatuses",
        __Marshaller_bearrobotics_api_v0_cloud_SubscribeTrayStatusesRequest,
        __Marshaller_bearrobotics_api_v0_cloud_SubscribeTrayStatusesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoRequest, global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoResponse> __Method_GetRobotSystemInfo = new grpc::Method<global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoRequest, global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRobotSystemInfo",
        __Marshaller_bearrobotics_api_v0_cloud_GetRobotSystemInfoRequest,
        __Marshaller_bearrobotics_api_v0_cloud_GetRobotSystemInfoResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bearrobotics.Api.V0.Cloud.CloudApiServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for CloudAPIService</summary>
    public partial class CloudAPIServiceClient : grpc::ClientBase<CloudAPIServiceClient>
    {
      /// <summary>Creates a new client for CloudAPIService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CloudAPIServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CloudAPIService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CloudAPIServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CloudAPIServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CloudAPIServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// List all robot IDs that you have permissions for and satisfies the given
      /// filter options regardless of robot status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.ListRobotIDsResponse ListRobotIDs(global::Bearrobotics.Api.V0.Cloud.ListRobotIDsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRobotIDs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all robot IDs that you have permissions for and satisfies the given
      /// filter options regardless of robot status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.ListRobotIDsResponse ListRobotIDs(global::Bearrobotics.Api.V0.Cloud.ListRobotIDsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRobotIDs, null, options, request);
      }
      /// <summary>
      /// List all robot IDs that you have permissions for and satisfies the given
      /// filter options regardless of robot status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.ListRobotIDsResponse> ListRobotIDsAsync(global::Bearrobotics.Api.V0.Cloud.ListRobotIDsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRobotIDsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all robot IDs that you have permissions for and satisfies the given
      /// filter options regardless of robot status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.ListRobotIDsResponse> ListRobotIDsAsync(global::Bearrobotics.Api.V0.Cloud.ListRobotIDsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRobotIDs, null, options, request);
      }
      /// <summary>
      /// Retrieve the current map content data, which is loaded on the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentResponse GetCurrentMapContent(global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCurrentMapContent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve the current map content data, which is loaded on the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentResponse GetCurrentMapContent(global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCurrentMapContent, null, options, request);
      }
      /// <summary>
      /// Retrieve the current map content data, which is loaded on the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentResponse> GetCurrentMapContentAsync(global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCurrentMapContentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve the current map content data, which is loaded on the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentResponse> GetCurrentMapContentAsync(global::Bearrobotics.Api.V0.Cloud.GetCurrentMapContentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCurrentMapContent, null, options, request);
      }
      /// <summary>
      /// Retrieve the current location data to which the robot is connected.
      ///
      /// If the robot is offline, it uses the cached Location data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetLocationResponse GetLocation(global::Bearrobotics.Api.V0.Cloud.GetLocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLocation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve the current location data to which the robot is connected.
      ///
      /// If the robot is offline, it uses the cached Location data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetLocationResponse GetLocation(global::Bearrobotics.Api.V0.Cloud.GetLocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLocation, null, options, request);
      }
      /// <summary>
      /// Retrieve the current location data to which the robot is connected.
      ///
      /// If the robot is offline, it uses the cached Location data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetLocationResponse> GetLocationAsync(global::Bearrobotics.Api.V0.Cloud.GetLocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLocationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve the current location data to which the robot is connected.
      ///
      /// If the robot is offline, it uses the cached Location data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetLocationResponse> GetLocationAsync(global::Bearrobotics.Api.V0.Cloud.GetLocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLocation, null, options, request);
      }
      /// <summary>
      /// Retrieve the map corresponding to a given map_id.
      ///
      /// If offline, it uses the cached MapData data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetMapResponse GetMap(global::Bearrobotics.Api.V0.Cloud.GetMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve the map corresponding to a given map_id.
      ///
      /// If offline, it uses the cached MapData data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetMapResponse GetMap(global::Bearrobotics.Api.V0.Cloud.GetMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMap, null, options, request);
      }
      /// <summary>
      /// Retrieve the map corresponding to a given map_id.
      ///
      /// If offline, it uses the cached MapData data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetMapResponse> GetMapAsync(global::Bearrobotics.Api.V0.Cloud.GetMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve the map corresponding to a given map_id.
      ///
      /// If offline, it uses the cached MapData data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetMapResponse> GetMapAsync(global::Bearrobotics.Api.V0.Cloud.GetMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMap, null, options, request);
      }
      /// <summary>
      /// Retrieve annotation data for a specified annotation_id.
      ///
      /// If offline, it uses the cached Annotation data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationResponse GetMapAnnotation(global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMapAnnotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve annotation data for a specified annotation_id.
      ///
      /// If offline, it uses the cached Annotation data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationResponse GetMapAnnotation(global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMapAnnotation, null, options, request);
      }
      /// <summary>
      /// Retrieve annotation data for a specified annotation_id.
      ///
      /// If offline, it uses the cached Annotation data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationResponse> GetMapAnnotationAsync(global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMapAnnotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve annotation data for a specified annotation_id.
      ///
      /// If offline, it uses the cached Annotation data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationResponse> GetMapAnnotationAsync(global::Bearrobotics.Api.V0.Cloud.GetMapAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMapAnnotation, null, options, request);
      }
      /// <summary>
      /// Retrieve map data for a specified map_data_id.
      ///
      /// If offline, it uses the cached MapData data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetMapDataResponse GetMapData(global::Bearrobotics.Api.V0.Cloud.GetMapDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMapData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve map data for a specified map_data_id.
      ///
      /// If offline, it uses the cached MapData data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetMapDataResponse GetMapData(global::Bearrobotics.Api.V0.Cloud.GetMapDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMapData, null, options, request);
      }
      /// <summary>
      /// Retrieve map data for a specified map_data_id.
      ///
      /// If offline, it uses the cached MapData data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetMapDataResponse> GetMapDataAsync(global::Bearrobotics.Api.V0.Cloud.GetMapDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMapDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve map data for a specified map_data_id.
      ///
      /// If offline, it uses the cached MapData data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetMapDataResponse> GetMapDataAsync(global::Bearrobotics.Api.V0.Cloud.GetMapDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMapData, null, options, request);
      }
      /// <summary>
      /// Switch the current map to a specified map.
      ///
      /// The request should specify a floor level and section index to be used.
      /// Returns the map_id of the switched map.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.SwitchMapResponse SwitchMap(global::Bearrobotics.Api.V0.Cloud.SwitchMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SwitchMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Switch the current map to a specified map.
      ///
      /// The request should specify a floor level and section index to be used.
      /// Returns the map_id of the switched map.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.SwitchMapResponse SwitchMap(global::Bearrobotics.Api.V0.Cloud.SwitchMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SwitchMap, null, options, request);
      }
      /// <summary>
      /// Switch the current map to a specified map.
      ///
      /// The request should specify a floor level and section index to be used.
      /// Returns the map_id of the switched map.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.SwitchMapResponse> SwitchMapAsync(global::Bearrobotics.Api.V0.Cloud.SwitchMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SwitchMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Switch the current map to a specified map.
      ///
      /// The request should specify a floor level and section index to be used.
      /// Returns the map_id of the switched map.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.SwitchMapResponse> SwitchMapAsync(global::Bearrobotics.Api.V0.Cloud.SwitchMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SwitchMap, null, options, request);
      }
      /// <summary>
      /// Append the given mission to the end of the queue.
      /// The mission will be added in the order it is received.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.AppendMissionResponse AppendMission(global::Bearrobotics.Api.V0.Cloud.AppendMissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AppendMission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Append the given mission to the end of the queue.
      /// The mission will be added in the order it is received.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.AppendMissionResponse AppendMission(global::Bearrobotics.Api.V0.Cloud.AppendMissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AppendMission, null, options, request);
      }
      /// <summary>
      /// Append the given mission to the end of the queue.
      /// The mission will be added in the order it is received.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.AppendMissionResponse> AppendMissionAsync(global::Bearrobotics.Api.V0.Cloud.AppendMissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AppendMissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Append the given mission to the end of the queue.
      /// The mission will be added in the order it is received.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.AppendMissionResponse> AppendMissionAsync(global::Bearrobotics.Api.V0.Cloud.AppendMissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AppendMission, null, options, request);
      }
      /// <summary>
      /// Create a mission to go charge a robot regardless of battery state.
      ///
      /// The call will fail if the robot is already on a different mission,
      /// which needs to be canceled before the robot can be charged.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.ChargeRobotResponse ChargeRobot(global::Bearrobotics.Api.V0.Cloud.ChargeRobotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChargeRobot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a mission to go charge a robot regardless of battery state.
      ///
      /// The call will fail if the robot is already on a different mission,
      /// which needs to be canceled before the robot can be charged.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.ChargeRobotResponse ChargeRobot(global::Bearrobotics.Api.V0.Cloud.ChargeRobotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChargeRobot, null, options, request);
      }
      /// <summary>
      /// Create a mission to go charge a robot regardless of battery state.
      ///
      /// The call will fail if the robot is already on a different mission,
      /// which needs to be canceled before the robot can be charged.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.ChargeRobotResponse> ChargeRobotAsync(global::Bearrobotics.Api.V0.Cloud.ChargeRobotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChargeRobotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a mission to go charge a robot regardless of battery state.
      ///
      /// The call will fail if the robot is already on a different mission,
      /// which needs to be canceled before the robot can be charged.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.ChargeRobotResponse> ChargeRobotAsync(global::Bearrobotics.Api.V0.Cloud.ChargeRobotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChargeRobot, null, options, request);
      }
      /// <summary>
      /// Create a mission for a given type.
      ///
      /// The call will fail if the robot cannot go on the requested mission.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.CreateMissionResponse CreateMission(global::Bearrobotics.Api.V0.Cloud.CreateMissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a mission for a given type.
      ///
      /// The call will fail if the robot cannot go on the requested mission.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.CreateMissionResponse CreateMission(global::Bearrobotics.Api.V0.Cloud.CreateMissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMission, null, options, request);
      }
      /// <summary>
      /// Create a mission for a given type.
      ///
      /// The call will fail if the robot cannot go on the requested mission.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.CreateMissionResponse> CreateMissionAsync(global::Bearrobotics.Api.V0.Cloud.CreateMissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a mission for a given type.
      ///
      /// The call will fail if the robot cannot go on the requested mission.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.CreateMissionResponse> CreateMissionAsync(global::Bearrobotics.Api.V0.Cloud.CreateMissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMission, null, options, request);
      }
      /// <summary>
      /// Subscribe to robot's mission status.
      ///
      /// Upon subscription, the server immediately sends the latest known
      /// mission status, followed by updates whenever the mission status changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V0.Cloud.SubscribeMissionStatusResponse> SubscribeMissionStatus(global::Bearrobotics.Api.V0.Cloud.SubscribeMissionStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeMissionStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to robot's mission status.
      ///
      /// Upon subscription, the server immediately sends the latest known
      /// mission status, followed by updates whenever the mission status changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V0.Cloud.SubscribeMissionStatusResponse> SubscribeMissionStatus(global::Bearrobotics.Api.V0.Cloud.SubscribeMissionStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeMissionStatus, null, options, request);
      }
      /// <summary>
      /// Update the specified mission with the given command.
      ///
      /// The call will fail if the robot is not on the specified mission
      /// or cannot execute the command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.UpdateMissionResponse UpdateMission(global::Bearrobotics.Api.V0.Cloud.UpdateMissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update the specified mission with the given command.
      ///
      /// The call will fail if the robot is not on the specified mission
      /// or cannot execute the command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.UpdateMissionResponse UpdateMission(global::Bearrobotics.Api.V0.Cloud.UpdateMissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateMission, null, options, request);
      }
      /// <summary>
      /// Update the specified mission with the given command.
      ///
      /// The call will fail if the robot is not on the specified mission
      /// or cannot execute the command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.UpdateMissionResponse> UpdateMissionAsync(global::Bearrobotics.Api.V0.Cloud.UpdateMissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update the specified mission with the given command.
      ///
      /// The call will fail if the robot is not on the specified mission
      /// or cannot execute the command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.UpdateMissionResponse> UpdateMissionAsync(global::Bearrobotics.Api.V0.Cloud.UpdateMissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateMission, null, options, request);
      }
      /// <summary>
      /// Localize the robot to a localization goal.
      ///
      /// If the goal is accepted, subcribe to SubscribeLocalizationStatus to get the
      /// localization status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.LocalizeRobotResponse LocalizeRobot(global::Bearrobotics.Api.V0.Cloud.LocalizeRobotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LocalizeRobot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Localize the robot to a localization goal.
      ///
      /// If the goal is accepted, subcribe to SubscribeLocalizationStatus to get the
      /// localization status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.LocalizeRobotResponse LocalizeRobot(global::Bearrobotics.Api.V0.Cloud.LocalizeRobotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LocalizeRobot, null, options, request);
      }
      /// <summary>
      /// Localize the robot to a localization goal.
      ///
      /// If the goal is accepted, subcribe to SubscribeLocalizationStatus to get the
      /// localization status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.LocalizeRobotResponse> LocalizeRobotAsync(global::Bearrobotics.Api.V0.Cloud.LocalizeRobotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LocalizeRobotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Localize the robot to a localization goal.
      ///
      /// If the goal is accepted, subcribe to SubscribeLocalizationStatus to get the
      /// localization status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.LocalizeRobotResponse> LocalizeRobotAsync(global::Bearrobotics.Api.V0.Cloud.LocalizeRobotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LocalizeRobot, null, options, request);
      }
      /// <summary>
      /// Manually set the robot pose given a pose on the map and a covariance matrix.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.SetRobotPoseResponse SetRobotPose(global::Bearrobotics.Api.V0.Cloud.SetRobotPoseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetRobotPose(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Manually set the robot pose given a pose on the map and a covariance matrix.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.SetRobotPoseResponse SetRobotPose(global::Bearrobotics.Api.V0.Cloud.SetRobotPoseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetRobotPose, null, options, request);
      }
      /// <summary>
      /// Manually set the robot pose given a pose on the map and a covariance matrix.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.SetRobotPoseResponse> SetRobotPoseAsync(global::Bearrobotics.Api.V0.Cloud.SetRobotPoseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetRobotPoseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Manually set the robot pose given a pose on the map and a covariance matrix.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.SetRobotPoseResponse> SetRobotPoseAsync(global::Bearrobotics.Api.V0.Cloud.SetRobotPoseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetRobotPose, null, options, request);
      }
      /// <summary>
      /// Subscribe to the robot's localization status.
      ///
      /// Upon subscription, the latest known localization status will be sent.
      /// If the robot is actively localizing, statuses will be published upon changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V0.Cloud.SubscribeLocalizationStatusResponse> SubscribeLocalizationStatus(global::Bearrobotics.Api.V0.Cloud.SubscribeLocalizationStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeLocalizationStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to the robot's localization status.
      ///
      /// Upon subscription, the latest known localization status will be sent.
      /// If the robot is actively localizing, statuses will be published upon changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V0.Cloud.SubscribeLocalizationStatusResponse> SubscribeLocalizationStatus(global::Bearrobotics.Api.V0.Cloud.SubscribeLocalizationStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeLocalizationStatus, null, options, request);
      }
      /// <summary>
      /// Subscribe to the robot's pose.
      ///
      /// Upon subscription, the server provides regular updates (5Hz) of the
      /// robot's estimated position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V0.Cloud.SubscribeRobotPoseResponse> SubscribeRobotPose(global::Bearrobotics.Api.V0.Cloud.SubscribeRobotPoseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeRobotPose(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to the robot's pose.
      ///
      /// Upon subscription, the server provides regular updates (5Hz) of the
      /// robot's estimated position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V0.Cloud.SubscribeRobotPoseResponse> SubscribeRobotPose(global::Bearrobotics.Api.V0.Cloud.SubscribeRobotPoseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeRobotPose, null, options, request);
      }
      /// <summary>
      /// Retrieve user-defined profile with customizable settings for a profile_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetProfileResponse GetProfile(global::Bearrobotics.Api.V0.Cloud.GetProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve user-defined profile with customizable settings for a profile_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetProfileResponse GetProfile(global::Bearrobotics.Api.V0.Cloud.GetProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProfile, null, options, request);
      }
      /// <summary>
      /// Retrieve user-defined profile with customizable settings for a profile_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetProfileResponse> GetProfileAsync(global::Bearrobotics.Api.V0.Cloud.GetProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve user-defined profile with customizable settings for a profile_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetProfileResponse> GetProfileAsync(global::Bearrobotics.Api.V0.Cloud.GetProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProfile, null, options, request);
      }
      /// <summary>
      /// Retrieve a set of user-defined profiles for a specific robot_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesResponse GetRobotProfiles(global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRobotProfiles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve a set of user-defined profiles for a specific robot_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesResponse GetRobotProfiles(global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRobotProfiles, null, options, request);
      }
      /// <summary>
      /// Retrieve a set of user-defined profiles for a specific robot_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesResponse> GetRobotProfilesAsync(global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRobotProfilesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve a set of user-defined profiles for a specific robot_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesResponse> GetRobotProfilesAsync(global::Bearrobotics.Api.V0.Cloud.GetRobotProfilesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRobotProfiles, null, options, request);
      }
      /// <summary>
      /// Retrieve the sound file upload URL for specific sound_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLResponse GetSoundFileUploadURL(global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSoundFileUploadURL(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve the sound file upload URL for specific sound_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLResponse GetSoundFileUploadURL(global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSoundFileUploadURL, null, options, request);
      }
      /// <summary>
      /// Retrieve the sound file upload URL for specific sound_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLResponse> GetSoundFileUploadURLAsync(global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSoundFileUploadURLAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve the sound file upload URL for specific sound_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLResponse> GetSoundFileUploadURLAsync(global::Bearrobotics.Api.V0.Cloud.GetSoundFileUploadURLRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSoundFileUploadURL, null, options, request);
      }
      /// <summary>
      /// List all profile IDs for a specific location_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.ListProfileIDsResponse ListProfileIDs(global::Bearrobotics.Api.V0.Cloud.ListProfileIDsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProfileIDs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all profile IDs for a specific location_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.ListProfileIDsResponse ListProfileIDs(global::Bearrobotics.Api.V0.Cloud.ListProfileIDsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListProfileIDs, null, options, request);
      }
      /// <summary>
      /// List all profile IDs for a specific location_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.ListProfileIDsResponse> ListProfileIDsAsync(global::Bearrobotics.Api.V0.Cloud.ListProfileIDsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProfileIDsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all profile IDs for a specific location_id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.ListProfileIDsResponse> ListProfileIDsAsync(global::Bearrobotics.Api.V0.Cloud.ListProfileIDsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListProfileIDs, null, options, request);
      }
      /// <summary>
      /// Subscribe to the robots' battery status.
      ///
      /// Upon subscription, the server immediately sends the latest known
      /// battery status, followed by updates whenever the battery status changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V0.Cloud.SubscribeBatteryStatusResponse> SubscribeBatteryStatus(global::Bearrobotics.Api.V0.Cloud.SubscribeBatteryStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeBatteryStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to the robots' battery status.
      ///
      /// Upon subscription, the server immediately sends the latest known
      /// battery status, followed by updates whenever the battery status changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V0.Cloud.SubscribeBatteryStatusResponse> SubscribeBatteryStatus(global::Bearrobotics.Api.V0.Cloud.SubscribeBatteryStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeBatteryStatus, null, options, request);
      }
      /// <summary>
      /// Subscribe to connection and operation state of the robot
      ///
      /// Upon subscription, the server immediately sends the latest known operation
      /// status, followed by updates whenever the operation status changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V0.Cloud.SubscribeRobotStatusResponse> SubscribeRobotStatus(global::Bearrobotics.Api.V0.Cloud.SubscribeRobotStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeRobotStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to connection and operation state of the robot
      ///
      /// Upon subscription, the server immediately sends the latest known operation
      /// status, followed by updates whenever the operation status changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V0.Cloud.SubscribeRobotStatusResponse> SubscribeRobotStatus(global::Bearrobotics.Api.V0.Cloud.SubscribeRobotStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeRobotStatus, null, options, request);
      }
      /// <summary>
      /// Subscribe for high level tray status.
      ///
      /// This is only available for robots with trays (e.g. Servi, Plus).
      /// Upon subscription, the latest known tray status will be sent, followed by
      /// snapshot updates of all tray states when any state is updated.
      /// Weight changes are updated at a 10g granularity threshold. Robots with
      /// trays that does not have weight sensor will have an UNKNOWN load state and
      /// no weight data streamed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V0.Cloud.SubscribeTrayStatusesResponse> SubscribeTrayStatuses(global::Bearrobotics.Api.V0.Cloud.SubscribeTrayStatusesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeTrayStatuses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe for high level tray status.
      ///
      /// This is only available for robots with trays (e.g. Servi, Plus).
      /// Upon subscription, the latest known tray status will be sent, followed by
      /// snapshot updates of all tray states when any state is updated.
      /// Weight changes are updated at a 10g granularity threshold. Robots with
      /// trays that does not have weight sensor will have an UNKNOWN load state and
      /// no weight data streamed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V0.Cloud.SubscribeTrayStatusesResponse> SubscribeTrayStatuses(global::Bearrobotics.Api.V0.Cloud.SubscribeTrayStatusesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeTrayStatuses, null, options, request);
      }
      /// <summary>
      /// Get the overall robot system information.
      ///
      /// When called, the server returns robot system information. The system info
      /// tends to be static and does not change often.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoResponse GetRobotSystemInfo(global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRobotSystemInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the overall robot system information.
      ///
      /// When called, the server returns robot system information. The system info
      /// tends to be static and does not change often.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoResponse GetRobotSystemInfo(global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRobotSystemInfo, null, options, request);
      }
      /// <summary>
      /// Get the overall robot system information.
      ///
      /// When called, the server returns robot system information. The system info
      /// tends to be static and does not change often.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoResponse> GetRobotSystemInfoAsync(global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRobotSystemInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the overall robot system information.
      ///
      /// When called, the server returns robot system information. The system info
      /// tends to be static and does not change often.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoResponse> GetRobotSystemInfoAsync(global::Bearrobotics.Api.V0.Cloud.GetRobotSystemInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRobotSystemInfo, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override CloudAPIServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CloudAPIServiceClient(configuration);
      }
    }

  }
}
#endregion

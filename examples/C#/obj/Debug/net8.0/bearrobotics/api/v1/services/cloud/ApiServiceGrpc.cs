// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bearrobotics/api/v1/services/cloud/api_service.proto
// </auto-generated>
// Original file comments:
// File: cloud_api_service.proto
//
// Copyright 2025 Bear Robotics, Inc. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Bearrobotics.Api.V1.Services.Cloud {
  /// <summary>
  /// APIService defines the control, navigation, monitoring, and fleet management
  /// interface for robots. This includes mission orchestration, localization,
  /// pose tracking, battery monitoring, and map retrieval.
  /// </summary>
  public static partial class APIService
  {
    static readonly string __ServiceName = "bearrobotics.api.v1.services.cloud.APIService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionRequest> __Marshaller_bearrobotics_api_v1_services_cloud_CreateMissionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionResponse> __Marshaller_bearrobotics_api_v1_services_cloud_CreateMissionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionRequest> __Marshaller_bearrobotics_api_v1_services_cloud_AppendMissionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionResponse> __Marshaller_bearrobotics_api_v1_services_cloud_AppendMissionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionRequest> __Marshaller_bearrobotics_api_v1_services_cloud_UpdateMissionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionResponse> __Marshaller_bearrobotics_api_v1_services_cloud_UpdateMissionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotRequest> __Marshaller_bearrobotics_api_v1_services_cloud_ChargeRobotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotResponse> __Marshaller_bearrobotics_api_v1_services_cloud_ChargeRobotResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeMissionStatusRequest> __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeMissionStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeMissionStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeMissionStatusResponse> __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeMissionStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeMissionStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapRequest> __Marshaller_bearrobotics_api_v1_services_cloud_GetCurrentMapRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapResponse> __Marshaller_bearrobotics_api_v1_services_cloud_GetCurrentMapResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotRequest> __Marshaller_bearrobotics_api_v1_services_cloud_LocalizeRobotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotResponse> __Marshaller_bearrobotics_api_v1_services_cloud_LocalizeRobotResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeEmergencyStopStatusRequest> __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeEmergencyStopStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeEmergencyStopStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeEmergencyStopStatusResponse> __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeEmergencyStopStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeEmergencyStopStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeLocalizationStatusRequest> __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeLocalizationStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeLocalizationStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeLocalizationStatusResponse> __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeLocalizationStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeLocalizationStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotPoseRequest> __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeRobotPoseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotPoseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotPoseResponse> __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeRobotPoseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotPoseResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeBatteryStatusRequest> __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeBatteryStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeBatteryStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeBatteryStatusResponse> __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeBatteryStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeBatteryStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotStatusRequest> __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeRobotStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotStatusResponse> __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeRobotStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsRequest> __Marshaller_bearrobotics_api_v1_services_cloud_ListRobotIDsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsResponse> __Marshaller_bearrobotics_api_v1_services_cloud_ListRobotIDsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeTrayStatusesRequest> __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeTrayStatusesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeTrayStatusesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeTrayStatusesResponse> __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeTrayStatusesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeTrayStatusesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionRequest, global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionResponse> __Method_CreateMission = new grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionRequest, global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMission",
        __Marshaller_bearrobotics_api_v1_services_cloud_CreateMissionRequest,
        __Marshaller_bearrobotics_api_v1_services_cloud_CreateMissionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionRequest, global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionResponse> __Method_AppendMission = new grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionRequest, global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AppendMission",
        __Marshaller_bearrobotics_api_v1_services_cloud_AppendMissionRequest,
        __Marshaller_bearrobotics_api_v1_services_cloud_AppendMissionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionRequest, global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionResponse> __Method_UpdateMission = new grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionRequest, global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateMission",
        __Marshaller_bearrobotics_api_v1_services_cloud_UpdateMissionRequest,
        __Marshaller_bearrobotics_api_v1_services_cloud_UpdateMissionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotRequest, global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotResponse> __Method_ChargeRobot = new grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotRequest, global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChargeRobot",
        __Marshaller_bearrobotics_api_v1_services_cloud_ChargeRobotRequest,
        __Marshaller_bearrobotics_api_v1_services_cloud_ChargeRobotResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeMissionStatusRequest, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeMissionStatusResponse> __Method_SubscribeMissionStatus = new grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeMissionStatusRequest, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeMissionStatusResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeMissionStatus",
        __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeMissionStatusRequest,
        __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeMissionStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapRequest, global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapResponse> __Method_GetCurrentMap = new grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapRequest, global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCurrentMap",
        __Marshaller_bearrobotics_api_v1_services_cloud_GetCurrentMapRequest,
        __Marshaller_bearrobotics_api_v1_services_cloud_GetCurrentMapResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotRequest, global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotResponse> __Method_LocalizeRobot = new grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotRequest, global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LocalizeRobot",
        __Marshaller_bearrobotics_api_v1_services_cloud_LocalizeRobotRequest,
        __Marshaller_bearrobotics_api_v1_services_cloud_LocalizeRobotResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeEmergencyStopStatusRequest, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeEmergencyStopStatusResponse> __Method_SubscribeEmergencyStopStatus = new grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeEmergencyStopStatusRequest, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeEmergencyStopStatusResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeEmergencyStopStatus",
        __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeEmergencyStopStatusRequest,
        __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeEmergencyStopStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeLocalizationStatusRequest, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeLocalizationStatusResponse> __Method_SubscribeLocalizationStatus = new grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeLocalizationStatusRequest, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeLocalizationStatusResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeLocalizationStatus",
        __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeLocalizationStatusRequest,
        __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeLocalizationStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotPoseRequest, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotPoseResponse> __Method_SubscribeRobotPose = new grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotPoseRequest, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotPoseResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeRobotPose",
        __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeRobotPoseRequest,
        __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeRobotPoseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeBatteryStatusRequest, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeBatteryStatusResponse> __Method_SubscribeBatteryStatus = new grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeBatteryStatusRequest, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeBatteryStatusResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeBatteryStatus",
        __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeBatteryStatusRequest,
        __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeBatteryStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotStatusRequest, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotStatusResponse> __Method_SubscribeRobotStatus = new grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotStatusRequest, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotStatusResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeRobotStatus",
        __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeRobotStatusRequest,
        __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeRobotStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsRequest, global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsResponse> __Method_ListRobotIDs = new grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsRequest, global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRobotIDs",
        __Marshaller_bearrobotics_api_v1_services_cloud_ListRobotIDsRequest,
        __Marshaller_bearrobotics_api_v1_services_cloud_ListRobotIDsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeTrayStatusesRequest, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeTrayStatusesResponse> __Method_SubscribeTrayStatuses = new grpc::Method<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeTrayStatusesRequest, global::Bearrobotics.Api.V1.Services.Cloud.SubscribeTrayStatusesResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeTrayStatuses",
        __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeTrayStatusesRequest,
        __Marshaller_bearrobotics_api_v1_services_cloud_SubscribeTrayStatusesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bearrobotics.Api.V1.Services.Cloud.ApiServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for APIService</summary>
    public partial class APIServiceClient : grpc::ClientBase<APIServiceClient>
    {
      /// <summary>Creates a new client for APIService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public APIServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for APIService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public APIServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected APIServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected APIServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a new mission of a specified type.
      ///
      /// This call will fail if:
      /// - The robot is already executing another mission.
      /// - The requested mission is not compatible with the robot's current state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionResponse CreateMission(global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new mission of a specified type.
      ///
      /// This call will fail if:
      /// - The robot is already executing another mission.
      /// - The requested mission is not compatible with the robot's current state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionResponse CreateMission(global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMission, null, options, request);
      }
      /// <summary>
      /// Creates a new mission of a specified type.
      ///
      /// This call will fail if:
      /// - The robot is already executing another mission.
      /// - The requested mission is not compatible with the robot's current state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionResponse> CreateMissionAsync(global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new mission of a specified type.
      ///
      /// This call will fail if:
      /// - The robot is already executing another mission.
      /// - The requested mission is not compatible with the robot's current state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionResponse> CreateMissionAsync(global::Bearrobotics.Api.V1.Services.Cloud.CreateMissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMission, null, options, request);
      }
      /// <summary>
      /// Appends a mission to the end of the mission queue.
      ///
      /// Use this when a mission is currently running; otherwise, prefer CreateMission.
      /// Missions are executed in the order they are appended.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionResponse AppendMission(global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AppendMission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Appends a mission to the end of the mission queue.
      ///
      /// Use this when a mission is currently running; otherwise, prefer CreateMission.
      /// Missions are executed in the order they are appended.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionResponse AppendMission(global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AppendMission, null, options, request);
      }
      /// <summary>
      /// Appends a mission to the end of the mission queue.
      ///
      /// Use this when a mission is currently running; otherwise, prefer CreateMission.
      /// Missions are executed in the order they are appended.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionResponse> AppendMissionAsync(global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AppendMissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Appends a mission to the end of the mission queue.
      ///
      /// Use this when a mission is currently running; otherwise, prefer CreateMission.
      /// Missions are executed in the order they are appended.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionResponse> AppendMissionAsync(global::Bearrobotics.Api.V1.Services.Cloud.AppendMissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AppendMission, null, options, request);
      }
      /// <summary>
      /// Issues a command to control or update the current mission (e.g., pause, cancel).
      ///
      /// This call will fail if:
      /// - The robot is not on the specified mission.
      /// - The command is invalid for the robot's current state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionResponse UpdateMission(global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Issues a command to control or update the current mission (e.g., pause, cancel).
      ///
      /// This call will fail if:
      /// - The robot is not on the specified mission.
      /// - The command is invalid for the robot's current state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionResponse UpdateMission(global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateMission, null, options, request);
      }
      /// <summary>
      /// Issues a command to control or update the current mission (e.g., pause, cancel).
      ///
      /// This call will fail if:
      /// - The robot is not on the specified mission.
      /// - The command is invalid for the robot's current state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionResponse> UpdateMissionAsync(global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Issues a command to control or update the current mission (e.g., pause, cancel).
      ///
      /// This call will fail if:
      /// - The robot is not on the specified mission.
      /// - The command is invalid for the robot's current state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionResponse> UpdateMissionAsync(global::Bearrobotics.Api.V1.Services.Cloud.UpdateMissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateMission, null, options, request);
      }
      /// <summary>
      /// Instructs the robot to begin charging, regardless of its current battery level.
      ///
      /// This call will fail if:
      /// - The robot is already executing a mission.
      ///   The current mission must be canceled before issuing this command.
      ///
      /// Notes:
      /// - This command is only supported on robots equipped with a contact-based charging dock.
      ///   Robots without a compatible dock will return a INVALID_ARGUMENT error.
      /// - Use `SubscribeBatteryStatus` to monitor the charging process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotResponse ChargeRobot(global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChargeRobot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Instructs the robot to begin charging, regardless of its current battery level.
      ///
      /// This call will fail if:
      /// - The robot is already executing a mission.
      ///   The current mission must be canceled before issuing this command.
      ///
      /// Notes:
      /// - This command is only supported on robots equipped with a contact-based charging dock.
      ///   Robots without a compatible dock will return a INVALID_ARGUMENT error.
      /// - Use `SubscribeBatteryStatus` to monitor the charging process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotResponse ChargeRobot(global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChargeRobot, null, options, request);
      }
      /// <summary>
      /// Instructs the robot to begin charging, regardless of its current battery level.
      ///
      /// This call will fail if:
      /// - The robot is already executing a mission.
      ///   The current mission must be canceled before issuing this command.
      ///
      /// Notes:
      /// - This command is only supported on robots equipped with a contact-based charging dock.
      ///   Robots without a compatible dock will return a INVALID_ARGUMENT error.
      /// - Use `SubscribeBatteryStatus` to monitor the charging process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotResponse> ChargeRobotAsync(global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChargeRobotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Instructs the robot to begin charging, regardless of its current battery level.
      ///
      /// This call will fail if:
      /// - The robot is already executing a mission.
      ///   The current mission must be canceled before issuing this command.
      ///
      /// Notes:
      /// - This command is only supported on robots equipped with a contact-based charging dock.
      ///   Robots without a compatible dock will return a INVALID_ARGUMENT error.
      /// - Use `SubscribeBatteryStatus` to monitor the charging process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotResponse> ChargeRobotAsync(global::Bearrobotics.Api.V1.Services.Cloud.ChargeRobotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChargeRobot, null, options, request);
      }
      /// <summary>
      /// Subscribes to updates on the robot's mission state.
      ///
      /// Upon subscription:
      /// - The latest known mission state is sent immediately.
      /// - Subsequent updates are streamed as the state changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeMissionStatusResponse> SubscribeMissionStatus(global::Bearrobotics.Api.V1.Services.Cloud.SubscribeMissionStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeMissionStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribes to updates on the robot's mission state.
      ///
      /// Upon subscription:
      /// - The latest known mission state is sent immediately.
      /// - Subsequent updates are streamed as the state changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeMissionStatusResponse> SubscribeMissionStatus(global::Bearrobotics.Api.V1.Services.Cloud.SubscribeMissionStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeMissionStatus, null, options, request);
      }
      /// <summary>
      /// Retrieves the current map used by the robot.
      ///
      /// The returned map includes annotations and destinations, which can be used
      /// in mission destination, localization goals, and navigation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapResponse GetCurrentMap(global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCurrentMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the current map used by the robot.
      ///
      /// The returned map includes annotations and destinations, which can be used
      /// in mission destination, localization goals, and navigation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapResponse GetCurrentMap(global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCurrentMap, null, options, request);
      }
      /// <summary>
      /// Retrieves the current map used by the robot.
      ///
      /// The returned map includes annotations and destinations, which can be used
      /// in mission destination, localization goals, and navigation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapResponse> GetCurrentMapAsync(global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCurrentMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the current map used by the robot.
      ///
      /// The returned map includes annotations and destinations, which can be used
      /// in mission destination, localization goals, and navigation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapResponse> GetCurrentMapAsync(global::Bearrobotics.Api.V1.Services.Cloud.GetCurrentMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCurrentMap, null, options, request);
      }
      /// <summary>
      /// Localizes the robot to a known pose or destination.
      ///
      /// If the request is accepted, subscribe to `SubscribeLocalizationStatus`
      /// to track localization progress. While the robot is localizing,
      /// any subsequent requests to localize the robot will return a
      /// FAILED_PRECONDITION error until the process is completed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotResponse LocalizeRobot(global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LocalizeRobot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Localizes the robot to a known pose or destination.
      ///
      /// If the request is accepted, subscribe to `SubscribeLocalizationStatus`
      /// to track localization progress. While the robot is localizing,
      /// any subsequent requests to localize the robot will return a
      /// FAILED_PRECONDITION error until the process is completed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotResponse LocalizeRobot(global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LocalizeRobot, null, options, request);
      }
      /// <summary>
      /// Localizes the robot to a known pose or destination.
      ///
      /// If the request is accepted, subscribe to `SubscribeLocalizationStatus`
      /// to track localization progress. While the robot is localizing,
      /// any subsequent requests to localize the robot will return a
      /// FAILED_PRECONDITION error until the process is completed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotResponse> LocalizeRobotAsync(global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LocalizeRobotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Localizes the robot to a known pose or destination.
      ///
      /// If the request is accepted, subscribe to `SubscribeLocalizationStatus`
      /// to track localization progress. While the robot is localizing,
      /// any subsequent requests to localize the robot will return a
      /// FAILED_PRECONDITION error until the process is completed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotResponse> LocalizeRobotAsync(global::Bearrobotics.Api.V1.Services.Cloud.LocalizeRobotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LocalizeRobot, null, options, request);
      }
      /// <summary>
      /// Subscribe to the software emergency stop state.
      ///
      /// Upon subscription, the server sends the current emergency stop state,
      /// followed by updates whenever the emergency stop state changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeEmergencyStopStatusResponse> SubscribeEmergencyStopStatus(global::Bearrobotics.Api.V1.Services.Cloud.SubscribeEmergencyStopStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeEmergencyStopStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to the software emergency stop state.
      ///
      /// Upon subscription, the server sends the current emergency stop state,
      /// followed by updates whenever the emergency stop state changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeEmergencyStopStatusResponse> SubscribeEmergencyStopStatus(global::Bearrobotics.Api.V1.Services.Cloud.SubscribeEmergencyStopStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeEmergencyStopStatus, null, options, request);
      }
      /// <summary>
      /// Subscribes to the robot’s localization state.
      ///
      /// Upon subscription:
      /// - The latest localization state is sent immediately.
      /// - State updates are streamed while localization is active.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeLocalizationStatusResponse> SubscribeLocalizationStatus(global::Bearrobotics.Api.V1.Services.Cloud.SubscribeLocalizationStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeLocalizationStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribes to the robot’s localization state.
      ///
      /// Upon subscription:
      /// - The latest localization state is sent immediately.
      /// - State updates are streamed while localization is active.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeLocalizationStatusResponse> SubscribeLocalizationStatus(global::Bearrobotics.Api.V1.Services.Cloud.SubscribeLocalizationStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeLocalizationStatus, null, options, request);
      }
      /// <summary>
      /// Subscribes to the robot's pose estimates at a regular frequency. (~10Hz)
      ///
      /// Use this to track the robot's position in real time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotPoseResponse> SubscribeRobotPose(global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotPoseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeRobotPose(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribes to the robot's pose estimates at a regular frequency. (~10Hz)
      ///
      /// Use this to track the robot's position in real time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotPoseResponse> SubscribeRobotPose(global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotPoseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeRobotPose, null, options, request);
      }
      /// <summary>
      /// Subscribes to battery state updates for the robot.
      ///
      /// Upon subscription:
      /// - The latest battery state is sent immediately.
      /// - Updates are streamed whenever the state changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeBatteryStatusResponse> SubscribeBatteryStatus(global::Bearrobotics.Api.V1.Services.Cloud.SubscribeBatteryStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeBatteryStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribes to battery state updates for the robot.
      ///
      /// Upon subscription:
      /// - The latest battery state is sent immediately.
      /// - Updates are streamed whenever the state changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeBatteryStatusResponse> SubscribeBatteryStatus(global::Bearrobotics.Api.V1.Services.Cloud.SubscribeBatteryStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeBatteryStatus, null, options, request);
      }
      /// <summary>
      /// Subscribes to the robot's connectivity and operational state.
      ///
      /// Upon subscription:
      /// - The current robot state is sent immediately.
      /// - Updates are streamed as the robot's state changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotStatusResponse> SubscribeRobotStatus(global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeRobotStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribes to the robot's connectivity and operational state.
      ///
      /// Upon subscription:
      /// - The current robot state is sent immediately.
      /// - Updates are streamed as the robot's state changes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotStatusResponse> SubscribeRobotStatus(global::Bearrobotics.Api.V1.Services.Cloud.SubscribeRobotStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeRobotStatus, null, options, request);
      }
      /// <summary>
      /// Returns a list of robot IDs the user has access to, filtered by optional criteria.
      ///
      /// The list includes all known robots, regardless of their current connection state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsResponse ListRobotIDs(global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRobotIDs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of robot IDs the user has access to, filtered by optional criteria.
      ///
      /// The list includes all known robots, regardless of their current connection state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsResponse ListRobotIDs(global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRobotIDs, null, options, request);
      }
      /// <summary>
      /// Returns a list of robot IDs the user has access to, filtered by optional criteria.
      ///
      /// The list includes all known robots, regardless of their current connection state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsResponse> ListRobotIDsAsync(global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRobotIDsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of robot IDs the user has access to, filtered by optional criteria.
      ///
      /// The list includes all known robots, regardless of their current connection state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsResponse> ListRobotIDsAsync(global::Bearrobotics.Api.V1.Services.Cloud.ListRobotIDsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRobotIDs, null, options, request);
      }
      /// <summary>
      /// Subscribes to the robot’s tray states updates.
      ///
      /// Only applicable for tray-equipped robots (e.g., Servi, Servi Plus).
      ///
      /// Upon subscription:
      /// - The latest known tray states are sent immediately.
      /// - Updates are streamed when any tray state changes.
      ///
      /// Notes:
      /// - Weight changes are reported with 10g precision.
      /// - Robots without weight sensors will return INVALID_ARGUMENT error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeTrayStatusesResponse> SubscribeTrayStatuses(global::Bearrobotics.Api.V1.Services.Cloud.SubscribeTrayStatusesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeTrayStatuses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribes to the robot’s tray states updates.
      ///
      /// Only applicable for tray-equipped robots (e.g., Servi, Servi Plus).
      ///
      /// Upon subscription:
      /// - The latest known tray states are sent immediately.
      /// - Updates are streamed when any tray state changes.
      ///
      /// Notes:
      /// - Weight changes are reported with 10g precision.
      /// - Robots without weight sensors will return INVALID_ARGUMENT error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Bearrobotics.Api.V1.Services.Cloud.SubscribeTrayStatusesResponse> SubscribeTrayStatuses(global::Bearrobotics.Api.V1.Services.Cloud.SubscribeTrayStatusesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeTrayStatuses, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override APIServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new APIServiceClient(configuration);
      }
    }

  }
}
#endregion

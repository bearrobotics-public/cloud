{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This document describes the gRPC-based Bear Cloud API Service for third-party clients. The Bear Cloud API service enables third parties to:</p> <ol> <li>Send commands to control the robots (e.g., mission creation/cancellation)</li> <li>Receive status updates from robots (e.g., tray status, battery status)</li> <li>Retrieve robot/location information</li> </ol> <p>There are two different types of RPCs available, unary and server-side streaming RPCs as listed below. For a detailed list of API capabilities, please navigate through the gRPC API Reference.</p> <p>Note</p> <p>Messages have delivery guarantees (i.e. QoS) of best effort and not at least once. This means that some messages can be dropped and not delivered to clients due to multiple reasons such as, but not limited to, packet loss, network traffic load, and processing failures.</p>"},{"location":"#unary-rpcs","title":"Unary RPCs","text":"<p>Unary RPCs are used for request/response-type communication, like creating a new mission.</p> <p>The following sequence diagram illustrates how a single unary request is propagated from a client to a target robot through the Bear Cloud API service:</p> <p>Note</p> <p>Unlike streaming RPCs, unary RPCs for executing commands on robots require a full round trip to and from the target robot as shown in the diagram below. This means such requests are susceptible to the network environment robots are in.</p> <p>If the robot-side network fails temporarily, dropping either the inbound request to the robot or the outbound response from the robot, the Cloud API service will issue a timeout after 10 seconds, returning a <code>DEADLINE_EXCEEDED</code> error (<code>504 Gateway Timeout</code> for REST API calls) back to unblock the caller.</p> <pre><code>sequenceDiagram\n    box Client App Network\n    participant Client\n    end\n    box Client Robot Network\n    participant Robot as Target Robot\n    end\n    box Bear Network\n    participant API as Cloud API Service\n    end\n\n    Client-&gt;&gt;API: Issue unary gRPC Request (e.g. create mission)\n    API-&gt;&gt;Robot: Forward request to the robot\n    Robot-&gt;&gt;API: Return result (success/failure)\n    API-&gt;&gt;Client: Forward response (or timeout with DEADLINE_EXCEEDED)</code></pre>"},{"location":"#streaming-rpcs","title":"Streaming RPCs","text":"<p>Server-side streaming RPCs are used for receiving continuous updates, either event-based (e.g., mission status) or frequency-based (e.g., robot pose).</p> <p>Note</p> <ul> <li>Streams will persist for a maximum of 60 minutes. To maintain long-lived subscriptions, a conditional retry should be implemented.</li> </ul> <p>The following sequence diagram illustrates how streaming data flows from a robot to a client through the Bear Cloud API service:</p> <pre><code>sequenceDiagram\n    box Client App Network\n    participant Client\n    end\n    box Client Robot Network\n    participant Robot as Target Robot\n    end\n    box Bear Network\n    participant API as Cloud API Service\n    end\n\n\n    loop Before subscription\n        Robot-&gt;&gt;API: Continuously publish status\n        Note right of API: Data received but not forwarded\n    end\n\n    Client-&gt;&gt;API: Subscribe to robot status (streaming request)\n    activate API\n    Note right of API: Subscription established\n\n    loop After subscription\n        Robot-&gt;&gt;API: Continuously publish status\n        API-&gt;&gt;Client: Forward status updates\n    end\n\n    API-&gt;&gt;Client: Stream closed after ~60 minutes\n    deactivate API</code></pre> <p>For server streaming RPCs, all responses include metadata containing a timestamp and a sequence number:</p> <ul> <li>Timestamp: The timestamp is based on the local clock where the response was generated and is not globally synchronized, so it should not be used for global ordering across different robots.</li> <li>Sequence Number: The sequence number is guaranteed to be incremental and can be used to detect duplicate responses. Note that the sequence number may reset to 0 at any time, though this should be rare (e.g., only during a service or robot restart).</li> </ul> <p>If strict detection of response duplication is desired, both the sequence number and timestamp should be used together. </p>"},{"location":"changelog/v0.1beta/","title":"v0.1 Beta","text":""},{"location":"changelog/v0.1beta/#february-5-2025","title":"February 5, 2025","text":"Release Beta"},{"location":"changelog/v0.1beta/#release-bear-cloud-api-beta-v01","title":"Release: Bear Cloud API Beta v0.1","text":""},{"location":"changelog/v0.1beta/#minimum-robot-software-versions","title":"Minimum Robot Software Versions","text":"<ol> <li>Servi: 24.04</li> <li>Carti: 24.03</li> </ol>"},{"location":"changelog/v0.1beta/#added-new-endpoints","title":"Added New Endpoints","text":"<ul> <li>GetCurrentMapContent </li> <li>GetLocation </li> <li>GetMap </li> <li>GetMapData </li> <li>SwitchMap <p>Available only with multiple floor maps. </p></li> <li>AppendMission</li> <li>UpdateMission </li> <li>GetRobotSystemInfo</li> </ul>"},{"location":"changelog/v0.1beta/#extended-existing-endpoints","title":"Extended Existing Endpoints","text":"<p>The following endpoints were enhanced with backward-compatible features compared to the POC version.</p> <ul> <li>CreateMission <p>Added support for new mission types in the request. </p></li> <li>SubscribeMissionStatus, SubscribeBatteryStatus, SubscribeRobotPose:      <p> Added <code>EventMetadata</code> to the response payloads. </p></li> </ul>"},{"location":"changelog/v0.1beta/#unchanged-endpoints","title":"Unchanged Endpoints","text":"<p>These endpoints remain the same as in the POC version.</p> <ul> <li>ChargeRobot </li> <li>ListRobotIDs </li> </ul>"},{"location":"changelog/v1.0/","title":"v1.0","text":""},{"location":"changelog/v1.0/#april-25-2025","title":"April 25, 2025","text":"Release Prod Breaking changes"},{"location":"changelog/v1.0/#release-bear-cloud-api-v10","title":"Release: Bear Cloud API v1.0","text":""},{"location":"changelog/v1.0/#minimum-robot-software-versions","title":"Minimum Robot Software Versions","text":"<ol> <li>Servi: 24.04.1 (24.04.2 was released as of July 2, 2025, which is the current recommended version)</li> <li>Carti: 24.03.1</li> </ol>"},{"location":"changelog/v1.0/#key-features","title":"Key Features","text":""},{"location":"changelog/v1.0/#mission-type-messages","title":"Mission Type Messages","text":"<p>Introduces mission types as first-class message types to create and send missions. This provides a clear distinction between mission types compatible with different robot families. Example: TraverseMission is only applicable to Carti robots.</p>"},{"location":"changelog/v1.0/#unified-map-data-retrieval","title":"Unified Map Data Retrieval","text":"<p>Consolidates map-related data access into a single endpoint to retrieve relevant map annotation dats, simplifying automated navigation and mission commands.</p>"},{"location":"changelog/v1.0/#multi-robot-subscription-support","title":"Multi-Robot Subscription Support","text":"<p>Enables selection of multiple robots via RobotSelector in subscription endpoints, allowing monitoring of all robots in a location with a single API call per endpoint.</p>"},{"location":"changelog/v1.0/#improved-error-handling","title":"Improved Error Handling","text":"<p>Enhances error messaging and diagnostics for better overall API usability.</p>"},{"location":"changelog/v1.0/#new-api-customers","title":"New API Customers","text":"<p>Please contact your Account Manager to discuss API use cases and request API keys.</p>"},{"location":"changelog/v1.0/#impact-on-beta-customers","title":"Impact on Beta Customers","text":"<p>Bear Cloud API v1.0 is not backward compatible with Beta v0.1. Current Beta users must download and compile the new v1.0 Protobuf library. Refer to the functional comparison table below and follow the Upgrade Guide. Contact Customer Support or your Account Manager if additional help is needed.</p>"},{"location":"changelog/v1.0/#how-to-upgrade","title":"How to Upgrade","text":"<ol> <li>Review the v1.0 API endpoint specification.</li> <li>Upgrade robot software to the compatible versions listed above.</li> <li>Download and compile the new v1.0 Protobuf library. See our Programming Guide and examples for relevant endpoints. 4 . Test your integration against the new version.</li> </ol> <p>Note</p> <p>Our robot software supports backward compatibility, allowing switching between v0 and v1 for a stable migration.</p>"},{"location":"changelog/v1.0/#api-functionality-comparison-beta-v01-vs-prod-v10","title":"API Functionality Comparison: Beta v0.1 vs. Prod v1.0","text":"v0.1 Beta v1.0 Prod What\u2019s Changed CreateMission CreateMission Mission behavior now indicated by message type,  e.g. <code>TraverseMission</code>and <code>BussingMission</code> UpdateMission UpdateMission Same as above, follows the mission type model SubscribeMissionStatus SubscribeMissionStatus v0.1 supports only one <code>robot_id</code>; v1.0 supports <code>RobotSelector</code> for multi-robot monitoring GetCurrentMapContent  GetMap   GetMapAnnotation   GetMapData GetCurrentMap v0.1 requires chaining multiple endpoints;  v1.0 consolidates into a single call SubscribeTrayStatuses SubscribeTrayStatuses v0.1 lacks tray names;  v1.0 returns map keyed by tray name, supports <code>RobotSelector</code> SubscribeRobotPose SubscribeRobotPose v0.1 supports single-robot pose tracking; v1.0 supports multi-robot with <code>RobotSelector</code> ChargeRobot ChargeRobot Same functionality;  updated to new Protobuf library LocalizeRobot LocalizeRobot Same functionality;  updated to new Protobuf library SubscribeLocalizationStatus SubscribeLocalizationStatus Same functionality;  updated to new Protobuf library AppendMission AppendMission Same functionality;  updated to new Protobuf library SubscribeRobotStatus SubscribeRobotStatus Same functionality;  updated to new Protobuf library SubscribeBatteryStatus SubscribeBatteryStatus Same functionality;  updated to new Protobuf library GetLocation n/a Not available in v1.0;  may return in a future version SwitchMap n/a Not available in v1.0;  may return in a future version SetRobotPose n/a Not available in v1.0;  may return in a future version GetRobotSystemInfo n/a Not available in v1.0;  may return in a future version"},{"location":"changelog/v1.1/","title":"v1.1","text":""},{"location":"changelog/v1.1/#release-bear-cloud-api-v11","title":"Release: Bear Cloud API v1.1","text":"<p>September 28, 2025</p> Release Prod servi-25.02 carti-25.02 <p>Note</p> <p>Bear Cloud API v1.1 is designed to be backward compatible with v1.0, so there should not be any issues working with the v1.0 gRPC APIs.</p>"},{"location":"changelog/v1.1/#minimum-robot-software-versions-for-full-support","title":"Minimum Robot Software Versions (for full support)","text":"<ol> <li>Servi: 25.02 (planned to be released by Q4 2025)</li> <li>Carti: 25.02 (planned to be released by Q4 2025)</li> </ol>"},{"location":"changelog/v1.1/#key-features","title":"Key features","text":"<ul> <li>14 new RPCs spanning maps, locations, system control, error handling, and robot-specific extensions</li> <li>Enhanced robot family support with dedicated Carti conveyor operations and expanded Servi tray management</li> <li>Improved observability through network status monitoring and error code subscriptions, along with richer robot status data</li> <li>Better fleet management with location discovery and enhanced robot status querying</li> </ul>"},{"location":"changelog/v1.1/#new-rpcs","title":"New RPCs","text":""},{"location":"changelog/v1.1/#robot-status-system","title":"Robot Status &amp; System","text":"<ul> <li>GetRobotStatus - Get the latest robot connectivity and operational state</li> <li>GetRobotSystemInfo - Get overall robot system information (tends to be static)</li> <li>RunSystemCommand - Execute OS-level commands on a robot (e.g., reboot)</li> <li>SubscribeNetworkStatus - Subscribe to current network-related info including Wi-Fi and connectivity info</li> </ul>"},{"location":"changelog/v1.1/#fleet-management","title":"Fleet Management","text":"<ul> <li>GetAvailableLocations - Return a map of locations the user has access to (location ID paired with human-readable name)</li> </ul>"},{"location":"changelog/v1.1/#maps-locations","title":"Maps &amp; Locations","text":"<ul> <li>GetLocationInfo - Retrieve information about a specific location by its 4-letter ID, including metadata such as floors, sections, and their associated maps</li> <li>GetMap - Retrieve a saved map by map_id from the cloud (does not require robot connectivity)</li> <li>SwitchMap - Switch the robot's current map to a specified map using floor level and section index (multi-map locations only)</li> </ul>"},{"location":"changelog/v1.1/#error-handling","title":"Error Handling","text":"<ul> <li>SubscribeErrorCodes - Subscribe to error codes returned by the robot</li> </ul>"},{"location":"changelog/v1.1/#localization-navigation","title":"Localization &amp; Navigation","text":"<ul> <li>SetPose - Update the robot's pose on the map without attempting to verify alignment with lidar scans (unlike LocalizeRobot)</li> </ul>"},{"location":"changelog/v1.1/#servi-specific-rpcs","title":"Servi-Specific RPCs","text":"<ul> <li>CalibrateTrays - Calibrate the trays on tray-equipped robots (Servi, Servi Plus). Calibrates all trays if no specific tray names are provided</li> </ul>"},{"location":"changelog/v1.1/#carti-specific-rpcs-conveyors","title":"Carti-Specific RPCs - Conveyors","text":"<ul> <li>ControlConveyor - Control conveyor motor operations for clockwise/counter-clockwise rotation or stop commands</li> <li>GetConveyorIndex - Retrieve the configured conveyor indexes for the robot</li> <li>SubscribeConveyorStatus - Subscribe to conveyor status updates including operation state, payload detection, health status, and installation status</li> </ul>"},{"location":"changelog/v1.1/#modified-message-fields","title":"Modified Message Fields","text":""},{"location":"changelog/v1.1/#robotstate-bearroboticsapiv1corerobot_statusproto","title":"RobotState (bearrobotics/api/v1/core/robot_status.proto)","text":"<ul> <li>Added: <code>battery</code> field (field 2) - Battery state information</li> <li>Added: <code>emergency_stop</code> field (field 3) - Emergency stop system state</li> <li>Added: <code>mission</code> field (field 4) - Current mission state</li> <li>Added: <code>pose</code> field (field 5) - Robot's current pose</li> <li>Added: <code>error_codes</code> field (field 6) - Error codes from the robot</li> <li>Added: <code>typed_status</code> oneof (fields 7-8) - Robot family-specific states (ServiState, CartiState)</li> <li>New: <code>ServiState</code> message - Servi-specific robot states including tray information</li> <li>New: <code>CartiState</code> message - Carti-specific robot states including conveyor information</li> </ul>"},{"location":"changelog/v1.1/#missionstate-bearroboticsapiv1coremission_statusproto","title":"MissionState (bearrobotics/api/v1/core/mission_status.proto)","text":"<ul> <li>Added: <code>mission_type</code> field (field 6) - Indicates the type of mission being executed</li> <li>Added: <code>owner</code> field (field 7) - Identifies who initiated the mission (e.g., \"touchscreen\", \"api\")</li> <li>New: <code>MissionType</code> message - Categorizes mission types by source (base, servi, carti)</li> <li>New: <code>MissionStates</code> message - Collection of missions with tracking of current active mission</li> </ul> <p>Note</p> <p>The previous <code>mission_state</code> field (field 3) will still be supported, but the use of the <code>mission_states</code> will provide a better view of the list of active and pending missions.</p>"},{"location":"changelog/v1.1/#emergencystopstate-bearroboticsapiv1corerobot_statusproto","title":"EmergencyStopState (bearrobotics/api/v1/core/robot_status.proto)","text":"<ul> <li>Added: <code>button_pressed</code> field (field 2) - Physical emergency stop button state</li> </ul>"},{"location":"changelog/v1.1/#mission-definitions-bearroboticsapiv1coremissionproto","title":"Mission Definitions (bearrobotics/api/v1/core/mission.proto)","text":"<ul> <li>Added: <code>BaseType</code> enum - Defines mission types for core API</li> <li>Enhanced: <code>NavigateAutoMission</code> - Improved documentation for goal selection behavior</li> </ul>"},{"location":"changelog/v1.1/#new-dependencies","title":"New Dependencies","text":"<p>v1.1 introduces several new proto dependencies to support the expanded functionality:</p> <ul> <li><code>bearrobotics/api/v1/carti/conveyor.proto</code> - Conveyor control and status definitions</li> <li><code>bearrobotics/api/v1/core/errors.proto</code> - Error code definitions</li> <li><code>bearrobotics/api/v1/core/location.proto</code> - Location information structures</li> <li><code>bearrobotics/api/v1/core/network_status.proto</code> - Network status definitions</li> <li><code>bearrobotics/api/v1/core/robot_system.proto</code> - Robot system information structures</li> </ul>"},{"location":"changelog/v1.1/#new-api-customers","title":"New API Customers","text":"<p>Please contact your Account Manager to discuss API use cases and request API keys.</p>"},{"location":"changelog/v1.1/#how-to-upgrade","title":"How to Upgrade","text":"<ol> <li>Review the v1.1 API endpoint specification.</li> <li>Upgrade robot software to the compatible versions listed above.</li> <li>Download and compile the updated v1 Protobuf library. See our Programming Guide and examples for relevant endpoints.</li> <li>Test your integration against the new version.</li> </ol>"},{"location":"concepts/localization/","title":"Localization","text":"<p>Localization status is to see whether the robot \u201cknows\u201d where it is in the map. This is critical for operation, as the robot needs to have an accurate understanding of its place in the environment in order to navigate reliably. Once localized, our robots are able to keep themselves localized as they move through an environment, using sensor data to compare what it sees to what is on its map. This means it only needs to figure out where it is once, and can stay localized from there. A robot may become delocalized, meaning it has lost track of where it is in the map. This can happen for various reasons, such as:</p> <ol> <li>It cannot find walls or landmarks from its map in the sensor data</li> <li>Often because walls are obscured by lots of new obstacles</li> <li>It encounters an area that looks very similar to many other locations in the    map</li> <li>For example, a long featureless hallway looks the same to the sensors from       many different places</li> <li>It faces significant slippage of the wheels</li> <li>This is more rare as we have compensation for wheel slip, but if       significant enough, it can confuse the robot</li> </ol> <p>In the event of delocalizing, the user will need to trigger localization again to tell the robot where it is, before having it navigate again.</p> <p>Some clear definitions for localization terminology are as follows:</p> <ol> <li>Localized</li> <li>Robot knows where it is in the environment</li> <li>Localizing</li> <li>Robot is currently running a process to figure out where it is</li> <li>Currently our API does this with a hint about its position, given by the       user</li> <li>Eventually this hint will not be required, and robot can do the initial       localization on its own</li> <li>Delocalized</li> <li>Robot has lost track of where it is in the environment</li> <li>Likely this means it cannot navigate anymore</li> <li>In this event, the user will need to localize the robot again to tell the       robot its current location</li> <li>Pose</li> <li>The x-y coordinate on the robot\u2019s map</li> <li>This is used frequently to say either where the robot is, or for telling       the robot where it is on the map</li> </ol> <p>We supply a mechanism for triggering a robot localization. This means the user tells the robot an estimation of where the robot is in the map (using a Pose), and the robot uses this guess to more accurately find its place. If the localization process is a success, it returns Success state. If the localization process fails, it will return Failed state, meaning the robot is not able to start driving autonomously.</p> <p></p>"},{"location":"concepts/location/","title":"Location","text":"<p>The location represents a site where a robot is operating. This is accessible from the Universe platform. A robot must be paired to a location and supplied with a map before it can operate with the full suite of Mission and Navigation API. The location represents a site where a robot is operating. This is accessible from the Bear Fleet Managment (a.k.a. Universe) platform. A robot must be paired to a location and supplied with a map before it can operate with the full suite of Mission and Navigation API.</p>"},{"location":"concepts/location/#location-registration-synchronization","title":"Location Registration &amp; Synchronization","text":"<p>Before a robot may synchronize with the Universe platform, the robot must be paired with the Bear Fleet Management. For robots running Bear\u2019s touchscreen app, this will be part of the setup process that is presented during the first bootup. The process is referred to as Location Registration.</p> <p>When a robot is paired to a location, it synchronizes its location with the Universe platform once upon bootup. Therefore, if any changes to the map are made in the Universe map editor, the robot must be rebooted to synchronize the robot with the updated map.</p>"},{"location":"concepts/location/#maps","title":"Maps","text":"<p>A map is a visual and annotated representation of a given area at a robot site. Maps consist of 3 components:</p> <ul> <li>Image: A PNG graphic of the site.</li> <li>Metadata: Metadata related to the PNG itself, including scaling and origin.</li> <li>Annotations: User-defined aspects of the map such as Destinations.</li> </ul>"},{"location":"concepts/location/#png-image","title":"PNG Image","text":"<p>This is provided as a PNG image. The graphic itself is represented by three colors:</p> <ul> <li>White: This is a traversable space the robot may move across.</li> <li>Black: This is an occupied space that the robot will expect to be blocked.</li> <li>Gray: Unmapped area.</li> </ul> <p>The following is an example map of what a restaurant site may look like: </p> <p>Objects are represented based on a horizontal scan from the robot's LiDAR sensor mounted on the base of the robot. The map in the above example contains chairs and tables. Due to the height of where the LiDAR sensor is mounted, chairs are represented by their legs as a square arrangement of 4 points, while tables are only visible by their slightly wider center column.</p>"},{"location":"concepts/location/#metadata","title":"Metadata","text":"<p>The metadata of a map image is data relevant for rendering the image and how coordinates of the robot should be positioned relative to the image itself.</p>"},{"location":"concepts/location/#annotation","title":"Annotation","text":"<p>Users may add custom properties to a map, called annotations. This is accessible from the Map editing page in Universe.</p>"},{"location":"concepts/location/#destination","title":"Destination","text":"<p>This is the most common annotation type. This is represented as some ID that is associated to a user-defined Pose on the map. Destinations are primarily used as points of interest that can be provided to operate with Mission. Additionally, the underlying pose is something that can be supplied to do Navigation-related operations.</p> <p>The following graphic is the same map but annotated with some destinations: </p> <p>Each destination is a 2D point on the map with a direction associated with it, represented as a yaw value radians.</p>"},{"location":"concepts/mission/","title":"Missions","text":"<p>Missions are the main way we tell our robot to do work. They describe a set of actions and behaviors (move, wait for trigger, play sound, etc) that define how a robot accomplishes a workflow. Missions handle both simple workflows (navigate to goal) and complex workflows (navigate to multiple goals, waiting at each one for certain triggers), depending on the mission type.</p>"},{"location":"concepts/mission/#goals","title":"Goals","text":"<p>Most missions utilize goals supplied by the user. A goal defines a place in the robot\u2019s map that we want the robot to either go to, or do some action with. This goal at the least will define a coordinate place in the map, and may also include more information detailing some of the work the mission has to do there. Some mission types only support a single goal, while other more complex missions support multiple goals.</p>"},{"location":"concepts/mission/#mission-types","title":"Mission Types","text":"<p>A mission type tells us what kind of mission behaviors will be executed on the robot. As mentioned, missions can have very little complexity or a lot depending on how much logic the user wants the robot to execute. This allows developers to choose whether they want to delegate the workflow of the robot to a more complex mission, or manage more of the logic in their app and use smaller missions with less logic. Bear provides several pre-defined mission types, available through the API. These range from some simple mission types shared across all robot families, to some more complex missions exposed only to their respective robot family.</p> <p>For example, a user wanting a Servi-family robot to complete a restaurant delivery workflow could make use of a DeliveryMission. This has logic to take several goals (positions in the map), navigate to each one, and wait for food to be removed before moving onto the next goal. It also includes things like prompting the customer to remove food, and other quality-of-life behaviors for the restaurant delivery use-case. This is useful for things like touchscreen control apps, allowing your application to send simple mission requests to accomplish a restaurant workflow, without much logic in the application itself.</p> <p>Alternatively, you may want more control over the robot\u2019s behavior, and want to trigger things through your own app instead. Using a simpler mission like NavigateMission (which just navigates to a single goals before finishing), you can tell the robot to just move to a goal, and have your app decide when to send the next navigation to a goal. This is useful for when you have a fleet manager dispatching robots, and need full control of the exact actions and timings for the robots.</p> <p>The types of missions available are filtered per-robot-family, meaning that each family has a select set of missions the user can send it. This is to ensure only missions relevant to that robot family are available (it does not make sense to send a BussingMission to a Carti600 robot).</p>"},{"location":"concepts/mission/#command","title":"Command","text":"<p>Mission Commands are high-level controls for an overall mission. When a mission is created, commands are available for users to control the execution of that mission. The high-level commands are:</p>"},{"location":"concepts/mission/#cancel","title":"Cancel","text":"<ul> <li>Stops mission execution and returns robot to Idle</li> <li>Logs in our system as a Cancelled mission, which can be useful for tracking   user-cancelled missions</li> </ul>"},{"location":"concepts/mission/#pause","title":"Pause","text":"<ul> <li>Pauses execution of the mission, without resetting it</li> </ul>"},{"location":"concepts/mission/#resume","title":"Resume","text":"<ul> <li>Resumes execution of the mission, picking up from the point it left off</li> </ul>"},{"location":"concepts/mission/#finish","title":"Finish","text":"<ul> <li>Stops mission execution and returns robot to Idle</li> <li>Logs in our system as a Successful mission, allowing user to specify that this   was not ended due to errors or issues</li> </ul>"},{"location":"concepts/mission/#mission-queue","title":"Mission Queue","text":"<p>Our mission system supports a mission queue, which gives users the ability to queue up multiple missions that execute one after another. Missions can be added with the <code>Append</code> API, and each mission will start executing as soon as the previous mission in the queue is in terminal state.</p> <p>Further down our roadmap, we will expand this functionality to allow for more powerful tools around this queue, including removing missions, inserting, and getting the current list of missions in the queue.</p>"},{"location":"concepts/mission/#status","title":"Status","text":"<p>Mission Status is the overall execution state of the mission. It tells us whether the mission is running, and if not, what state it ended the mission in. This is useful for understanding whether a command you sent correctly stopped/paused/resumed the mission, and whether the mission completed in error or not. This state is universal to all missions, and does not describe details about what the mission internally is doing. The high-level states are:</p>"},{"location":"concepts/mission/#running","title":"Running","text":"<ul> <li>Mission is currently executing normally, either from mission starting or user   Resume command</li> </ul>"},{"location":"concepts/mission/#paused","title":"Paused","text":"<ul> <li>Mission was paused by user Pause command</li> </ul>"},{"location":"concepts/mission/#cancelled","title":"Cancelled","text":"<ul> <li>Mission was cancelled by user Cancel command</li> </ul>"},{"location":"concepts/mission/#succeded","title":"Succeded","text":"<ul> <li>Mission completed normally, either by completing the behaviors in the mission   or by user Finish command</li> </ul>"},{"location":"concepts/mission/#failed","title":"Failed","text":"<ul> <li>Mission failed to complete due to internal error/failure in the mission</li> </ul>"},{"location":"concepts/mission/#feedback","title":"Feedback","text":"<p>While status provides us with the overall execution state of the mission, it doesn\u2019t give us details of what is happening during a mission. To achieve this, we have a Feedback field in our Mission Status which describes what the mission internally is doing. This feedback, similar to our mission types, is per-robot-family, meaning we have a single Feedback msg type for all missions in a given robot family. This ensures clients can have stable feedback despite many different mission types being available to send to the robot.</p> <p>Missions will populate information in the feedback as they are available. For example, given the following definition for Servi robot-family feedback:</p> <pre><code>// Servi Robot-Family Feedback\nmessage Feedback {\n  enum Status {\n    STATUS_UNKNOWN = 0;\n    STATUS_NAVIGATING = 1;\n    STATUS_ARRIVED = 2;\n    STATUS_DOCKING = 3;\n    STATUS_UNDOCKING = 4;\n  }\n  Status status = 1;\n}\n</code></pre> <p>This covers all potential states our missions can report to the client. However, not all missions are guaranteed to utilize all of these states. A NavigateMission may not have <code>STATUS_ARRIVED</code>, as it only contains <code>STATUS_NAVIGATE</code> before the mission ends.</p> <p>With this in mind, clients should build their applications to handle cases where states may show up in different orders, and all states may not even show up. Clients should not build applications that depend heavily on the ordering that each of these states arrive at, as different missions may have different behaviors in different orders. Building an application that relies on this means the mission cannot change without potentially breaking the client app.</p> <p>A better way is to build your app such that it has handling for every possible state for Servi Feedback. That way no matter what mission you send, and what order the states appear, your app can properly adapt. A good example of this is building a touchscreen application to show mission feedback. If the touchscreen app has a dedicated page for each state, it can simply show the correct screen corresponding to a given status reported by the mission. If the Docking status never shows up, the screen simply does not display. This is resilient to changes in mission behavior as the application does not care what order or which statuses within the feedback show up.</p> <p></p>"},{"location":"concepts/status/","title":"Status","text":"<p>Status is defined as current realtime state of a set of values. This can range from anything like connectivitiy to the cloud or what the charging condition is on a given robot.</p>"},{"location":"concepts/status/#format","title":"Format","text":"<p>Endpoints that provide status are generally named with a pattern that consists of <code>Subscribe</code> as a prefix and ends in <code>Status</code> e.g.<code>SubscribeFooStatus</code>). There is a subtle but distinct difference in usage for Status vs State.</p> <p>Status represents the current snapshot of a state on the robot. This is why it is only associated with the Subscribe RPC endpoint.</p> <p>State is a snapshot of a set of a set of values at some point in time. Messages that carry these values are named state as the message itself.</p>"},{"location":"guides/authentication/","title":"Authentication and Authorization with API Key","text":"<p>Bear Robotics provides clients with an API key in JSON format. When this API key is submitted to the authentication server, it returns a JSON Web Token (JWT), which serves as the credential required for authenticating requests to the Bear Cloud API server via gRPC.</p>"},{"location":"guides/authentication/#api-key-format","title":"API Key Format","text":"<p>The credentials are provided in the following JSON format:</p> <pre><code>{\n  \"api_key\": \"your-api-key\",\n  \"secret\": \"your-api-secret\",\n  \"scope\": \"your-scope\"\n}\n</code></pre> <p>All three fields must be correctly matched for the credentials to be authorized:</p> <ul> <li><code>api_key</code>: A unique identifier for the credentials within our system.</li> <li><code>scope</code>: A value fixed at the time the API key is issued. It represents the distributor to which the API key is authorized.</li> <li><code>secret</code>: A passcode associated with the API key. It is essential that the secret be stored securely.</li> </ul>"},{"location":"guides/authentication/#jwt-generation-examples","title":"JWT Generation Examples:","text":"CLIJavaPython <pre><code>curl -X POST https://api-auth.bearrobotics.ai/authorizeApiAccess \\\n    -H \"Content-Type: application/json\" \\\n    -d $(cat /path/to/credentials.json)'\n</code></pre> <p>Please see the Java client code example in our public repository.</p> <p>Please see the Python client code example in our public repository.</p>"},{"location":"guides/authentication/#jwt-usage","title":"JWT Usage","text":"<p>Once the JWT is obtained, it must be included in the metadata of each outgoing gRPC request using the following format:</p> <pre><code>Authorization: Bearer &lt;JWT&gt;\n</code></pre> <p>For details, please see the following documentation:</p> <ul> <li> <p>gRPC Metadata guide</p> </li> <li> <p>gRPC Authentication guide</p> </li> </ul>"},{"location":"guides/authentication/#jwt-usage-examples","title":"JWT Usage Examples","text":"CLIJavaPython <pre><code>grpcurl -H \"authorization: Bearer $(cat /path/to/jwt)\" -d '{}' \\\napi.bearrobotics.ai:443 bearrobotics.api.v1.services.cloud.APIService.ListRobotIDs\n</code></pre> <p>Please see the Java client code example in our public repository.</p> <p>Please see the Python client code example in our public repository.</p>"},{"location":"guides/authentication/#jwt-expiry","title":"JWT Expiry","text":"<p>The JWT has an expiration time, specified by the <code>exp</code> field. To maintain uninterrupted access, it is recommended to refresh the JWT periodically, ideally every 30 minutes.</p>"},{"location":"guides/authentication/#jwt-refresh-examples","title":"JWT Refresh Examples","text":"Java <p>Please see the Java client code example in our public repository.</p>"},{"location":"guides/authentication/#security","title":"Security","text":"<p>All connections to the Bear Cloud API server are secured via TLS. The API server's certificates are signed by Google, a trusted Certificate Authority recognized by most systems.</p>"},{"location":"guides/authentication/#python-references","title":"Python References","text":"<ul> <li>Token-based authentication in gRPC</li> <li>Adding a JWT as part of the request header</li> </ul>"},{"location":"guides/errors/","title":"Errors and Troubleshooting","text":""},{"location":"guides/errors/#common-errors","title":"Common Errors","text":"<p>These are common error types you might encounter when using the Bear API. We follow gRPC status codes, and where applicable, include structured error details using google.rpc.Status and related types (e.g., BadRequest, ErrorInfo).  </p>"},{"location":"guides/errors/#robot-software-incompatible","title":"Robot software incompatible","text":"<p>The robot\u2019s software version does not meet the compatibility requirements of the API.  Code: <code>FAILED_PRECONDITION</code> Resolution: Check the robot software version compatibility checklist. Starting with API v1, calls return appropriate errors when a version mismatch is detected.  </p>"},{"location":"guides/errors/#authenticated-error","title":"Authenticated error","text":"<p>The request is missing valid authentication credentials (e.g., invalid token, expired session).  Code: <code>UNAUTHENTICATED</code> Resolution: Confirm that the API key or JWT token is correct and has not expired. Refer to the authentication guide for how to obtain and refresh a JWT token using your API key.  </p>"},{"location":"guides/errors/#permission-denied","title":"Permission Denied","text":"<p>The request was authenticated, but the client does not have permission to access the requested resource.  Code: <code>PERMISSION_DENIED</code> Resolution: Verify that the API key's user has the necessary permissions for the target robot or location. Tip: Double-check the spelling of all <code>robot_id</code> and <code>location_id</code> values. </p>"},{"location":"guides/errors/#request-fails-validation","title":"Request fails validation","text":"<p>The request payload is well-formed, but contains invalid or missing values.  Code: <code>INVALID_ARGUMENT</code> Resolution: Review the request against the API schema. The error message will typically include FieldViolation entries to help you pinpoint the issue. </p>"},{"location":"guides/getting-started/","title":"Getting Started","text":"<p>This section aims to provide a fast, code-free way of invoking the APIs. For complete, runnable end-to-end examples in Python, Java, and C# (DotNet), refer to the <code>examples</code> under the public repository.</p>"},{"location":"guides/getting-started/#get-your-credentials","title":"Get Your Credentials","text":"<p>As a first step, we need to obtain a JWT token from the Auth endpoint, as all APIs require it in the form of a Bearer authentication. Make sure your credentials JSON file is ready in a known path (See the Authentication Guide for more information about credentials).</p> <p>The command below both prints out the token and writes it to a file named <code>bear-creds.jwt</code>.</p> <p><pre><code>curl -X POST https://api-auth.bearrobotics.ai/authorizeApiAccess \\\n    -H \"Content-Type: application/json\" \\\n    -d $(cat /path/to/credentials.json)' | tee bear-creds.jwt\n</code></pre> Once the authentication token and the target robots are ready, you're all set!</p>"},{"location":"guides/getting-started/#invoking-the-apis","title":"Invoking the APIs","text":"<p>There are two different ways to invoke most APIs, gRPC and plain HTTP.</p> <p>gRPC supports a wider range of RPCs with its support for server-side streaming APIs (e.g. <code>SubscribeMissionStatus</code>), and provides a typed request/response message definition. However, it may be relatively complex to set up the initial development environment (compiling protobuf files, connection management, etc.) compared to sending plain HTTP requests.</p>"},{"location":"guides/getting-started/#grpc","title":"gRPC","text":"<p>Note</p> <p>To invoke the gRPC APIs in the command line, <code>grpcurl</code> is used in the examples below. Make sure the CLI tool is installed (either as a standalone binary or a docker image) in your environment prior to testing.</p> <p>The examples below are only a small subset of the available APIs. A full list of the APIs and their documentation can be found under the v1.0 gRPC API section.</p>"},{"location":"guides/getting-started/#unary-rpcs","title":"Unary RPCs","text":"<p>Listing the list of robots for a given location with <code>ListRobotIDs</code> RPC: <pre><code>grpcurl -H \"authorization: Bearer $(cat bear-dev.jwt)\" -d '{\n    \"filter\": {\n        \"locationId\": \"&lt;location-id&gt;\"\n    }\n}' api.bearrobotics.ai:443 bearrobotics.api.v1.services.cloud.APIService.ListRobotIDs\n</code></pre> Creating a mission for a target robot with the <code>CreateMission</code> RPC: <pre><code>grpcurl -H \"authorization: Bearer $(cat bear-creds.jwt)\" -d '\n  \"robot_id\": \"pennybot-123456\",\n  \"mission\": {\n    \"base_mission\": {\n      \"navigate_mission\": {\n        \"goal\": {\n          \"destination_id\": \"&lt;destination-id&gt;\"\n        }\n      }\n    }\n  }\n}' api.bearrobotics.ai:443 bearrobotics.api.v1.services.cloud.APIService.CreateMission\n</code></pre></p>"},{"location":"guides/getting-started/#server-side-streaming-rpcs","title":"Server-side Streaming RPCs","text":"<p>Subscribe to updates in mission status with the <code>SubscribeMissionStatus</code> RPC. <pre><code>grpcurl -H \"authorization: Bearer $(cat bear-creds.jwt)\" -d '\n    \"selector\": {\n      \"robot_ids\": {\n        \"ids\": \"pennybot-123456\"\n      }\n    }\n}' api.bearrobotics.ai:443 bearrobotics.api.v1.services.cloud.APIService.SubscribeMissionStatus\n</code></pre></p>"},{"location":"guides/getting-started/#plain-http","title":"Plain HTTP","text":"<p>A REST version of the APIs are also available only for unary RPCs. The full documentation of the available APIs can be found in our Swagger page.</p> <p>A simple example request below lists all robots for a given location ID:</p> <pre><code>curl -X POST api.bearrobotics.ai/v1/robot-ids/list \\\n    -H \"Content-Type: application/json\" \\\n    -H \"authorization: Bearer $(cat bear-creds.jwt)\" \\\n    -d '{\n            \"filter\": {\n                \"locationId\": \"&lt;location-id&gt;\"\n            }\n        }'\n</code></pre> <p>This example request below creates a single-destination mission for <code>pennybot-123456</code>:</p> <pre><code>curl -X POST api.bearrobotics.ai/v1/mission/create \\\n    -H \"Content-Type: application/json\" \\\n    -H \"authorization: Bearer $(cat bear-creds.jwt)\" \\\n    -d '{\n          \"robotId\": \"pennybot-123456\",\n          \"mission\": {\n            \"baseMission\": {\n              \"navigateMission\": {\n                \"goal\": {\n                  \"destinationId\": \"&lt;destination-id&gt;\"\n                }\n              }\n            }\n          }\n        }'\n</code></pre>"},{"location":"v0.1/cloud/CloudApiService/","title":"Cloud API Service","text":"<p>The definition of Bear Cloud API service.</p>"},{"location":"v0.1/cloud/CloudApiService/#fleet-management","title":"Fleet Management","text":""},{"location":"v0.1/cloud/CloudApiService/#listrobotids","title":"ListRobotIDs","text":"<ul> <li>Request Type: ListRobotIDsRequest</li> <li>Response Type: ListRobotIDsResponse</li> <li>Description:   List all robot IDs that you have permissions for and satisfies the given filter options regardless of robot status.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#map","title":"Map","text":""},{"location":"v0.1/cloud/CloudApiService/#getcurrentmapcontent","title":"GetCurrentMapContent","text":"<ul> <li>Request Type: GetCurrentMapContentRequest</li> <li>Response Type: GetCurrentMapContentResponse</li> <li>Description:   Retrieve the current map content data, which is loaded on the robot.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#getlocation","title":"GetLocation","text":"<ul> <li>Request Type: GetLocationRequest</li> <li>Response Type: GetLocationResponse</li> <li>Description:   Retrieve the current location data to which the robot is connected.If the robot is offline, it uses the cached Location data.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#getmap","title":"GetMap","text":"<ul> <li>Request Type: GetMapRequest</li> <li>Response Type: GetMapResponse</li> <li>Description:   Retrieve the map corresponding to a given map_id.If offline, it uses the cached MapData data.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#getmapannotation","title":"GetMapAnnotation","text":"<ul> <li>Request Type: GetMapAnnotationRequest</li> <li>Response Type: GetMapAnnotationResponse</li> <li>Description:   Retrieve annotation data for a specified annotation_id.If offline, it uses the cached Annotation data.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#getmapdata","title":"GetMapData","text":"<ul> <li>Request Type: GetMapDataRequest</li> <li>Response Type: GetMapDataResponse</li> <li>Description:   Retrieve map data for a specified map_data_id.If offline, it uses the cached MapData data.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#switchmap","title":"SwitchMap","text":"<ul> <li>Request Type: SwitchMapRequest</li> <li>Response Type: SwitchMapResponse</li> <li>Description:   Switch the current map to a specified map.The request should specify a floor level and section index to be used. Returns the map_id of the switched map.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#mission","title":"Mission","text":""},{"location":"v0.1/cloud/CloudApiService/#appendmission","title":"AppendMission","text":"<ul> <li>Request Type: AppendMissionRequest</li> <li>Response Type: AppendMissionResponse</li> <li>Description:   Append the given mission to the end of the queue. The mission will be added in the order it is received.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#chargerobot","title":"ChargeRobot","text":"<ul> <li>Request Type: ChargeRobotRequest</li> <li>Response Type: ChargeRobotResponse</li> <li>Description:   Create a mission to go charge a robot regardless of battery state.The call will fail if the robot is already on a different mission, which needs to be canceled before the robot can be charged.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#createmission","title":"CreateMission","text":"<ul> <li>Request Type: CreateMissionRequest</li> <li>Response Type: CreateMissionResponse</li> <li>Description:   Create a mission for a given type.The call will fail if the robot cannot go on the requested mission.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#subscribemissionstatus","title":"SubscribeMissionStatus","text":"<ul> <li>Request Type: SubscribeMissionStatusRequest</li> <li>Response Type: SubscribeMissionStatusResponse</li> <li>Description:   Subscribe to robot's mission status.Upon subscription, the server immediately sends the latest known mission status, followed by updates whenever the mission status changes.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#updatemission","title":"UpdateMission","text":"<ul> <li>Request Type: UpdateMissionRequest</li> <li>Response Type: UpdateMissionResponse</li> <li>Description:   Update the specified mission with the given command.The call will fail if the robot is not on the specified mission or cannot execute the command.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#navigation","title":"Navigation","text":""},{"location":"v0.1/cloud/CloudApiService/#localizerobot","title":"LocalizeRobot","text":"<ul> <li>Request Type: LocalizeRobotRequest</li> <li>Response Type: LocalizeRobotResponse</li> <li>Description:   Localize the robot to a localization goal.If the goal is accepted, subcribe to SubscribeLocalizationStatus to get the localization status.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#setrobotpose","title":"SetRobotPose","text":"<ul> <li>Request Type: SetRobotPoseRequest</li> <li>Response Type: SetRobotPoseResponse</li> <li>Description:   Manually set the robot pose given a pose on the map and a covariance matrix.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#subscribelocalizationstatus","title":"SubscribeLocalizationStatus","text":"<ul> <li>Request Type: SubscribeLocalizationStatusRequest</li> <li>Response Type: SubscribeLocalizationStatusResponse</li> <li>Description:   Subscribe to the robot's localization status.Upon subscription, the latest known localization status will be sent. If the robot is actively localizing, statuses will be published upon changes.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#subscriberobotpose","title":"SubscribeRobotPose","text":"<ul> <li>Request Type: SubscribeRobotPoseRequest</li> <li>Response Type: SubscribeRobotPoseResponse</li> <li>Description:   Subscribe to the robot's pose.Upon subscription, the server provides regular updates (5Hz) of the robot's estimated position.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#settings","title":"Settings","text":""},{"location":"v0.1/cloud/CloudApiService/#getprofile","title":"GetProfile","text":"<ul> <li>Request Type: GetProfileRequest</li> <li>Response Type: GetProfileResponse</li> <li>Description:   Retrieve user-defined profile with customizable settings for a profile_id.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#getrobotprofiles","title":"GetRobotProfiles","text":"<ul> <li>Request Type: GetRobotProfilesRequest</li> <li>Response Type: GetRobotProfilesResponse</li> <li>Description:   Retrieve a set of user-defined profiles for a specific robot_id.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#getsoundfileuploadurl","title":"GetSoundFileUploadURL","text":"<ul> <li>Request Type: GetSoundFileUploadURLRequest</li> <li>Response Type: GetSoundFileUploadURLResponse</li> <li>Description:   Retrieve the sound file upload URL for specific sound_id.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#listprofileids","title":"ListProfileIDs","text":"<ul> <li>Request Type: ListProfileIDsRequest</li> <li>Response Type: ListProfileIDsResponse</li> <li>Description:   List all profile IDs for a specific location_id.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#robot-status","title":"Robot Status","text":""},{"location":"v0.1/cloud/CloudApiService/#subscribebatterystatus","title":"SubscribeBatteryStatus","text":"<ul> <li>Request Type: SubscribeBatteryStatusRequest</li> <li>Response Type: SubscribeBatteryStatusResponse</li> <li>Description:   Subscribe to the robots' battery status.Upon subscription, the server immediately sends the latest known battery status, followed by updates whenever the battery status changes.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#subscriberobotstatus","title":"SubscribeRobotStatus","text":"<ul> <li>Request Type: SubscribeRobotStatusRequest</li> <li>Response Type: SubscribeRobotStatusResponse</li> <li>Description:   Subscribe to connection and operation state of the robotUpon subscription, the server immediately sends the latest known operation status, followed by updates whenever the operation status changes.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#subscribetraystatuses","title":"SubscribeTrayStatuses","text":"<ul> <li>Request Type: SubscribeTrayStatusesRequest</li> <li>Response Type: SubscribeTrayStatusesResponse</li> <li>Description:   Subscribe for high level tray status.This is only available for robots with trays (e.g. Servi, Plus). Upon subscription, the latest known tray status will be sent, followed by snapshot updates of all tray states when any state is updated. Weight changes are updated at a 10g granularity threshold. Robots with trays that does not have weight sensor will have an UNKNOWN load state and no weight data streamed.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#robot-system","title":"Robot System","text":""},{"location":"v0.1/cloud/CloudApiService/#getrobotsysteminfo","title":"GetRobotSystemInfo","text":"<ul> <li>Request Type: GetRobotSystemInfoRequest</li> <li>Response Type: GetRobotSystemInfoResponse</li> <li>Description:   Get the overall robot system information.When called, the server returns robot system information. The system info tends to be static and does not change often.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#message-types","title":"Message Types","text":""},{"location":"v0.1/cloud/CloudApiService/#appendmissionrequest","title":"AppendMissionRequest","text":"Field Type Description <code>robot_id</code> string <code>mission</code> Mission"},{"location":"v0.1/cloud/CloudApiService/#appendmissionresponse","title":"AppendMissionResponse","text":"Field Type Description <code>mission_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#chargerobotrequest","title":"ChargeRobotRequest","text":"Field Type Description <code>robot_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#chargerobotresponse","title":"ChargeRobotResponse","text":"Field Type Description <code>mission_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#createmissionrequest","title":"CreateMissionRequest","text":"Field Type Description <code>robot_id</code> string <code>mission</code> Mission"},{"location":"v0.1/cloud/CloudApiService/#createmissionresponse","title":"CreateMissionResponse","text":"Field Type Description <code>mission_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#getcurrentmapcontentrequest","title":"GetCurrentMapContentRequest","text":"Field Type Description <code>robot_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#getcurrentmapcontentresponse","title":"GetCurrentMapContentResponse","text":"Field Type Description <code>map_content</code> MapContent"},{"location":"v0.1/cloud/CloudApiService/#getlocationrequest","title":"GetLocationRequest","text":"Field Type Description <code>location_id</code> string The unique identifier of the location.The ID is typically a string of uppercase letters and numbers.Example: \"QSVS\"."},{"location":"v0.1/cloud/CloudApiService/#getlocationresponse","title":"GetLocationResponse","text":"Field Type Description <code>location</code> Location Information about the specified location, as represented by alocation.Location message.This includes all relevant details about the location, includingdisplay name, floor, and section info."},{"location":"v0.1/cloud/CloudApiService/#getmapannotationrequest","title":"GetMapAnnotationRequest","text":"Field Type Description <code>annotation_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#getmapannotationresponse","title":"GetMapAnnotationResponse","text":"Field Type Description <code>annotation</code> Annotation"},{"location":"v0.1/cloud/CloudApiService/#getmapdatarequest","title":"GetMapDataRequest","text":"Field Type Description <code>map_data_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#getmapdataresponse","title":"GetMapDataResponse","text":"Field Type Description <code>map_data</code> MapData Information about the map data which includes all relevant details aboutthe map data, especially the map."},{"location":"v0.1/cloud/CloudApiService/#getmaprequest","title":"GetMapRequest","text":"Field Type Description <code>map_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#getmapresponse","title":"GetMapResponse","text":"Field Type Description <code>map</code> Map Contains all relevant information about the requested map,including its metadata and configuration details."},{"location":"v0.1/cloud/CloudApiService/#getprofilerequest","title":"GetProfileRequest","text":"Field Type Description <code>profile_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#getprofileresponse","title":"GetProfileResponse","text":"Field Type Description <code>profile</code> Profile"},{"location":"v0.1/cloud/CloudApiService/#getrobotprofilesrequest","title":"GetRobotProfilesRequest","text":"Field Type Description <code>robot_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#getrobotprofilesresponse","title":"GetRobotProfilesResponse","text":"Field Type Description <code>profiles</code> Profile"},{"location":"v0.1/cloud/CloudApiService/#getrobotsysteminforequest","title":"GetRobotSystemInfoRequest","text":"Field Type Description <code>robot_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#getrobotsysteminforesponse","title":"GetRobotSystemInfoResponse","text":"Field Type Description <code>robot_system_info</code> RobotSystemInfo robot_system_info contains ID, display name, family,  and software version of the robot."},{"location":"v0.1/cloud/CloudApiService/#getsoundfileuploadurlrequest","title":"GetSoundFileUploadURLRequest","text":"Field Type Description <code>sound_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#getsoundfileuploadurlresponse","title":"GetSoundFileUploadURLResponse","text":"Field Type Description <code>upload_url</code> string"},{"location":"v0.1/cloud/CloudApiService/#listprofileidsrequest","title":"ListProfileIDsRequest","text":"Field Type Description <code>location_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#listprofileidsresponse","title":"ListProfileIDsResponse","text":"Field Type Description <code>profile_ids</code> string"},{"location":"v0.1/cloud/CloudApiService/#listrobotidsrequest","title":"ListRobotIDsRequest","text":"Field Type Description <code>filter</code> RobotFilter"},{"location":"v0.1/cloud/CloudApiService/#listrobotidsresponse","title":"ListRobotIDsResponse","text":"Field Type Description <code>total_robots</code> int32 <code>robot_ids</code> string This might not have all the robot IDs if there are too many.It will have all the robot IDs if the number of robot_ids is the same astotal_robots."},{"location":"v0.1/cloud/CloudApiService/#localizerobotrequest","title":"LocalizeRobotRequest","text":"Field Type Description <code>robot_id</code> string <code>goal</code> LocalizationGoal"},{"location":"v0.1/cloud/CloudApiService/#localizerobotresponse","title":"LocalizeRobotResponse","text":"<ul> <li>(No fields defined)</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#setrobotposerequest","title":"SetRobotPoseRequest","text":"Field Type Description <code>robot_id</code> string <code>pose_with_covariance</code> PoseWithCovariance"},{"location":"v0.1/cloud/CloudApiService/#setrobotposeresponse","title":"SetRobotPoseResponse","text":"<ul> <li>(No fields defined)</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#subscribebatterystatusrequest","title":"SubscribeBatteryStatusRequest","text":"Field Type Description <code>selector</code> RobotSelector"},{"location":"v0.1/cloud/CloudApiService/#subscribebatterystatusresponse","title":"SubscribeBatteryStatusResponse","text":"Field Type Description <code>metadata</code> EventMetadata <code>robot_id</code> string <code>battery_state</code> BatteryState"},{"location":"v0.1/cloud/CloudApiService/#subscribelocalizationstatusrequest","title":"SubscribeLocalizationStatusRequest","text":"Field Type Description <code>selector</code> RobotSelector"},{"location":"v0.1/cloud/CloudApiService/#subscribelocalizationstatusresponse","title":"SubscribeLocalizationStatusResponse","text":"Field Type Description <code>metadata</code> EventMetadata <code>robot_id</code> string <code>localization_state</code> LocalizationState"},{"location":"v0.1/cloud/CloudApiService/#subscribemissionstatusrequest","title":"SubscribeMissionStatusRequest","text":"Field Type Description <code>robot_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#subscribemissionstatusresponse","title":"SubscribeMissionStatusResponse","text":"Field Type Description <code>metadata</code> EventMetadata <code>mission_state</code> MissionState"},{"location":"v0.1/cloud/CloudApiService/#subscriberobotposerequest","title":"SubscribeRobotPoseRequest","text":"Field Type Description <code>robot_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#subscriberobotposeresponse","title":"SubscribeRobotPoseResponse","text":"Field Type Description <code>metadata</code> EventMetadata <code>pose</code> Pose"},{"location":"v0.1/cloud/CloudApiService/#subscriberobotstatusrequest","title":"SubscribeRobotStatusRequest","text":"Field Type Description <code>selector</code> RobotSelector"},{"location":"v0.1/cloud/CloudApiService/#subscriberobotstatusresponse","title":"SubscribeRobotStatusResponse","text":"Field Type Description <code>metadata</code> EventMetadata <code>robot_state</code> RobotState Robot state is not available when robot connection shows disconnected."},{"location":"v0.1/cloud/CloudApiService/#subscribetraystatusesrequest","title":"SubscribeTrayStatusesRequest","text":"Field Type Description <code>robot_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#subscribetraystatusesresponse","title":"SubscribeTrayStatusesResponse","text":"Field Type Description <code>metadata</code> EventMetadata <code>tray_states</code> TrayState State of enabled trays, ordered from the top-most tray on the robot to thebottom. This state is only available for robots with trays."},{"location":"v0.1/cloud/CloudApiService/#switchmaprequest","title":"SwitchMapRequest","text":"Field Type Description <code>robot_id</code> string <code>floor_level</code> int32 Non-negative integer floor_level is the first key used to index the map dict. SwitchMap will raise an exception if there is no matching map.Floor level 0 denotes the lowest reachable floor. <code>section_index</code> int32 Non-negative integer section_index is the second key used to  index the map dict. SwitchMap will raise an exception if there is no matching map. Section index begins at 0."},{"location":"v0.1/cloud/CloudApiService/#switchmapresponse","title":"SwitchMapResponse","text":"Field Type Description <code>map_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#updatemissionrequest","title":"UpdateMissionRequest","text":"Field Type Description <code>robot_id</code> string <code>mission_command</code> MissionCommand"},{"location":"v0.1/cloud/CloudApiService/#updatemissionresponse","title":"UpdateMissionResponse","text":"<ul> <li>(No fields defined)</li> </ul>"},{"location":"v0.1/cloud/Config/","title":"Config","text":""},{"location":"v0.1/cloud/Config/#message-types","title":"Message Types","text":""},{"location":"v0.1/cloud/Config/#robotfilter","title":"RobotFilter","text":"Field Type Description <code>location_id</code> string Empty location_id denotes all locations."},{"location":"v0.1/cloud/Config/#robotids","title":"RobotIDs","text":"Field Type Description <code>ids</code> stringrepeated A list of robotIDs"},{"location":"v0.1/cloud/Config/#robotselector","title":"RobotSelector","text":"Field Type Description <code>robot_ids</code> RobotIDs A list of specific robot IDs to target. <code>location_id</code> string An identifier for a location, representing all robots  associated with this location."},{"location":"v0.1/cloud/Profiles/","title":"Profiles","text":""},{"location":"v0.1/cloud/Profiles/#message-types","title":"Message Types","text":""},{"location":"v0.1/cloud/Profiles/#profile","title":"Profile","text":"Field Type Description <code>profile_id</code> string <code>display_name</code> string <code>sound_profile</code> SoundProfile Profile for sound-related settings."},{"location":"v0.1/cloud/Profiles/#soundprofile","title":"SoundProfile","text":"Field Type Description <code>commands</code> Commandrepeated List of commands in the sound profile."},{"location":"v0.1/cloud/Profiles/#command","title":"Command","text":"Field Type Description <code>type</code> Typeenum <code>sound_data</code> SoundDatarepeated List of sound files associated with the command.  Robot will play the sound randomly when it runs into a specific situation."},{"location":"v0.1/cloud/Profiles/#sounddata","title":"SoundData","text":"Field Type Description <code>sound_id</code> string <code>display_name</code> string <code>url</code> string The URL to download the sound file from."},{"location":"v0.1/cloud/Profiles/#commandtypeenum","title":"CommandTypeEnum","text":"Name Number Description TYPE_UNKNOWN 0 TYPE_HELLO 1 TYPE_ARRIVED_HOSTING 2 TYPE_LEAVING_HOSTING 3 TYPE_TAKE_FOOD 4 TYPE_ENJOY 5 A sound is played when the robot unloads and returns to the return point. TYPE_LOAD_DISHES 6 TYPE_THANK_YOU 7 TYPE_ARRIVED_PATROL_SERVING 8 TYPE_LEAVING_PATROL_SERVING 9 TYPE_ARRIVED_PATROL_BUSSING 10 TYPE_LEAVING_PATROL_BUSSING 11 TYPE_ARRIVED_BIRTHDAY 12 TYPE_ARRIVED_ANNIVERSARY 13 TYPE_ARRIVED_CELEBRATION 14 TYPE_ARRIVED_CUSTOM 15 A sound that the user can manually trigger when the robot arrives at a destination. TYPE_EXCUSE_ME 16 TYPE_HAPPY_BIRTHDAY 17 A sound made when arriving at the destination in birthday mode. TYPE_HAPPY_BIRTHDAY_MOVEMENT 18 A sound made when moving in birthday mode. TYPE_SOUND_ZONE 19 A sound that continues to be made while the robot is within the sound zone until it leaves. TYPE_DISINFECT_START 20 TYPE_DISINFECT_CANCELLED 21 TYPE_DISINFECT_FINISHED 22 TYPE_DISINFECT_RETURNED 23"},{"location":"v0.1/cloud/RobotSettings/","title":"Robot Settings","text":""},{"location":"v0.1/cloud/RobotSettings/#message-types","title":"Message Types","text":""},{"location":"v0.1/cloud/RobotSettings/#robotsysteminfo","title":"RobotSystemInfo","text":"Field Type Description <code>software_version</code> string The distribution version currently installed and running on the robot.e.g., \"servi-24.03\". <code>robot_family</code> RobotFamilyenum <code>robot_id</code> string Unique identifier for the robot. e.g., \"pennybot-abc123\". <code>display_name</code> string A user-friendly name for the robot, typically used for display purposes."},{"location":"v0.1/cloud/RobotSettings/#robotfamilyenum","title":"RobotFamilyEnum","text":"Name Number Description ROBOT_FAMILY_UNKNOWN 0 ROBOT_FAMILY_SERVI 1 ROBOT_FAMILY_SERVI_MINI 2 ROBOT_FAMILY_SERVI_AIR 3 ROBOT_FAMILY_SERVI_PLUS 4 ROBOT_FAMILY_SERVI_LIFT 5 ROBOT_FAMILY_CARTI_100 6 ROBOT_FAMILY_CARTI_600 7"},{"location":"v0.1/cloud/RobotStatus/","title":"Robot Status","text":""},{"location":"v0.1/cloud/RobotStatus/#message-types","title":"Message Types","text":""},{"location":"v0.1/cloud/RobotStatus/#robotconnection","title":"RobotConnection","text":"Field Type Description <code>connection</code> Connectionenum Connection availability of the robot."},{"location":"v0.1/cloud/RobotStatus/#robotstate","title":"RobotState","text":"Name Type Description <code>robot_id</code> string <code>robot_connection</code> RobotConnection Connection availability of the robot."},{"location":"v0.1/cloud/RobotStatus/#connectionenum","title":"ConnectionEnum","text":"Name Number Description CONNECTION_UNKNOWN 0 CONNECTION_CONNECTED 1 Whether the robot is connected to Bear cloud services. CONNECTION_DISCONNECTED 2 Robot is unreachable/offline."},{"location":"v0.1/common/Annotations/","title":"Annotations","text":""},{"location":"v0.1/common/Annotations/#message-types","title":"Message Types","text":""},{"location":"v0.1/common/Annotations/#eventmetadata","title":"EventMetadata","text":"Field Type Description <code>timestamp</code> Timestamp The time when the event was recorded. <code>sequence_number</code> int64 An incremental sequence number generated by the robot.The sequence number should never be negative and can be reset to 0.i.e. sequence is valid if it is larger than the previous number or 0."},{"location":"v0.1/common/Math/","title":"Math","text":""},{"location":"v0.1/common/Math/#message-types","title":"Message Types","text":""},{"location":"v0.1/common/Math/#point2d","title":"Point2D","text":"Field Type Description <code>x</code> float The x coordinate of the point in a 2D plane <code>y</code> float The y coordinate of the point in a 2D plane"},{"location":"v0.1/common/Math/#pointwithorientation","title":"PointWithOrientation","text":"Field Type Description <code>x</code> float The x coordinate of the point <code>y</code> float The y coordinate of the point <code>orientation</code> Quaternion The orientation represented as a quaternion"},{"location":"v0.1/common/Math/#quaternion","title":"Quaternion","text":"Field Type Description <code>x</code> float The x component of the quaternion (imaginary part) <code>y</code> float The y component of the quaternion (imaginary part) <code>z</code> float The z component of the quaternion (imaginary part) <code>w</code> float The real (scalar) component of the quaternion"},{"location":"v0.1/location/Annotation/","title":"Annotation","text":""},{"location":"v0.1/location/Annotation/#message-types","title":"Message Types","text":""},{"location":"v0.1/location/Annotation/#annotation","title":"Annotation","text":"Field Type Description <code>annotation_id</code> string Example: \"67305\" <code>created_time</code> Timestamp <code>display_name</code> string Example: \"ITCT annotation A\" <code>obstacles</code> Obstaclerepeated Areas on the map that the robot will try to avoid. <code>parameter_zones</code> ParameterZone Areas on the map that have specific parameters. <code>destinations</code> Destinationrepeated Destinations are used to define the single point of interest. <code>preferred_paths</code> PreferredPathrepeated Directional and bi-directional paths  which robots will try to follow when nearby. <code>queues</code> Queuerepeated Queues are used to define the waiting area."},{"location":"v0.1/location/Annotation/#destination","title":"Destination","text":"Field Type Description <code>destination_id</code> string <code>display_name</code> string <code>destination_pose</code> PointWithOrientation Position on the map where the robot would try to  navigate to and orient itself along that direction. <code>type</code> Typeenum <code>docking_param</code> DockingParam Docking parameters for specifying the docking process  at the destination. <code>default_type_data</code> StringMapData Data specific to the destination type, used by the robot  to interact with the destination."},{"location":"v0.1/location/Annotation/#dockingparam","title":"DockingParam","text":"Field Type Description <code>type</code> Typeenum <code>reference</code> Referenceenum <code>reference_id</code> string <code>tuning_params</code> Point2Drepeated The tuning parameters used to define relative docking pose to the reference."},{"location":"v0.1/location/Annotation/#stringmapdata","title":"StringMapData","text":"Name Type Description <code>data</code> <code>map&lt;string, string&gt;</code>"},{"location":"v0.1/location/Annotation/#obstacle","title":"Obstacle","text":"Field Type Description <code>obstacle_id</code> string <code>points</code> Point2D Points that define a polygon where the robot should avoid entering.  The minimum number of points is 3. <code>type</code> Typeenum"},{"location":"v0.1/location/Annotation/#preferredpath","title":"PreferredPath","text":"Field Type Description <code>preferred_path_id</code> string <code>graph_nodes</code> GraphNoderepeated List of graph nodes that make up the preferred path."},{"location":"v0.1/location/Annotation/#queue","title":"Queue","text":"Field Type Description <code>queue_id</code> string <code>queue_poses</code> GraphNoderepeated Represents a list of queuing points where the robot will wait. <code>destination_ids</code> stringrepeated End destinations that a queue can dequeue the robot to."},{"location":"v0.1/location/Annotation/#destinationtypeenum","title":"DestinationTypeEnum","text":"Name Number Description TYPE_UNKNOWN 0 TYPE_DEFAULT 1 The default destination type. The robot will try to navigate to this point. TYPE_CONTACT_CHARGER 2 The contact-type charger. The robot can charge through docking. TYPE_INDUCTIVE_CHARGER 3 The inductive-type charger. The robot can charge through docking without physical contact."},{"location":"v0.1/location/Annotation/#dockingparamtypeenum","title":"DockingParamTypeEnum","text":"Name Number Description TYPE_UNKNOWN 0 TYPE_DEFAULT 1 The robot will run the default docking process at the destination."},{"location":"v0.1/location/Annotation/#dockingparamrefernceenum","title":"DockingParamRefernceEnum","text":"Name Number Description REFERENCE_UNKNOWN 0 REFERENCE_DEFAULT 1 The default reference for each destination type. REFERENCE_QR_CODE 2 The QR code reference is used to specify the docking position. REFERENCE_VL_MARKER 3 The VL marker reference is used to specify the docking position."},{"location":"v0.1/location/Annotation/#obstacletypeenum","title":"ObstacleTypeEnum","text":"Name Number Description TYPE_UNKNOWN 0 TYPE_DEFAULT 1 The default type for obstacle references. TYPE_QR_CODE 2 Specifies the QR code obstacle type. TYPE_VL_MARKER 3 Specifies the VL marker obstacle type."},{"location":"v0.1/location/Location/","title":"Location","text":""},{"location":"v0.1/location/Location/#message-types","title":"Message Types","text":""},{"location":"v0.1/location/Location/#location","title":"Location","text":"Field Type Description <code>location_id</code> string Example: \"4RVF\" <code>created_time</code> Timestamp <code>modified_time</code> Timestamp <code>display_name</code> string Examples: \"City Deli &amp; Grill\", \"KNTH\" <code>floors</code> <code>map&lt;string, string&gt;</code> Map of floor identifiers to floor information.The key is the floor level, and the value is the floor information."},{"location":"v0.1/location/Location/#floor","title":"Floor","text":"Field Type Description <code>display_name</code> string Example: \"Ground\" <code>sections</code> Sectionrepeated"},{"location":"v0.1/location/Location/#section","title":"Section","text":"Field Type Description <code>display_name</code> string Usually <code>display_name</code> will be empty if the section is not named. <code>map_ids</code> stringrepeated List of map identifiers associated with this section. <code>current_map_id</code> string Current map identifier."},{"location":"v0.1/location/Map/","title":"Map","text":""},{"location":"v0.1/location/Map/#message-types","title":"Message Types","text":""},{"location":"v0.1/location/Map/#annotation","title":"Annotation","text":"Field Type Description <code>destinations</code> Destinationrepeated"},{"location":"v0.1/location/Map/#map","title":"Map","text":"Field Type Description <code>map_id</code> string Example: \"9578\" <code>created_time</code> Timestamp <code>modified_time</code> Timestamp <code>display_name</code> string Example: \"ITCT SEOUL\" <code>map_data_id</code> string Current map data identifier that represents this map. <code>annotation_ids</code> stringrepeated List of annotation identifiers associated with this map. <code>current_annotation_id</code> string Current annotation identifier."},{"location":"v0.1/location/Map/#mapdata","title":"MapData","text":"Field Type Description <code>map_data_id</code> string <code>url</code> string URL to the image data for the map. <code>origin</code> Origin The Origin of the map. <code>m_per_pixel</code> float Maps real-world size to pixelated size (meters per pixel).Equivalent to the \"resolution\" defined in the ROS map server: ROS Map Server"},{"location":"v0.1/location/Map/#mapcontent","title":"MapContent","text":"Field Type Description <code>map_id</code> string <code>data</code> Data <code>annotation</code> Annotationrepeated"},{"location":"v0.1/location/Map/#data","title":"Data","text":"Field Type Description <code>data</code> bytes The image PNG data for the map. <code>origin</code> Origin <code>m_per_pixel</code> float Maps real-world size to pixelated size (meters per pixel).Equivalent to the \"resolution\" defined in the ROS map server: ROS Map Server"},{"location":"v0.1/location/Map/#origin","title":"Origin","text":"Field Type Description <code>x_m</code> float The x-coordinate of the origin of the map in the world frame. <code>y_m</code> float The y-coordinate of the origin of the map in the world frame. <code>yaw_radians</code> float Rotation around the z-axis (counterclockwise) of the map  with respect to the world frame.A yaw of 0 means no rotation."},{"location":"v0.1/location/Types/","title":"Types","text":""},{"location":"v0.1/location/Types/#message-types","title":"Message Types","text":""},{"location":"v0.1/location/Types/#graphnode","title":"GraphNode","text":"Field Type Description <code>graph_node_id</code> string <code>graph_node_pose</code> PointWithOrientation Point with orientation of the GraphNode. <code>adjacent_graph_node_ids</code> stringrepeated Adjacent GraphNode IDs that  the robot can navigate from the current GraphNode."},{"location":"v0.1/location/Zones/","title":"Zones","text":""},{"location":"v0.1/location/Zones/#message-types","title":"Message Types","text":""},{"location":"v0.1/location/Zones/#parameterzone","title":"ParameterZone","text":"Field Type Description <code>zone_id</code> string <code>points</code> Point2Drepeated Polygon defining the zone.The minimum number of points is 3. type oneof"},{"location":"v0.1/location/Zones/#oneofzonetype","title":"OneOfZoneType","text":"Field Type Description <code>direction_zone</code> DirectionZone <code>exclusive_zone</code> ExclusiveZone <code>ramp_zone</code> RampZone <code>sound_zone</code> SoundZone <code>speed_zone</code> SpeedZone"},{"location":"v0.1/location/Zones/#directionzone","title":"DirectionZone","text":"Field Type Description <code>heading_radians</code> float The direction vector's angle in radians,  relative to the map's origin and measured from the x-axis. <code>magnitude</code> int32 The magnitude of the direction vector.Typically set to 254 for hard direction zones.The larger the magnitude,  the more the robot will try to align with the direction."},{"location":"v0.1/location/Zones/#exclusivezone","title":"ExclusiveZone","text":"Field Type Description <code>max_robots</code> int32 Maximum number of robots allowed to enter the zone."},{"location":"v0.1/location/Zones/#rampzone","title":"RampZone","text":"<ul> <li>(No fields defined)</li> </ul>"},{"location":"v0.1/location/Zones/#soundzone","title":"SoundZone","text":"<ul> <li>(No fields defined)</li> </ul>"},{"location":"v0.1/location/Zones/#speedzone","title":"SpeedZone","text":"Field Type Description <code>max_speed_m_per_sec</code> float Speed limit in the zone."},{"location":"v0.1/robot/Localization/","title":"Localization","text":""},{"location":"v0.1/robot/Localization/#message-types","title":"Message Types","text":""},{"location":"v0.1/robot/Localization/#localizationgoal","title":"LocalizationGoal","text":"Field Type Description <code>pose</code> Pose"},{"location":"v0.1/robot/Localization/#localizationstate","title":"LocalizationState","text":"Field Type Description <code>state</code> Stateenum"},{"location":"v0.1/robot/Localization/#stateenum","title":"StateEnum","text":"Name Number Description STATE_UNKNOWN 0 STATE_PREEMPTED 1 Happens when the localization process is preempted before completion. STATE_FAILED 2 STATE_SUCCEEDED 3 STATE_LOCALIZING 4 The robot is actively performing localization."},{"location":"v0.1/robot/Mission/","title":"Mission","text":""},{"location":"v0.1/robot/Mission/#message-types","title":"Message Types","text":""},{"location":"v0.1/robot/Mission/#destination","title":"Destination","text":"Field Type Description <code>destination_id</code> string"},{"location":"v0.1/robot/Mission/#zone","title":"Zone","text":"Field Type Description <code>zone_id</code> string"},{"location":"v0.1/robot/Mission/#goal","title":"Goal","text":"<p><code>Goal</code> allows one of the following goals</p> Field Type Description <code>destination</code> Destination <code>zone</code> Zone <code>pose</code> Pose"},{"location":"v0.1/robot/Mission/#mission","title":"Mission","text":"Field Type Description <code>type</code> Typeenum <code>goals</code> Goalrepeated The list of goals or destinations for the mission. <code>override_params</code> MissionParams Override parameters for the mission settings,  allowing specific configuration for this mission instance."},{"location":"v0.1/robot/Mission/#missioncommand","title":"MissionCommand","text":"Field Type Description <code>mission_id</code> string <code>command</code> Commandenum"},{"location":"v0.1/robot/Mission/#missionparams","title":"MissionParams","text":"<p><code>MissionParams</code> allows one of these 2 <code>params</code></p> Field Type Description <code>traverse_params</code> TraverseParams <code>loop_params</code> LoopParams"},{"location":"v0.1/robot/Mission/#loopparams","title":"LoopParams","text":"Field Type Description <code>mode</code> Moderepeated"},{"location":"v0.1/robot/Mission/#traverseparams","title":"TraverseParams","text":"Field Type Description <code>mode</code> Moderepeated"},{"location":"v0.1/robot/Mission/#missionstate","title":"MissionState","text":"Field Type Description <code>mission_id</code> string <code>state</code> Stateenum <code>goals</code> Goalrepeated All goals for a given mission. <code>current_goal_index</code> int32 <code>navigation_status</code> NavigationStatusenum <code>feedback</code> Any"},{"location":"v0.1/robot/Mission/#loopparamsmodeenum","title":"LoopParamsModeEnum","text":"Name Number Description MODE_UNKNOWN 0 MODE_DEFAULT 1 MODE_BUSSING 2"},{"location":"v0.1/robot/Mission/#missioncommandenum","title":"MissionCommandEnum","text":"Name Number Description COMMAND_UNKNOWN 0 COMMAND_CANCEL 1 COMMAND_PAUSE 2 COMMAND_RESUME 3 COMMAND_FINISH 4"},{"location":"v0.1/robot/Mission/#missionstateenum","title":"MissionStateEnum","text":"Name Number Description STATE_UNKNOWN 0 STATE_DEFAULT 1 Initial state when no mission has been run (e.g., empty feedback). STATE_RUNNING 2 STATE_PAUSED 3 STATE_CANCELED 4 STATE_SUCCEEDED 5 STATE_FAILED 6"},{"location":"v0.1/robot/Mission/#missiontypeenum","title":"MissionTypeEnum","text":"Name Number Description TYPE_UNKNOWN 0 Default value, indicates an unknown or unspecified mission type. TYPE_ONEOFF 1 A single-goal mission. TYPE_ONEOFF_AUTO 2 An automated single-goal mission that selects the best available goal. TYPE_TRAVERSE 3 A mission involving multiple destinations until a condition, such as weight limit, is met. TYPE_LOOP 4 A mission that repeatedly visits multiple destinations until a condition, such as weight limit, is met. TYPE_WAIT 5 A mission that remains at a specific location until triggered by an external event."},{"location":"v0.1/robot/Mission/#missionstatenavigationstatusenum","title":"MissionStateNavigationStatusEnum","text":"Name Number Description NAVIGATION_STATUS_UNKNOWN 0 Default value, indicates an unknown or undefined navigation status. NAVIGATION_STATUS_FINISHED 1 Indicates the robot has successfully arrived at its goal. NAVIGATION_STATUS_FAILED 2 Indicates the robot failed to reach its goal. NAVIGATION_STATUS_STUCK 3 Indicates the robot is temporarily stuck but has not yet failed. NAVIGATION_STATUS_DOCKING 4 Indicates the robot is in the process of docking. NAVIGATION_STATUS_UNDOCKING 5 Indicates the robot is undocking. NAVIGATION_STATUS_NAVIGATING 6 Indicates the robot is navigating to a destination."},{"location":"v0.1/robot/Robot/","title":"Robot","text":""},{"location":"v0.1/robot/Robot/#message-types","title":"Message Types","text":""},{"location":"v0.1/robot/Robot/#pose","title":"Pose","text":"Field Type Description <code>x_meters</code> float x, y coordinate inside the Map. <code>y_meters</code> float <code>heading_radians</code> float The heading of the robot in radians.  Ranges from -PI to PI, with 0.0 pointing along the x-axis."},{"location":"v0.1/robot/Robot/#posewithcovariance","title":"PoseWithCovariance","text":"Field Type Description <code>pose</code> Pose <code>covariance</code> doublerepeated A 36-element array, which is a flattened 6\u00d76  covariance matrix in row-major order. Each element represents  the covariance between state variables (X, Y, Z, X-axis rotation,  Y-axis rotation, Z-axis rotation)."},{"location":"v0.1/robot/Status/","title":"Status","text":""},{"location":"v0.1/robot/Status/#message-types","title":"Message Types","text":""},{"location":"v0.1/robot/Status/#batterystate","title":"BatteryState","text":"Field Type Description <code>charge_percent</code> int32 State of charge from 0 (battery empty) to 100 (battery full). <code>state</code> Staterepeated <code>charge_method</code> ChargeMethodrepeated"},{"location":"v0.1/robot/Status/#traystate","title":"TrayState","text":"Field Type Description <code>load_state</code> LoadStaterepeated <code>weight_kg</code> float Tray load in kilograms. The minimum precision is 10g. <code>load_ratio</code> float Ratio of the load to the maximum load capacity of the tray. The value could exceed 1.0 if the tray is overloaded. Caveats: If the maximum load is not configured correctly (e.g. 0.0), NaN can be returned."},{"location":"v0.1/robot/Status/#stateenum","title":"StateEnum","text":"Name Number Description STATE_UNKNOWN 0 STATE_CHARGING 1 STATE_DISCHARGING 2 Robot is not connected to the charger and is draining energy from the battery. STATE_FULL 3 While connected to the charger, the battery is fully charged, no more energy can be stored into the battery."},{"location":"v0.1/robot/Status/#chargemethodenum","title":"ChargeMethodEnum","text":"Name Number Description CHARGE_METHOD_UNKNOWN 0 CHARGE_METHOD_NOT_CHARGING 1 CHARGE_METHOD_WIRED 2 CHARGE_METHOD_WIRELESS 3"},{"location":"v0.1/robot/Status/#loadstateenum","title":"LoadStateEnum","text":"Name Number Description LOAD_STATE_UNKNOWN 0 Unknown load state. LOAD_STATE_LOADED 1 The robot is loaded. LOAD_STATE_EMPTY 2 The robot is empty. LOAD_STATE_OVERLOADED 3 The robot is overloaded."},{"location":"v1.0/resources/Carti/","title":"Carti","text":"<p>These endpoints and their message types are only available for the Carti robot family. Attempting to run a Carti commands on a non Carti robot will result in an INVALID_ARGUMENT error.</p>"},{"location":"v1.0/resources/Carti/#createmission","title":"CreateMission","text":"<p>Use the shared <code>CreateMission</code> endpoint to send missions for Carti robots. Carti-specific missions must be sent using the appropriate request message format. </p> <p>Note</p> <p>When sending a Carti mission, <code>carti.Feedback</code> is returned in <code>SubscribeMissionStatus</code> response message.</p>"},{"location":"v1.0/resources/Carti/#cartifeedback-enum","title":"carti.Feedback <code>enum</code>","text":"Name Number Description STATUS_UNKNOWN 0 Default value. It means <code>status</code> field is not returned. STATUS_NAVIGATING 1 The robot is currently navigating to its goal. STATUS_ARRIVED 2 The robot has arrived at a goal. STATUS_DOCKING 3 The robot is performing a docking maneuver. STATUS_UNDOCKING 4 The robot is performing an undocking maneuver."},{"location":"v1.0/resources/Carti/#request","title":"Request","text":""},{"location":"v1.0/resources/Carti/#robot_id-string-required","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that will receive this command.</p>"},{"location":"v1.0/resources/Carti/#mission-mission-required","title":"mission <code>Mission</code> <code>required</code>","text":"<p>Universal wrapper for mission types. Only one mission type may be set at a time.</p> Field (oneof) Message Type Description <code>base_mission</code> <code>BaseMission</code> Base missions are applicable to all robot families.  Refer to Mission for how to create and send a base mission. <code>servi_mission</code> <code>servi.Mission</code> Servi missions are specific to the Servi robot family. Refer to Servi for how to create and send a servi mission. <code>carti_mission</code> <code>carti.Mission</code> Carti missions are specific to the Carti robot family."},{"location":"v1.0/resources/Carti/#carti_mission-cartimission","title":"carti_mission <code>carti.Mission</code>","text":"<p>Use the field <code>carti_mission</code> to create and send a mission. Current API version supports 2 types of Carti missions.</p> Field (oneof) Message Type Description <code>traverse_mission</code> <code>TraverseMission</code> Create a carti mission of type <code>Traverse</code>. <code>traverse_patrol_mission</code> <code>TraversePatrolMission</code> Create a carti mission of type <code>TraversePatrol</code>. <p>TraverseMission  A traverse mission that navigates to one or more goals, stopping at each for a set amount of time or until directed to continue.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code> <code>required</code> a list of <code>Goal</code> <code>params</code> <code>TraverseParams</code> <code>optional</code> There is no param defined in this API version. <p>TraversePatrolMission  A traverse patrol mission that navigates to one or more goals and continuously loops through the goals, stopping at each for a set amount of time or until directed to continue.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code> <code>required</code> a list of <code>Goal</code> <code>params</code> <code>TraversePatrolParam</code> <code>optional</code> There is no param defined in this API version."},{"location":"v1.0/resources/Carti/#json-request-example","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"carti-001\",\n    \"mission\": {\n      \"cartiMission\": {\n        \"traverseMission\": {\n          \"goals\": [\n            { \"destinationId\": \"room-a\" },\n            { \"destinationId\": \"room-b\" }\n          ],\n          \"params\": {}\n        }\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.0/resources/Carti/#response","title":"Response","text":""},{"location":"v1.0/resources/Carti/#mission_id-string","title":"mission_id <code>string</code>","text":"<p>The ID of the mission created. </p>"},{"location":"v1.0/resources/Carti/#json-response-example","title":"JSON Response Example","text":"JSON <pre><code>  {\n    \"missionId\": \"mission-abc123\"\n  }\n</code></pre>"},{"location":"v1.0/resources/Carti/#errors","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> This command is sending to is not a Carti family robot. <code>FAILED_PRECONDITION</code> The robot is already executing another mission.  This command is valid if current mission is in terminal state,  e.g Cancelled, Succeeded, Failed."},{"location":"v1.0/resources/FleetManagement/","title":"Fleet Management","text":"<p>Utilities for managing multiple robots within an account or workspace.</p>"},{"location":"v1.0/resources/FleetManagement/#listrobotids","title":"ListRobotIDs","text":"<p>Retrieves a list of robot IDs the user has access to, filtered by optional criteria.  The list includes all known robots, regardless of their current connection state. </p>"},{"location":"v1.0/resources/FleetManagement/#request","title":"Request","text":""},{"location":"v1.0/resources/FleetManagement/#filter-robotfilter-required","title":"filter <code>RobotFilter</code> <code>required</code>","text":"<p><code>RobotFilter</code> defines the conditions for selecting robots.  All specified fields are combined using an AND condition. </p> Field Message Type Description <code>location_id</code> <code>string</code> An empty location_id return all robots assigned to all locations created and owned by API key user."},{"location":"v1.0/resources/FleetManagement/#json-request-example","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"filter\": {\n      \"locationId\": \"location-123\"\n    }\n  }\n</code></pre>"},{"location":"v1.0/resources/FleetManagement/#response","title":"Response","text":"<p>A response message has 2 fields: </p> Field Message Type Description <code>total_robots</code> <code>int32</code> Total number of robots. <code>robot_ids</code> List of <code>string</code> This might not have all the robot IDs if there are too many. It will have all the robot IDs if the number of  <code>robot_ids</code> is same as <code>total_robots</code>."},{"location":"v1.0/resources/FleetManagement/#json-response-example","title":"JSON Response Example","text":"JSON <pre><code>  {\n    \"totalRobots\": 5,\n    \"robotIds\": [\n      \"pennybot-abc123\",\n      \"pennybot-def456\",\n      \"pennybot-ghi789\",\n      \"pennybot-jkl012\",\n      \"pennybot-mno345\"\n    ]\n  }\n</code></pre>"},{"location":"v1.0/resources/FleetManagement/#errors","title":"Errors","text":"ErrorCode Description <code>PERMISSION_DENIED</code> Attempting to retrieve Robot IDs with a <code>location_id</code> you don't own.  Tips: check the spelling of all <code>location_id</code> values."},{"location":"v1.0/resources/Localization/","title":"Localization & Navigation","text":"<p>Provides controls and subscriptions related to a robot\u2019s position within its environment, including localization and pose tracking.</p>"},{"location":"v1.0/resources/Localization/#localizerobot","title":"LocalizeRobot","text":"<p>Localizes the robot to a known pose or destination. </p> <p>If the request is accepted, subscribe to SubscribeLocalizationStatus  to track localization progress. </p>"},{"location":"v1.0/resources/Localization/#request","title":"Request","text":""},{"location":"v1.0/resources/Localization/#robot_id-string-required","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that the localization command is sent to.</p>"},{"location":"v1.0/resources/Localization/#goal-goal-required","title":"goal <code>Goal</code> <code>required</code>","text":"<p>Goal represents a target destination or pose for the robot to localize to.</p> Field Message Type Description destination_id <code>string</code> Unique identifier for the destination. Pose <code>Pose</code> <code>x_meters</code> float X-coordinate in meters within the map.  <code>x_meters</code> float Y-coordinate in meters within the map.  <code>heading_radians</code> float The heading of the robot in radians. Ranges from -\u03c0 to \u03c0, where 0.0 points along the positive x-axis."},{"location":"v1.0/resources/Localization/#json-request-example","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"pennybot-123123\",\n    \"goal\": {\n      \"pose\": {\n        \"xMeters\": 1.5,\n        \"yMeters\": 2.8,\n        \"headingRadians\": -0.52\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.0/resources/Localization/#response","title":"Response","text":"<p>(No fields defined) </p>"},{"location":"v1.0/resources/Localization/#json-response-example","title":"JSON Response Example","text":"JSON <pre><code>  {}\n</code></pre>"},{"location":"v1.0/resources/Localization/#errors","title":"Errors","text":"ErrorCode Description <code>FAILED_PRECONDITION</code> While the robot is localizing, any subsequent requests  to localize the robot will return a error until the process is completed."},{"location":"v1.0/resources/Localization/#subscribeemergencystopstatus","title":"SubscribeEmergencyStopStatus","text":"<p>A server side streaming RPC endpoint to Subscribe to the software emergency stop state. Upon subscription, the latest emergency stop state is sent immediately. State updates are streamed whenever the emergency stop state changes.</p>"},{"location":"v1.0/resources/Localization/#request_1","title":"Request","text":""},{"location":"v1.0/resources/Localization/#robot_id-string-required_1","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that emergency stop subscription request is sent to.</p>"},{"location":"v1.0/resources/Localization/#json-request-example_1","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"pennybot-123123\"\n  }\n</code></pre>"},{"location":"v1.0/resources/Localization/#response_1","title":"Response","text":""},{"location":"v1.0/resources/Localization/#metadata-eventmetadata","title":"metadata <code>EventMetadata</code>","text":"Field Message Type Description <code>timestamp</code> Timestamp The time when the event was recorded. <code>sequence_number</code> int64 An incremental sequence number generated by the robot.The sequence number should never be negative and can be reset to 0.i.e. sequence is valid if it is larger than the previous number or 0."},{"location":"v1.0/resources/Localization/#e_stop_state-emergencystopstate-enum","title":"e_stop_state <code>EmergencyStopState</code> <code>enum</code>","text":"Name Number Description EMERGENCY_UNKNOWN 0 Default value. It means the <code>state</code> field is not returned. EMERGENCY_ENGAGED 1 Triggers an emergency stop.  Overrides and sets navigation-related velocity command to 0 to the motor. EMERGENCY_DISENGAGED 2 Wheels will resume acting upon software navigation commands."},{"location":"v1.0/resources/Localization/#json-response-example_1","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"metadata\": {\n    \"timestamp\": \"2025-04-01T17:30:00Z\",\n    \"sequence_number\": 42\n  },\n  \"e_stop_state\": {\n    \"emergency\": \"EMERGENCY_ENGAGED\"\n  }\n}\n</code></pre>"},{"location":"v1.0/resources/Localization/#errors_1","title":"Errors","text":"ErrorCode Description <code>PERMISSION_DENIED</code> Attempting to request status for <code>robot_id</code> you don't own.  Tips: check the spelling of the <code>robot_id</code>."},{"location":"v1.0/resources/Localization/#subscribelocalizationstatus","title":"SubscribeLocalizationStatus","text":"<p>A server side streaming RPC endpoint to get the robot\u2019s localization state. Upon subscription, the latest localization state is sent immediately. State updates are streamed while localization is active.</p>"},{"location":"v1.0/resources/Localization/#request_2","title":"Request","text":""},{"location":"v1.0/resources/Localization/#robot_id-string-required_2","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that subscription request is sent to.</p>"},{"location":"v1.0/resources/Localization/#json-request-example_2","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"pennybot-123123\"\n  }\n</code></pre>"},{"location":"v1.0/resources/Localization/#response_2","title":"Response","text":""},{"location":"v1.0/resources/Localization/#metadata-eventmetadata_1","title":"metadata <code>EventMetadata</code>","text":"Field Message Type Description <code>timestamp</code> Timestamp The time when the event was recorded. <code>sequence_number</code> int64 An incremental sequence number generated by the robot.The sequence number should never be negative and can be reset to 0.i.e. sequence is valid if it is larger than the previous number or 0."},{"location":"v1.0/resources/Localization/#localizationstate-enum","title":"LocalizationState <code>enum</code>","text":"Name Number Description STATE_UNKNOWN 0 Default value. It means the <code>state</code> field is not returned. STATE_FAILED 1 Localization failed. STATE_SUCCEEDED 2 Localization completed successfully. STATE_LOCALIZING 3 The robot is actively attempting to localize."},{"location":"v1.0/resources/Localization/#json-response-example_2","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"metadata\": {\n    \"timestamp\": \"2025-04-01T17:30:00Z\",\n    \"sequenceNumber\": 98\n  },\n  \"localizationState\": {\n    \"state\": \"STATE_LOCALIZING\"\n  }\n}\n</code></pre>"},{"location":"v1.0/resources/Localization/#errors_2","title":"Errors","text":"ErrorCode Description <code>PERMISSION_DENIED</code> Attempting to request status for a <code>robot_id</code> you don't own.  Tips: check the spelling of all <code>robot_id</code> values."},{"location":"v1.0/resources/Localization/#subscriberobotpose","title":"SubscribeRobotPose","text":"<p>A server side streaming RPC endpoint to subscribe to the robot's pose estimates at a regular frequency. (~10Hz) Use this to track the robot's position in real time.</p>"},{"location":"v1.0/resources/Localization/#request_3","title":"Request","text":""},{"location":"v1.0/resources/Localization/#selector-robotselector-required","title":"selector <code>RobotSelector</code> <code>required</code>","text":"<p><code>RobotSelector</code> is used to select specific robots.   It supports selection by a list of robot IDs OR all robots at a given location.</p> Field Message Type Description <code>robot_ids</code> <code>RobotIDs</code> Selects robots by their specific IDs.  Example: <code>[\"pennybot-123abc\", \"pennybot-abc123\"]</code> <code>location_id</code> <code>string</code> Selects all robots at the specified location."},{"location":"v1.0/resources/Localization/#json-request-example_3","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"selector\": {\n      \"robot_ids\": {\n        \"ids\": [\"pennybot-abc123\", \"pennybot-123abc\"]\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.0/resources/Localization/#response_3","title":"Response","text":""},{"location":"v1.0/resources/Localization/#posewithmetadata","title":"PoseWithMetadata","text":"Field Message Type Description <code>metadata</code> EventMetadata Metadata associated with the event. <code>pose</code> Pose Pose of the robot on the map."},{"location":"v1.0/resources/Localization/#pose","title":"Pose","text":"Field Message Type Description <code>x_meters</code> float X-coordinate in meters within the map. <code>y_meters</code> float Y-coordinate in meters within the map. <code>heading_radians</code> float The heading of the robot in radians.Ranges from -\u03c0 to \u03c0, where 0.0 points along the positive x-axis."},{"location":"v1.0/resources/Localization/#json-response-example_3","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"poses\": {\n    \"pennybot-abc123\": {\n      \"metadata\": {\n        \"timestamp\": \"2025-04-01T17:45:00Z\",\n        \"sequenceNumber\": 201\n      },\n      \"pose\": {\n        \"xMeters\": 1.5,\n        \"yMeters\": 3.2,\n        \"headingRadians\": 0.78\n      }\n    },\n    \"pennybot-123abc\": {\n      \"metadata\": {\n        \"timestamp\": \"2025-04-01T17:45:02Z\",\n        \"sequenceNumber\": 202\n      },\n      \"pose\": {\n        \"xMeters\": 0.0,\n        \"yMeters\": 0.0,\n        \"headingRadians\": -3.14\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"v1.0/resources/Localization/#errors_3","title":"Errors","text":"ErrorCode Description <code>PERMISSION_DENIED</code> Attempting to request status for a <code>robot_id</code>  or <code>location_id</code> you don't own.  Tip: check the spelling of all <code>robot_id</code> or <code>location_id</code> values."},{"location":"v1.0/resources/LocationsAndMaps/","title":"Locations & Maps","text":"<p>Retrieve data about a robot's operating environment, including maps, floors, annotations, and navigable destinations.</p>"},{"location":"v1.0/resources/LocationsAndMaps/#getcurrentmap","title":"GetCurrentMap","text":"<p>Retrieves the current map used by the robot. </p> <p>The returned map includes annotations and destinations, which can be used in mission destination, localization goals, and navigation. </p>"},{"location":"v1.0/resources/LocationsAndMaps/#request","title":"Request","text":""},{"location":"v1.0/resources/LocationsAndMaps/#robot_id-string-required","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The robot ID used to request the map currently loaded on the robot.</p>"},{"location":"v1.0/resources/LocationsAndMaps/#json-request-example","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robot_id\": \"pennybot-abc123\"\n  }\n</code></pre>"},{"location":"v1.0/resources/LocationsAndMaps/#response","title":"Response","text":""},{"location":"v1.0/resources/LocationsAndMaps/#map-map","title":"map <code>Map</code>","text":"<p>Map represents a navigable map used by robots, including metadata and associated annotations.</p> Field Message Type Description <code>map_id</code> <code>string</code> Unique identifier for the map.Example: \"9578\" <code>created_time</code> <code>Timestamp</code> Indicating when the map was created. <code>modified_time</code> <code>Timestamp</code> Indicating the last time the map was modified. <code>display_name</code> <code>string</code> Display name of the map, matching the name used in Bear Universe. Example: \"ITCT SEOUL\" <code>annotation</code> <code>Annotation</code> Annotation associated with this map, defining specific areas and destinations."},{"location":"v1.0/resources/LocationsAndMaps/#annotation","title":"Annotation","text":"<p>Annotation defines a specific area on the map, often used to group destinations or assign special parameters. </p> Field Message Type Description <code>annotation_id</code> <code>string</code> Unique identifier for the annotation.Example: \"67305\" <code>display_name</code> <code>string</code> Descriptive name for the annotation.Example: \"ITCT annotation A\" <code>created_time</code> <code>Timestamp</code> Timestamp indicating when the annotation  was created. <code>destinations</code> <code>map&lt;string, Destination&gt;</code>  See Destination A collection of destinations associated with  this annotation. Each entry pairs a destination ID (key)  with its corresponding Destination message (value)."},{"location":"v1.0/resources/LocationsAndMaps/#destination","title":"Destination","text":"<p>Destination represents a single point of interest on the map that a robot can navigate to and align itself with.</p> Field Message Type Description <code>destination_id</code> string Unique identifier for the destination. <code>display_name</code> string Human-readable name for the destination."},{"location":"v1.0/resources/LocationsAndMaps/#json-response-example","title":"JSON Response Example","text":"JSON <pre><code>   {\n    \"mapId\": \"map-01\",\n    \"createdTime\": \"2025-03-28T12:00:00Z\",\n    \"modifiedTime\": \"2025-04-01T09:45:00Z\",\n    \"displayName\": \"Main Floor Map\",\n    \"annotation\": {\n      \"annotationId\": \"annot-123\",\n      \"displayName\": \"Service Area Zones\",\n      \"createdTime\": \"2025-03-30T10:15:00Z\",\n      \"destinations\": {\n        \"Loading Dock 1\": {\n          // destinationId and displayName are the same values. \n          \"destinationId\": \"Loading Dock 1\",\n          \"displayName\": \"Loading Dock 1\"\n        },\n        \"Main Kitchen\": {\n          \"destinationId\": \"Main Kitchen\",\n          \"displayName\": \"Main Kitchen\"\n        }\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.0/resources/LocationsAndMaps/#errors","title":"Errors","text":"ErrorCode Description <code>NOT_FOUND</code> The annotation (of the requested map) does not exist."},{"location":"v1.0/resources/Mission/","title":"Mission","text":"<p>Missions are atomic units of behavior that define a robot's high-level actions. This API enables users to control robot behavior\u2014from simple navigation tasks to complex, conditional workflows.</p>"},{"location":"v1.0/resources/Mission/#createmission","title":"CreateMission","text":"<p>Send a robot on a mission of specified type.  </p>"},{"location":"v1.0/resources/Mission/#request","title":"Request","text":""},{"location":"v1.0/resources/Mission/#robot_id-string-required","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that will receive this command.</p>"},{"location":"v1.0/resources/Mission/#mission-mission-required","title":"mission <code>Mission</code> <code>required</code>","text":"<p>Universal wrapper for mission types. Only one mission type may be set at a time.</p> Field (oneof) Message Type Description <code>base_mission</code> <code>BaseMission</code> Base missions are applicable to all robot families. <code>servi_mission</code> <code>servi.Mission</code> Servi missions are specific to the Servi robot family.  Refer to Servi for how to create and send a servi mission. <code>carti_mission</code> <code>carti.Mission</code> Carti missions are specific to the Carti robot family. Refer to Carti for how to create and send a carti mission."},{"location":"v1.0/resources/Mission/#base_mission-basemission","title":"base_mission <code>BaseMission</code>","text":"<p>Use field <code>base_mission</code> to send a base mission. Current API version supports 2 types of base missions.</p> Field (oneof) Message Type Description <code>navigate_mission</code> <code>NavigateMission</code> Create a base mission of type <code>Navigate</code>. <code>navigate_auto_mission</code> <code>NavigateAutoMission</code> Create a base mission of type <code>NavigateAuto</code>."},{"location":"v1.0/resources/Mission/#navigate_mission-navigatemission","title":"navigate_mission <code>NavigateMission</code>","text":"<p>A mission consisting of a single, explicitly defined goal.</p> Field Message Type Description <code>goal</code> <code>Goal</code><code>required</code> The target destination for the mission."},{"location":"v1.0/resources/Mission/#navigate_auto_mission-navigateautomission","title":"navigate_auto_mission <code>NavigateAutoMission</code>","text":"<p>A mission that automatically selects the best available goal from the provided list. The system will choose the closest goal while avoiding goals currently occupied by other robots.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code><code>required</code> The list of target destinations for the mission."},{"location":"v1.0/resources/Mission/#goal-goal-required","title":"goal <code>Goal</code> <code>required</code>","text":"<p>Goal represents a target destination for the robot to navigate to.</p> Field (oneof) Message Type Description destination_id <code>string</code> Unique identifier for the destination."},{"location":"v1.0/resources/Mission/#json-request-example","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"robot-001\",\n    \"mission\": {\n      \"baseMission\": {\n        \"navigateMission\": {\n          \"goal\": {\n            \"destinationId\": \"Main Kitchen\"\n          }\n        }\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.0/resources/Mission/#response","title":"Response","text":""},{"location":"v1.0/resources/Mission/#mission_id-string","title":"mission_id <code>string</code>","text":"<p>The ID of the mission created. </p>"},{"location":"v1.0/resources/Mission/#json-response-example","title":"JSON Response Example","text":"JSON <pre><code>  {\n    \"missionId\": \"mission-xyz-123\"\n  }\n</code></pre>"},{"location":"v1.0/resources/Mission/#errors","title":"Errors","text":"ErrorCode Description <code>FAILED_PRECONDITION</code> The robot is already executing another mission. This command is valid if current mission is in terminal state,  e.g Cancelled, Succeeded, Failed. <code>INVALID_ARGUMENT</code> The client supplied a request with invalid format. This covers sending empty requests, invalid goals, goals that do not match mission type, and other format errors. Client should update their usage to have correctly formatted requests with valid goals for the missions as defined in documentation. <code>INTERNAL</code> The request failed to execute due to internal error in mission system. Client should retry creating the mission. <code>DEADLINE_EXCEEDED</code> The request was sent internally, but timed out waiting for confirmation response of request being accepted. Client should retry creating the mission."},{"location":"v1.0/resources/Mission/#appendmission","title":"AppendMission","text":"<p>Appends a mission to the end of the mission queue.  Use this when a mission is currently running; otherwise, prefer CreateMission.  Missions are executed in the order they are appended.</p>"},{"location":"v1.0/resources/Mission/#json-request-response-example","title":"JSON Request / Response Example","text":"<p>AppendMission request and response message types are the same as CreateMission. See CreateMission JSON Examples.</p>"},{"location":"v1.0/resources/Mission/#errors_1","title":"Errors","text":"ErrorCode Description <code>FAILED_PRECONDITION</code> There is no mission in the mission queue. Client should first create the initial mission, and only use Append for queuing additional missions. <code>INVALID_ARGUMENT</code> The client supplied a request with invalid format. This covers sending empty requests, invalid goals, goals that do not match mission type, and other format errors. Client should update their usage to have correctly formatted requests with valid goals for the missions as defined in documentation. <code>INTERNAL</code> The request failed to execute due to internal error in mission system. Client should retry appending the mission. <code>DEADLINE_EXCEEDED</code> The request was sent internally, but timed out waiting for confirmation response of request being accepted. Client should retry appending the mission."},{"location":"v1.0/resources/Mission/#updatemission","title":"UpdateMission","text":"<p>Issues a command to control or update the current mission (e.g., pause, cancel).</p> <p>Warning</p> <p>We currently do not support updating missions in mission queue.  Attempting to send UpdateMission command to a queued mission will result in <code>NOT_FOUND</code> error.</p>"},{"location":"v1.0/resources/Mission/#request_1","title":"Request","text":""},{"location":"v1.0/resources/Mission/#robot_id-string-required_1","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that will receive this command.</p>"},{"location":"v1.0/resources/Mission/#mission_command-missioncommand-required","title":"mission_command <code>MissionCommand</code> <code>required</code>","text":"<p>Command to update the state of an active mission.  <code>MissionCommand</code> has 2 fields.</p> Field Message Type Description <code>mission_id</code> <code>string</code> <code>required</code> The ID of the mission to control. <code>command</code> <code>Command</code> enum <code>required</code>"},{"location":"v1.0/resources/Mission/#command-enum","title":"Command <code>enum</code>","text":"Name Number Description COMMAND_UNKNOWN 0 Default value. This should never be used explicitly.  It means the <code>command</code> field is not set COMMAND_CANCEL 1 Cancel this mission. COMMAND_PAUSE 2 Pause this mission. COMMAND_RESUME 3 Resume a paused mission. COMMAND_FINISH 4 Mark the mission as completed."},{"location":"v1.0/resources/Mission/#json-request-example_1","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robot_id\": \"pennybot-abc123\",\n    \"mission_command\": {\n      \"mission_id\": \"f842c8ac-62de-412e-90fb-bf37022db2f4\",\n      \"command\": \"COMMAND_PAUSE\"\n    }\n  }\n</code></pre>"},{"location":"v1.0/resources/Mission/#response_1","title":"Response","text":"<p>(No fields defined)</p>"},{"location":"v1.0/resources/Mission/#json-response-example_1","title":"JSON Response Example","text":"JSON <pre><code>  {}\n</code></pre>"},{"location":"v1.0/resources/Mission/#errors_2","title":"Errors","text":"ErrorCode Description <code>FAILED_PRECONDITION</code> The robot is either not on a mission, or the command is invalid for the robot's current state. For example, mission in terminal state (Cancelled, Succeeded, Failed) can't be updated. <code>INVALID_ARGUMENT</code> The client supplied a request with invalid format. This covers sending empty requests, invalid commands, incorrect mission ID, and other format errors. Client should update their usage to have correctly formatted requests with valid commands, and ensure the mission id matches the currently running mission. <code>INTERNAL</code> The request failed to execute due to internal error in mission system. Client should retry appending the mission. <code>DEADLINE_EXCEEDED</code> The request was sent internally, but timed out waiting for confirmation response of request being accepted. Client should retry appending the mission."},{"location":"v1.0/resources/Mission/#subscribemissionstatus","title":"SubscribeMissionStatus","text":"<p>A server side streaming RPC endpoint to get updates on the robot's mission state. Upon subscription, the latest known mission state is sent immediately. Subsequent updates are streamed as the state changes. </p>"},{"location":"v1.0/resources/Mission/#request_2","title":"Request","text":""},{"location":"v1.0/resources/Mission/#selector-robotselector-required","title":"selector <code>RobotSelector</code> <code>required</code>","text":"<p><code>RobotSelector</code> is used to select specific robots.   It supports selection by a list of robot IDs OR all robots at a given location.</p> Field Message Type Description <code>robot_ids</code> <code>RobotIDs</code> Selects robots by their specific IDs.  Example: <code>[\"pennybot-123abc\", \"pennybot-abc123\"]</code> <code>location_id</code> <code>string</code> Selects all robots at the specified location."},{"location":"v1.0/resources/Mission/#json-request-example_2","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"selector\": {\n      \"robot_ids\": {\n        \"ids\": [\"pennybot-abc123\", \"pennybot-123abc\"]\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.0/resources/Mission/#response_2","title":"Response","text":"<p>This endpoint returns a stream of messages in response.  Each message includes:</p>"},{"location":"v1.0/resources/Mission/#metadata-eventmetadata","title":"metadata <code>EventMetadata</code>","text":"Field Message Type Description <code>timestamp</code> Timestamp The time when the event was recorded. <code>sequence_number</code> int64 An incremental sequence number generated by the robot.The sequence number should never be negative and can be reset to 0.i.e. sequence is valid if it is larger than the previous number or 0."},{"location":"v1.0/resources/Mission/#robot_id-string","title":"robot_id <code>string</code>","text":"<p>The robotID the message is associated with. </p>"},{"location":"v1.0/resources/Mission/#mission_state-missionstate","title":"mission_state <code>MissionState</code>","text":"Field Message Type Description <code>mission_id</code> string Unique identifier for the mission. <code>state</code> State enum <code>goals</code> Goal All goals associated with the mission, in the order the request was given. <code>current_goal_index</code> int32 Index of the currently active goal in the goals list. <code>mission_feedback</code> MissionFeedback Latest feedback for the mission."},{"location":"v1.0/resources/Mission/#state-enum","title":"State <code>enum</code>","text":"Name Number Description STATE_UNKNOWN 0 Default value. It means the <code>state</code> field is not returned. STATE_DEFAULT 1 Initial state when no mission has been run (e.g., feedback is empty). STATE_RUNNING 2 The mission is actively running. STATE_PAUSED 3 The mission is paused. STATE_CANCELED 4 The mission was canceled before completion. STATE_SUCCEEDED 5 The mission completed successfully. STATE_FAILED 6 The mission encountered an error or failure."},{"location":"v1.0/resources/Mission/#missionfeedback","title":"MissionFeedback","text":"<p><code>BaseFeedback</code> will be returned when sending one of the BaseMission missions.</p>"},{"location":"v1.0/resources/Mission/#basefeedback-enum","title":"BaseFeedback <code>enum</code>","text":"Name Number Description STATUS_UNKNOWN 0 Default value. It means <code>status</code> field is not returned. STATUS_NAVIGATING 1 The robot is currently navigating to its target."},{"location":"v1.0/resources/Mission/#json-response-example_2","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"metadata\": {\n    \"timestamp\": \"2025-04-01T15:30:00Z\",\n    \"sequenceNumber\": 128\n  },\n  \"robot_id\": \"pennybot-abc123\",\n  \"mission_state\": {\n    \"mission_id\": \"d6637a14-5f6b-43f6-bd86-cc1871a8322e\",\n    \"state\": \"STATE_RUNNING\",\n    \"goals\": [\n      {\n        \"destinationId\": \"pickup_zone\"\n      },\n      {\n        \"pose\": {\n          \"xMeters\": 4.2,\n          \"yMeters\": 7.8,\n          \"headingRadians\": 1.57\n        }\n      }\n    ],\n    \"current_goal_index\": 1,\n    \"mission_feedback\": {\n      \"baseFeedback\": {\n        \"status\": \"STATUS_NAVIGATING\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"v1.0/resources/Mission/#errors_3","title":"Errors","text":"ErrorCode Description <code>PERMISSION_DENIED</code> Attempting to request status for a <code>robot_id</code> or <code>location_id</code> you don't own.  Tip: check the spelling of all <code>robot_id</code> or <code>location_id</code> values. <code>INVALID_ARGUMENT</code> One or more request parameters are malformed or logically incorrect.  Example: Using an invalid robot ID format."},{"location":"v1.0/resources/Mission/#chargerobot","title":"ChargeRobot","text":"<p><code>ChargeRobot</code> is a special type of mission. Use this command to instruct the robot to begin charging, regardless of its current battery level. </p> <p>This command is only supported on robots equipped with a contact-based charging dock. Robots without a compatible dock will return an <code>INVALID_ARGUMENT</code> error. </p> <p>You can use <code>SubscribeBatteryStatus</code> to monitor the charging process. </p>"},{"location":"v1.0/resources/Mission/#request_3","title":"Request","text":""},{"location":"v1.0/resources/Mission/#robot_id-string-required_2","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that will receive this command.</p>"},{"location":"v1.0/resources/Mission/#json-reqeuest-example","title":"JSON Reqeuest Example","text":"JSON <pre><code>{\n  \"robot_id\": \"pennybot-abc123\"\n}\n</code></pre>"},{"location":"v1.0/resources/Mission/#response_3","title":"Response","text":""},{"location":"v1.0/resources/Mission/#mission_id-string_1","title":"mission_id <code>string</code>","text":"<p>The ID of the mission created. Since this command is a special type of mission, its execution state is also avaiable in response messages from <code>SubscribeMissionStatus</code>. </p>"},{"location":"v1.0/resources/Mission/#json-response-example_3","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"mission_id\": \"mission-xyz-001\"\n}\n</code></pre>"},{"location":"v1.0/resources/Mission/#errors_4","title":"Errors","text":"ErrorCode Description <code>FAILED_PRECONDITION</code> The robot is already executing a mission. The current mission must be canceled before issuing this command. <code>INTERNAL</code> The request failed to execute due to internal error in mission system. Client should retry creating the mission. <code>DEADLINE_EXCEEDED</code> The request was sent internally, but timed out waiting for confirmation response of request being accepted. Client should retry creating the mission."},{"location":"v1.0/resources/RestAPI/","title":"REST API","text":"<p>Warning</p> <ul> <li>This REST API currently supports a subset of our gRPC APIs and is under active development.</li> <li>API specifications may change without prior notice during the development phase.</li> </ul> <p>Starting from the v1.0 API, REST endpoints are also available for unary RPCs. Given an identical payload and target RPC, a REST API call would perform the exact same operation with that of gRPC.</p> <p>Note</p> <p>Refer to the translation table to see how a gRPC status code maps to a HTTP status code and vice versa.</p> <p>To test out the APIs on Swagger, a valid JWT token has to be passed to the \"Authorize\" Button below. You can obtain one via the command below with a credentials JSON file.</p> <p><pre><code>curl -X POST https://api-auth.bearrobotics.ai/authorizeApiAccess \\\n    -H \"Content-Type: application/json\" \\\n    -d $(cat /path/to/credentials.json)'\n</code></pre> Schemas for request and response bodies are available both under each endpoint (click on the \"Schema\" text shown in \"Request body\" and \"Responses\" section) and at the bottom of this page.</p> <p></p>"},{"location":"v1.0/resources/RobotStatus/","title":"Robot Status","text":"<p>These are streaming endpoints that provide real-time updates on robot health, including battery levels, charging state, and connectivity.</p>"},{"location":"v1.0/resources/RobotStatus/#subscribebatterystatus","title":"SubscribeBatteryStatus","text":"<p>A server side streaming RPC endpoint to get battery state updates for the robot. Upon subscription, the latest battery state is sent immediately. Updates are streamed whenever the state changes.</p>"},{"location":"v1.0/resources/RobotStatus/#request","title":"Request","text":""},{"location":"v1.0/resources/RobotStatus/#selector-robotselector-required","title":"selector <code>RobotSelector</code> <code>required</code>","text":"<p><code>RobotSelector</code> is used to select specific robots.   It supports selection by a list of robot IDs OR all robots at a given location.</p> Field Message Type Description <code>robot_ids</code> <code>RobotIDs</code> Selects robots by their specific IDs.  Example: <code>[\"pennybot-123abc\", \"pennybot-abc123\"]</code> <code>location_id</code> <code>string</code> Selects all robots at the specified location."},{"location":"v1.0/resources/RobotStatus/#json-request-example","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"selector\": {\n      \"robot_ids\": {\n        \"ids\": [\"pennybot-abc123\", \"pennybot-123abc\"]\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.0/resources/RobotStatus/#response","title":"Response","text":""},{"location":"v1.0/resources/RobotStatus/#metadata-eventmetadata","title":"metadata <code>EventMetadata</code>","text":"Field Message Type Description <code>timestamp</code> Timestamp The time when the event was recorded. <code>sequence_number</code> int64 An incremental sequence number generated by the robot.The sequence number should never be negative and can be reset to 0.i.e. sequence is valid if it is larger than the previous number or 0."},{"location":"v1.0/resources/RobotStatus/#robot_id-string","title":"robot_id <code>string</code>","text":"<p>The robotID the message is associated with.</p>"},{"location":"v1.0/resources/RobotStatus/#batterystate","title":"BatteryState","text":"<p>Represents the state of the robot's battery system.</p> Field Message Type Description <code>charge_percent</code> int32 State of charge, from 0 (empty) to 100 (fully charged). <code>state</code> State enum High-level charging state of the battery. <code>charge_method</code> ChargeMethod enum Method by which the robot is being charged."},{"location":"v1.0/resources/RobotStatus/#state-enum","title":"State <code>enum</code>","text":"Name Number Description STATE_UNKNOWN 0 Default value. It means the <code>state</code> field is not returned. STATE_CHARGING 1 Battery is currently charging. STATE_DISCHARGING 2 Robot is not connected to a charger and is consuming battery power. STATE_FULL 3 Battery is fully charged while connected to a charger; no additional energy is being stored."},{"location":"v1.0/resources/RobotStatus/#chargemethod-enum","title":"ChargeMethod <code>enum</code>","text":"Name Number Description CHARGE_METHOD_UNKNOWN 0 Default value. It means the <code>charge_method</code> field is not returned. CHARGE_METHOD_NONE 1 No charging method is currently active or applicable. CHARGE_METHOD_WIRED 2 Charging via a wired connection. CHARGE_METHOD_CONTACT 3 Charging via contact-based interface (e.g., docking station)."},{"location":"v1.0/resources/RobotStatus/#json-response-examples","title":"JSON Response Examples","text":"JSON <pre><code>{\n  \"metadata\": {\n    \"timestamp\": \"2025-04-01T16:45:00Z\",\n    \"sequenceNumber\": 112\n  },\n  \"robotId\": \"pennybot-123abc\",\n  \"batteryState\": {\n    \"chargePercent\": 78,\n    \"state\": \"STATE_CHARGING\",\n    \"chargeMethod\": \"CHARGE_METHOD_CONTACT\"\n  }\n}\n{\n  \"metadata\": {\n    \"timestamp\": \"2025-04-01T16:45:02Z\",\n    \"sequenceNumber\": 113\n  },\n  \"robotId\": \"pennybot-abc123\",\n  \"batteryState\": {\n    \"chargePercent\": 42,\n    \"state\": \"STATE_DISCHARGING\",\n    \"chargeMethod\": \"CHARGE_METHOD_NONE\"\n  }\n}\n</code></pre>"},{"location":"v1.0/resources/RobotStatus/#errors","title":"Errors","text":"ErrorCode Description <code>PERMISSION_DENIED</code> Attempting to request status for a <code>robot_id</code> or <code>location_id</code> you don't own.  Tip: check the spelling of all <code>robot_id</code> or <code>location_id</code> values."},{"location":"v1.0/resources/RobotStatus/#subscriberobotstatus","title":"SubscribeRobotStatus","text":"<p>A server side streaming RPC endpoint to get the robot's connectivity and operational state. Upon subscription, the latest battery state is sent immediately. Updates are streamed as the robot's state changes.</p>"},{"location":"v1.0/resources/RobotStatus/#request_1","title":"Request","text":""},{"location":"v1.0/resources/RobotStatus/#selector-robotselector-required_1","title":"selector <code>RobotSelector</code> <code>required</code>","text":"<p><code>RobotSelector</code> is used to select specific robots.   It supports selection by a list of robot IDs OR all robots at a given location.</p> Field Message Type Description <code>robot_ids</code> <code>RobotIDs</code> Selects robots by their specific IDs.  Example: <code>[\"pennybot-123abc\", \"pennybot-abc123\"]</code> <code>location_id</code> <code>string</code> Selects all robots at the specified location."},{"location":"v1.0/resources/RobotStatus/#json-request-example_1","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"selector\": {\n      \"robot_ids\": {\n        \"ids\": [\"pennybot-abc123\", \"pennybot-123abc\"]\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.0/resources/RobotStatus/#response_1","title":"Response","text":""},{"location":"v1.0/resources/RobotStatus/#metadata-eventmetadata_1","title":"metadata <code>EventMetadata</code>","text":"Field Message Type Description <code>timestamp</code> Timestamp The time when the event was recorded. <code>sequence_number</code> int64 An incremental sequence number generated by the robot.The sequence number should never be negative and can be reset to 0.i.e. sequence is valid if it is larger than the previous number or 0."},{"location":"v1.0/resources/RobotStatus/#robot_id-string_1","title":"robot_id <code>string</code>","text":"<p>The robotID the message is associated with.</p>"},{"location":"v1.0/resources/RobotStatus/#robot_stateconnetionstate-enum","title":"robot_state.connetion.state <code>enum</code>","text":"<p>Represents the online connection state between the cloud and the robot.</p> Name Number Description STATE_UNKNOWN 0 Default value. It means the <code>state</code> field is not returned. STATE_CONNECTED 1 The robot is connected to Bear cloud services. STATE_DISCONNECTED 2 The robot is offline or unreachable from the cloud."},{"location":"v1.0/resources/RobotStatus/#json-response-example","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"metadata\": {\n    \"timestamp\": \"2025-04-01T17:05:00Z\",\n    \"sequenceNumber\": 211\n  },\n  \"robotId\": \"pennybot-123abc\",\n  \"robotStates\": {\n    \"connection\": {\n      \"state\": \"STATE_CONNECTED\"\n    }\n  }\n},\n{\n  \"metadata\": {\n    \"timestamp\": \"2025-04-01T17:05:05Z\",\n    \"sequenceNumber\": 212\n  },\n  \"robotId\": \"pennybot-abc123\",\n  \"robotStates\": {\n    \"connection\": {\n      \"state\": \"STATE_DISCONNECTED\"\n    }\n  }\n}\n</code></pre>"},{"location":"v1.0/resources/RobotStatus/#errors_1","title":"Errors","text":"ErrorCode Description <code>PERMISSION_DENIED</code> Attempting to request status for a <code>robot_id</code> or <code>location_id</code> you don't own.  Tip: check the spelling of all <code>robot_id</code> or <code>location_id</code> values."},{"location":"v1.0/resources/Servi/","title":"Servi","text":"<p>These endpoints and their message types are only available for the Servi robot family. Attempting to run a Servi commands on a non Servi robot will result in an INVALID_ARGUMENT error.</p>"},{"location":"v1.0/resources/Servi/#createmission","title":"CreateMission","text":"<p>Use the shared <code>CreateMission</code> endpoint to send missions for Servi robots. Servi-specific missions must be sent using the appropriate request message format. </p> <p>Note</p> <p>When sending a Servi mission, <code>servi.Feedback</code> is returned in <code>SubscribeMissionStatus</code> response message.</p>"},{"location":"v1.0/resources/Servi/#servifeedback-enum","title":"servi.Feedback <code>enum</code>","text":"Name Number Description STATUS_UNKNOWN 0 Default value. It means <code>status</code> field is not returned. STATUS_NAVIGATING 1 The robot is currently navigating to its goal. STATUS_ARRIVED 2 The robot has arrived at a goal. STATUS_DOCKING 3 The robot is performing a docking maneuver. STATUS_UNDOCKING 4 The robot is performing an undocking maneuver."},{"location":"v1.0/resources/Servi/#request","title":"Request","text":""},{"location":"v1.0/resources/Servi/#robot_id-string-required","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that will receive this command.</p>"},{"location":"v1.0/resources/Servi/#mission-mission-required","title":"mission <code>Mission</code> <code>required</code>","text":"<p>Universal wrapper for mission types. Only one mission type may be set at a time.</p> Field (oneof) Message Type Description <code>base_mission</code> <code>BaseMission</code> Base missions are applicable to all robot families.  Refer to Mission for how to create and send a base mission. <code>servi_mission</code> <code>servi.Mission</code> Servi missions are specific to the Servi robot family. <code>carti_mission</code> <code>carti.Mission</code> Carti missions are specific to the Carti robot family. Refer to Carti for how to create and send a carti mission."},{"location":"v1.0/resources/Servi/#servi_mission-servimission","title":"servi_mission <code>servi.Mission</code>","text":"<p>Use the field <code>servi_mission</code> to create and send a servi mission. Current API version supports 4 types of Servi mission.</p> Field (oneof) Message Type Description <code>bussing_mission</code> <code>BussingMission</code> Create a servi mission of type <code>Bussing</code>. <code>bussing_patrol_mission</code> <code>BussingPatrolMission</code> Create a servi mission of type <code>BussingPatrol</code>. <code>delivery_mission</code> <code>DeliveryMission</code> Create a servi mission of type <code>Delivery</code>. <code>delivery_patrol_mission</code> <code>DeliveryPatrolMission</code> Create a servi mission of type <code>DeliveryPatrol</code>."},{"location":"v1.0/resources/Servi/#bussing_mission-bussingmission","title":"bussing_mission <code>BussingMission</code>","text":"<p>A mission that navigates to one or more goals, stopping at each for a set amount of time or until some weight is added.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code> <code>required</code> a list of <code>Goal</code> <code>params</code> <code>BussingParams</code> <code>optional</code> There is no param defined in this API version."},{"location":"v1.0/resources/Servi/#bussing_patrol_mission-bussingpatrolmission","title":"bussing_patrol_mission <code>BussingPatrolMission</code>","text":"<p>A mission that continuously loops through goals, stopping at each for a set amount of time or until weight exceeds a threshold.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code> <code>required</code> a list of <code>Goal</code> <code>params</code> <code>BussingPatrolParams</code> <code>optional</code> There is no param defined in this API version."},{"location":"v1.0/resources/Servi/#delivery_mission-deliverymission","title":"delivery_mission <code>DeliveryMission</code>","text":"<p>A mission that navigates to one or more goals, stopping at each for a set amount of time or until some weight is removed.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code> <code>required</code> a list of <code>Goal</code> <code>params</code> <code>DeliveryParams</code> <code>optional</code> There is no param defined in this API version."},{"location":"v1.0/resources/Servi/#delivery_patrol_mission-deliverypatrolmission","title":"delivery_patrol_mission <code>DeliveryPatrolMission</code>","text":"<p>A that continuously loops through goals, stopping at each for a set amount of time or until all weight is removed.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code> <code>required</code> a list of <code>Goal</code> <code>params</code> <code>DeliveryPatrolParams</code> <code>optional</code> There is no param defined in this API version."},{"location":"v1.0/resources/Servi/#json-request-example","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"pennybot-456efg\",\n    \"mission\": {\n      \"serviMission\": {\n        \"bussingMission\": {\n          \"goals\": [\n            { \"destinationId\": \"pickup-table-1\" },\n            { \"destinationId\": \"dropoff-station-3\" }\n          ],\n          \"params\": {}\n        }\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.0/resources/Servi/#response","title":"Response","text":""},{"location":"v1.0/resources/Servi/#mission_id-string","title":"mission_id <code>string</code>","text":"<p>The ID of the mission created. </p>"},{"location":"v1.0/resources/Servi/#json-response-example","title":"JSON Response Example","text":"JSON <pre><code>  {\n    \"missionId\": \"mission-abc123\"\n  }\n</code></pre>"},{"location":"v1.0/resources/Servi/#errors","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> This command is sending to is not a Carti family robot. <code>FAILED_PRECONDITION</code> The robot is already executing another mission.  This command is valid if current mission is in terminal state,  e.g Cancelled, Succeeded, Failed."},{"location":"v1.0/resources/Servi/#subscribetraystatuses","title":"SubscribeTrayStatuses","text":"<p>Subscribes to the robot\u2019s tray status updates.  Upon subscription, the latest known tray states are sent immediately. Updates are streamed when any tray state changes.</p> <p>Weight changes are reported with 10g precision.</p>"},{"location":"v1.0/resources/Servi/#request_1","title":"Request","text":""},{"location":"v1.0/resources/Servi/#selector-robotselector-required","title":"selector <code>RobotSelector</code> <code>required</code>","text":"<p><code>RobotSelector</code> is used to select specific robots.   It supports selection by a list of robot IDs or all robots at a given location.</p> <ol> <li> <p><code>robot_ids</code> <code>RobotIDs</code>    Selects robots by their specific IDs.    Example: <code>[\"pennybot-123abc\", \"pennybot-abc123\"]</code> </p> </li> <li> <p><code>location_id</code> <code>string</code>    Selects all robots at the specified location. </p> </li> </ol>"},{"location":"v1.0/resources/Servi/#json-request-example_1","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"selector\": {\n      \"robotIds\": {\n        \"ids\": [\n          \"pennybot-456efg\"\n        ]\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.0/resources/Servi/#response_1","title":"Response","text":""},{"location":"v1.0/resources/Servi/#tray_states-mapstring-traystateswithmetadata","title":"tray_states <code>map&lt;string, TrayStatesWithMetadata&gt;</code>","text":"<p>A mapping of tray states reported by individual robots. Each entry pairs a robot ID (key) with its corresponding tray states.</p>"},{"location":"v1.0/resources/Servi/#traystateswithmetadata","title":"TrayStatesWithMetadata","text":"Field Message Type Description <code>metadata</code> EventMetadata Metadata associated with the tray states. <code>tray_states</code> TrayStates The tray states reported by the robot."},{"location":"v1.0/resources/Servi/#traystates-traystate-repeated","title":"TrayStates <code>TrayState</code> <code>repeated</code>","text":"<p>State of enabled trays, ordered from the top-most tray on the robot to the bottom.</p>"},{"location":"v1.0/resources/Servi/#traystate","title":"TrayState","text":"<p>Represents the state of a single tray.</p> Field Message Type Description <code>tray_name</code> string Unique string name for the given tray.  e.g. \"top\", \"middle\", \"bottom\"  See illustrations for tray configurations on different robot models. <code>load_state</code> LoadState enum <code>weight_kg</code> float Weight on the tray in kilograms. Minimum precision is 10g. <code>load_ratio</code> float Ratio of the current load to the tray\u2019s maximum load capacity.This value may exceed 1.0 if the tray is overloaded. Caveats:- If the maximum load is misconfigured (e.g., set to 0.0),  this value may return NaN."},{"location":"v1.0/resources/Servi/#loadstate-enum","title":"LoadState <code>enum</code>","text":"Name Number Description LOAD_STATE_UNKNOWN 0 Default value. It means the <code>load_state</code> field is not returned. LOAD_STATE_LOADED 1 The tray has a valid load. LOAD_STATE_EMPTY 2 The tray is empty. LOAD_STATE_OVERLOADED 3 The tray is carrying more than its maximum capacity."},{"location":"v1.0/resources/Servi/#errors_1","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> This command is sending to is not a Servi family robot. <code>PERMISSION_DENIED</code> Attempting to request status for a <code>robot_id</code> or <code>location_id</code> you don't own.  Tip: check the spelling of all <code>robot_id</code> or <code>location_id</code> values."},{"location":"v1.0/resources/Servi/#json-response-example_1","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"trayStates\": {\n    \"pennybot-456efg\": {\n      \"metadata\": {\n        \"timestamp\": \"2025-04-01T16:00:00Z\",\n        \"sequenceNumber\": 105\n      },\n      \"trayStates\": [\n        {\n          \"trayName\": \"top\",\n          \"loadState\": \"LOAD_STATE_OVERLOADED\",\n          \"weightKg\": 8.1,\n          \"loadRatio\": 1.18\n        },\n        {\n          \"trayName\": \"middle\",\n          \"loadState\": \"LOAD_STATE_LOADED\",\n          \"weightKg\": 2.3,\n          \"loadRatio\": 0.76\n        },\n        {\n          \"trayName\": \"bottom\",\n          \"loadState\": \"LOAD_STATE_EMPTY\",\n          \"weightKg\": 0,\n          \"loadRatio\": 0\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"v1.0/resources/Servi/#tray-configurations-on-different-servi-models","title":"Tray configurations on different Servi models","text":""},{"location":"v1.0/resources/Servi/#servi-plus","title":"Servi Plus","text":""},{"location":"v1.0/resources/Servi/#servi","title":"Servi","text":""},{"location":"v1.0/resources/Servi/#servi-mini","title":"Servi Mini","text":""},{"location":"v1.1/resources/Carti/","title":"Carti","text":"<p>These endpoints and their message types are only available for the Carti robot family. Attempting to run a Carti commands on a non Carti robot will result in an INVALID_ARGUMENT error.</p>"},{"location":"v1.1/resources/Carti/#createmission","title":"CreateMission","text":"<p>Use the shared <code>CreateMission</code> endpoint to send missions for Carti robots. Carti-specific missions must be sent using the appropriate request message format. </p> <p>Note</p> <p>When sending a Carti mission, <code>carti.Feedback</code> and <code>CartiType</code> are returned in <code>SubscribeMissionStatus</code> response message.</p>"},{"location":"v1.1/resources/Carti/#cartifeedback-enum","title":"carti.Feedback <code>enum</code>","text":"Name Number Description STATUS_UNKNOWN 0 Default value. It means <code>status</code> field is not returned. STATUS_NAVIGATING 1 The robot is currently navigating to its goal. STATUS_ARRIVED 2 The robot has arrived at a goal. STATUS_DOCKING 3 The robot is performing a docking maneuver. STATUS_UNDOCKING 4 The robot is performing an undocking maneuver."},{"location":"v1.1/resources/Carti/#cartitype-enum","title":"CartiType <code>enum</code>","text":"Name Number Description CARTI_TYPE_UNKNOWN 0 Default value. This should never be used explicitly. CARTI_TYPE_TRAVERSE 1 A traverse mission that follows a sequence of goals. CARTI_TYPE_TRAVERSE_PATROL 2 A traverse patrol mission that follows a sequence of goals on loops. CARTI_TYPE_NAVIGATE 3 A single navigation mission with a predefined goal. CARTI_TYPE_NAVIGATE_AUTO 4 An automated navigation mission that selects the best available goal from a list."},{"location":"v1.1/resources/Carti/#request","title":"Request","text":""},{"location":"v1.1/resources/Carti/#robot_id-string-required","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that will receive this command.</p>"},{"location":"v1.1/resources/Carti/#mission-mission-required","title":"mission <code>Mission</code> <code>required</code>","text":"<p>Universal wrapper for mission types. Only one mission type may be set at a time.</p> Field (oneof) Message Type Description <code>base_mission</code> <code>BaseMission</code> Base missions are applicable to all robot families.  Refer to Mission for how to create and send a base mission. <code>servi_mission</code> <code>servi.Mission</code> Servi missions are specific to the Servi robot family. Refer to Servi for how to create and send a servi mission. <code>carti_mission</code> <code>carti.Mission</code> Carti missions are specific to the Carti robot family."},{"location":"v1.1/resources/Carti/#carti_mission-cartimission","title":"carti_mission <code>carti.Mission</code>","text":"<p>Use the field <code>carti_mission</code> to create and send a mission.</p> Field (oneof) Message Type Description <code>traverse_mission</code> <code>TraverseMission</code> Create a carti mission of type <code>Traverse</code>. <code>traverse_patrol_mission</code> <code>TraversePatrolMission</code> Create a carti mission of type <code>TraversePatrol</code>. <code>navigate_mission</code> <code>NavigateMission</code> Create a carti mission of type <code>Navigate</code>. <code>navigate_auto_mission</code> <code>NavigateAutoMission</code> Create a carti mission of type <code>NavigateAuto</code>."},{"location":"v1.1/resources/Carti/#traversemission","title":"TraverseMission","text":"<p>A traverse mission that navigates to one or more goals, stopping at each for a set amount of time or until directed to continue.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code> <code>required</code> a list of <code>Goal</code> <code>params</code> <code>TraverseParams</code> <code>optional</code> There is no param defined in this API version."},{"location":"v1.1/resources/Carti/#traversepatrolmission","title":"TraversePatrolMission","text":"<p>A traverse patrol mission that navigates to one or more goals and continuously loops through the goals, stopping at each for a set amount of time or until directed to continue.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code> <code>required</code> a list of <code>Goal</code> <code>params</code> <code>TraversePatrolParam</code> <code>optional</code> There is no param defined in this API version."},{"location":"v1.1/resources/Carti/#navigatemission","title":"NavigateMission","text":"<p>A mission consisting of a single, explicitly defined goal.</p> Field Message Type Description <code>goal</code> <code>Goal</code> <code>required</code> A single <code>Goal</code>"},{"location":"v1.1/resources/Carti/#navigateautomission","title":"NavigateAutoMission","text":"<p>A mission that automatically selects the first unoccupied and unclaimed goal from the provided list, preferring goals with lower index values.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code> <code>required</code> a list of <code>Goal</code>"},{"location":"v1.1/resources/Carti/#json-request-example","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"carti-001\",\n    \"mission\": {\n      \"cartiMission\": {\n        \"traverseMission\": {\n          \"goals\": [\n            { \"destinationId\": \"room-a\" },\n            { \n              \"pose\": {\n                \"xMeters\": 5.2,\n                \"yMeters\": 3.1,\n                \"headingRadians\": 1.57\n              }\n            }\n          ],\n          \"params\": {}\n        }\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/Carti/#response","title":"Response","text":""},{"location":"v1.1/resources/Carti/#mission_id-string","title":"mission_id <code>string</code>","text":"<p>The ID of the mission created. </p>"},{"location":"v1.1/resources/Carti/#json-response-example","title":"JSON Response Example","text":"JSON <pre><code>  {\n    \"missionId\": \"mission-abc123\"\n  }\n</code></pre>"},{"location":"v1.1/resources/Carti/#errors","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> Invalid request parameters or this command is being sent to a non-Carti family robot.  Tips: check that <code>robot_id</code> is not empty, <code>mission</code> is not null, or the robot is a Carti family robot. <code>PERMISSION_DENIED</code> Attempting to create a mission for a <code>robot_id</code> you don't own.  Tip: check the spelling of the <code>robot_id</code> value. <code>NOT_FOUND</code> The specified robot ID does not exist or is not accessible. <code>INTERNAL</code> Internal server error occurred while processing the request. <code>FAILED_PRECONDITION</code> The robot is already executing another mission.  This command is valid if current mission is in terminal state,  e.g Cancelled, Succeeded, Failed."},{"location":"v1.1/resources/Carti/#getconveyorindex","title":"GetConveyorIndex","text":"<p>Retrieves the configured conveyor indexes for the robot. Indexes represent logical positions, not physical installation:</p> <ul> <li>Carti 100 (vertical): INDEX_1ST = uppermost conveyor</li> <li>Carti 600 (horizontal): INDEX_1ST = front facing conveyor</li> </ul>"},{"location":"v1.1/resources/Carti/#request_1","title":"Request","text":""},{"location":"v1.1/resources/Carti/#robot_id-string-required_1","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot to retrieve conveyor indexes for.</p>"},{"location":"v1.1/resources/Carti/#json-request-example_1","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"carti-001\"\n  }\n</code></pre>"},{"location":"v1.1/resources/Carti/#response_1","title":"Response","text":""},{"location":"v1.1/resources/Carti/#indexes-repeated-int32","title":"indexes <code>repeated int32</code>","text":"<p>List of available conveyor indexes for this robot.</p>"},{"location":"v1.1/resources/Carti/#json-response-example_1","title":"JSON Response Example","text":"JSON <pre><code>  {\n    \"indexes\": [1, 2]\n  }\n</code></pre>"},{"location":"v1.1/resources/Carti/#errors_1","title":"Errors","text":"ErrorCode Description <code>INTERNAL</code> Internal server error occurred while processing the request. <code>INVALID_ARGUMENT</code> This command is being sent to a non-Carti family robot. <code>NOT_FOUND</code> The specified robot ID does not exist or is not accessible."},{"location":"v1.1/resources/Carti/#subscribeconveyorstatus","title":"SubscribeConveyorStatus","text":"<p>A server side streaming RPC endpoint to get conveyor status updates for the robot. Upon subscription, the latest known conveyor states are sent immediately. Updates are streamed when any conveyor state changes.</p>"},{"location":"v1.1/resources/Carti/#request_2","title":"Request","text":""},{"location":"v1.1/resources/Carti/#robot_id-string-required_2","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot to subscribe to conveyor status for.</p>"},{"location":"v1.1/resources/Carti/#json-request-example_2","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"carti-001\"\n  }\n</code></pre>"},{"location":"v1.1/resources/Carti/#response_2","title":"Response","text":""},{"location":"v1.1/resources/Carti/#states-repeated-conveyorstate","title":"states <code>repeated ConveyorState</code>","text":"<p>State of all conveyors on the robot.</p>"},{"location":"v1.1/resources/Carti/#conveyorstate","title":"ConveyorState","text":"<p>Represents the state of a single conveyor.</p> Field Message Type Description <code>index</code> <code>int32</code> Unique identifier for the conveyor (logical position). <code>operation_state</code> <code>OperationState</code> enum Current operation state of the conveyor motor. <code>payload_state</code> <code>PayloadState</code> enum Current state of the payload on the conveyor. <code>health_state</code> <code>HealthState</code> enum Current health of the conveyor. <code>installation_state</code> <code>InstallationState</code> enum Current installation state of the conveyor."},{"location":"v1.1/resources/Carti/#operationstate-enum","title":"OperationState <code>enum</code>","text":"Name Number Description OPERATION_STATE_UNKNOWN 0 Default value. It means the <code>operation_state</code> field is not returned. OPERATION_STATE_ROLLING 1 The conveyor's motor is rolling in any direction. OPERATION_STATE_STOP 2 The conveyor's motor is stopped."},{"location":"v1.1/resources/Carti/#payloadstate-enum","title":"PayloadState <code>enum</code>","text":"Name Number Description PAYLOAD_STATE_UNKNOWN 0 Default value. It means the <code>payload_state</code> field is not returned. PAYLOAD_STATE_LOADED 1 The conveyor has a payload. PAYLOAD_STATE_EMPTY 2 The conveyor is empty."},{"location":"v1.1/resources/Carti/#healthstate-enum","title":"HealthState <code>enum</code>","text":"Name Number Description HEALTH_STATE_UNKNOWN 0 Default value. It means the <code>health_state</code> field is not returned. HEALTH_STATE_OK 1 The conveyor is installed and functioning. HEALTH_STATE_ERROR 2 The conveyor is not functioning."},{"location":"v1.1/resources/Carti/#installationstate-enum","title":"InstallationState <code>enum</code>","text":"Name Number Description INSTALLATION_STATE_UNKNOWN 0 Default value. It means the <code>installation_state</code> field is not returned. INSTALLATION_STATE_INSTALLED 1 The conveyor is installed. INSTALLATION_STATE_NOT_INSTALLED 2 The conveyor is not installed."},{"location":"v1.1/resources/Carti/#json-response-example_2","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"states\": [\n    {\n      \"index\": 1,\n      \"operationState\": \"OPERATION_STATE_ROLLING\",\n      \"payloadState\": \"PAYLOAD_STATE_LOADED\",\n      \"healthState\": \"HEALTH_STATE_OK\",\n      \"installationState\": \"INSTALLATION_STATE_INSTALLED\"\n    },\n    {\n      \"index\": 2,\n      \"operationState\": \"OPERATION_STATE_STOP\",\n      \"payloadState\": \"PAYLOAD_STATE_EMPTY\",\n      \"healthState\": \"HEALTH_STATE_OK\",\n      \"installationState\": \"INSTALLATION_STATE_INSTALLED\"\n    }\n  ]\n}\n</code></pre>"},{"location":"v1.1/resources/Carti/#errors_2","title":"Errors","text":"ErrorCode Description <code>PERMISSION_DENIED</code> Attempting to request conveyor status for a <code>robot_id</code> you don't own.  Tip: check the spelling of the <code>robot_id</code> value. <code>INTERNAL</code> Internal server error occurred while processing the request."},{"location":"v1.1/resources/Carti/#controlconveyor","title":"ControlConveyor","text":"<p>Controls conveyor motor operations for the specified conveyor indexes. This call allows manual control of conveyor motors for clockwise/counter-clockwise rotation or stop commands.</p>"},{"location":"v1.1/resources/Carti/#request_3","title":"Request","text":""},{"location":"v1.1/resources/Carti/#robot_id-string-required_3","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that will receive this command.</p>"},{"location":"v1.1/resources/Carti/#commands-repeated-carticonveyormotorcommand-required","title":"commands <code>repeated carti.ConveyorMotorCommand</code> <code>required</code>","text":"<p>List of conveyor motor commands to execute.</p>"},{"location":"v1.1/resources/Carti/#conveyormotorcommand","title":"ConveyorMotorCommand","text":"Field Message Type Description <code>index</code> <code>int32</code> The target conveyor to control. <code>command</code> <code>CommandConveyorMotor</code> enum The motor command to execute."},{"location":"v1.1/resources/Carti/#commandconveyormotor-enum","title":"CommandConveyorMotor <code>enum</code>","text":"Name Number Description COMMAND_CONVEYOR_MOTOR_UNKNOWN 0 Default value. This should never be used explicitly. COMMAND_CONVEYOR_MOTOR_STOP 1 Stop the conveyor. COMMAND_CONVEYOR_MOTOR_CW 2 Rotate the conveyor clockwise. COMMAND_CONVEYOR_MOTOR_CCW 3 Rotate the conveyor counter-clockwise."},{"location":"v1.1/resources/Carti/#json-request-example_3","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"carti-001\",\n    \"commands\": [\n      {\n        \"index\": 1,\n        \"command\": \"COMMAND_CONVEYOR_MOTOR_CW\"\n      },\n      {\n        \"index\": 2,\n        \"command\": \"COMMAND_CONVEYOR_MOTOR_STOP\"\n      }\n    ]\n  }\n</code></pre>"},{"location":"v1.1/resources/Carti/#response_3","title":"Response","text":"<p>(No fields defined)</p>"},{"location":"v1.1/resources/Carti/#json-response-example_3","title":"JSON Response Example","text":"JSON <pre><code>  {}\n</code></pre>"},{"location":"v1.1/resources/Carti/#errors_3","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> This command is being sent to a non-Carti family robot, or one or more conveyor indexes are not installed on the robot. <code>NOT_FOUND</code> The specified robot ID does not exist or is not accessible. <code>INTERNAL</code> Internal server error occurred while processing the request. <code>FAILED_PRECONDITION</code> The robot is in an error state that prevents conveyor control."},{"location":"v1.1/resources/FleetManagement/","title":"Fleet Management","text":"<p>Utilities for managing multiple robots within an account or workspace.</p>"},{"location":"v1.1/resources/FleetManagement/#listrobotids","title":"ListRobotIDs","text":"<p>Retrieves a list of robot IDs the user has access to, filtered by optional criteria.  The list includes all known robots, regardless of their current connection state. </p>"},{"location":"v1.1/resources/FleetManagement/#request","title":"Request","text":""},{"location":"v1.1/resources/FleetManagement/#filter-robotfilter-required","title":"filter <code>RobotFilter</code> <code>required</code>","text":"<p><code>RobotFilter</code> defines the conditions for selecting robots.  All specified fields are combined using an AND condition. </p> Field Message Type Description <code>location_id</code> <code>string</code> An empty location_id return all robots assigned to all locations created and owned by API key user."},{"location":"v1.1/resources/FleetManagement/#json-request-example","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"filter\": {\n      \"locationId\": \"location-123\"\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/FleetManagement/#response","title":"Response","text":"<p>A response message has 2 fields: </p> Field Message Type Description <code>total_robots</code> <code>int32</code> Total number of robots. <code>robot_ids</code> List of <code>string</code> This might not have all the robot IDs if there are too many. It will have all the robot IDs if the number of  <code>robot_ids</code> is same as <code>total_robots</code>."},{"location":"v1.1/resources/FleetManagement/#json-response-example","title":"JSON Response Example","text":"JSON <pre><code>  {\n    \"totalRobots\": 5,\n    \"robotIds\": [\n      \"pennybot-abc123\",\n      \"pennybot-def456\",\n      \"pennybot-ghi789\",\n      \"pennybot-jkl012\",\n      \"pennybot-mno345\"\n    ]\n  }\n</code></pre>"},{"location":"v1.1/resources/FleetManagement/#errors","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> Invalid API key or request parameters. <code>PERMISSION_DENIED</code> Attempting to retrieve Robot IDs with a <code>location_id</code> you don't own.  Tips: check the spelling of all <code>location_id</code> values. <code>INTERNAL</code> Internal server error occurred while processing the request."},{"location":"v1.1/resources/FleetManagement/#getavailablelocations","title":"GetAvailableLocations","text":"<p>Returns a map of locations the user has access to. </p> <p>The map consists of the location ID (key) paired with its human-readable name (value).</p>"},{"location":"v1.1/resources/FleetManagement/#request_1","title":"Request","text":"<p>(No fields defined)</p>"},{"location":"v1.1/resources/FleetManagement/#json-request-example_1","title":"JSON Request Example","text":"JSON <pre><code>  {}\n</code></pre>"},{"location":"v1.1/resources/FleetManagement/#response_1","title":"Response","text":""},{"location":"v1.1/resources/FleetManagement/#locations-mapstring-string","title":"locations <code>map&lt;string, string&gt;</code>","text":"<p>A mapping of location ID (key) with its corresponding, human-readable location name.  e.g. { \"1D9X\": \"785_Platform\" }</p>"},{"location":"v1.1/resources/FleetManagement/#json-response-example_1","title":"JSON Response Example","text":"JSON <pre><code>  {\n    \"locations\": {\n      \"1D9X\": \"785_Platform\",\n      \"3R0A\": \"Main Office Building\",\n      \"5K2B\": \"Warehouse Facility\"\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/FleetManagement/#errors_1","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> Invalid API key or request parameters. <code>INTERNAL</code> Internal server error occurred while processing the request."},{"location":"v1.1/resources/LocalizationAndNavigation/","title":"Localization & Navigation","text":"<p>Provides controls and subscriptions related to a robot\u2019s position within its environment, including localization and pose tracking.</p>"},{"location":"v1.1/resources/LocalizationAndNavigation/#localizerobot","title":"LocalizeRobot","text":"<p>Localizes the robot to a known pose or destination. </p> <p>If the request is accepted, subscribe to SubscribeLocalizationStatus  to track localization progress. </p>"},{"location":"v1.1/resources/LocalizationAndNavigation/#request","title":"Request","text":""},{"location":"v1.1/resources/LocalizationAndNavigation/#robot_id-string-required","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that the localization command is sent to.</p>"},{"location":"v1.1/resources/LocalizationAndNavigation/#goal-goal-required","title":"goal <code>Goal</code> <code>required</code>","text":"<p>Goal represents a target destination or pose for the robot to localize to.</p> Field Message Type Description destination_id <code>string</code> Unique identifier for the destination. Pose <code>Pose</code> Pose of the robot on the map."},{"location":"v1.1/resources/LocalizationAndNavigation/#pose","title":"Pose","text":"Field Message Type Description <code>x_meters</code> <code>float</code> X-coordinate in meters within the map. <code>y_meters</code> <code>float</code> Y-coordinate in meters within the map. <code>heading_radians</code> <code>float</code> The heading of the robot in radians.Ranges from -\u03c0 to \u03c0, where 0.0 points along the positive x-axis."},{"location":"v1.1/resources/LocalizationAndNavigation/#json-request-example","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"pennybot-123123\",\n    \"goal\": {\n      \"pose\": {\n        \"xMeters\": 1.5,\n        \"yMeters\": 2.8,\n        \"headingRadians\": -0.52\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/LocalizationAndNavigation/#response","title":"Response","text":"<p>(No fields defined) </p>"},{"location":"v1.1/resources/LocalizationAndNavigation/#json-response-example","title":"JSON Response Example","text":"JSON <pre><code>  {}\n</code></pre>"},{"location":"v1.1/resources/LocalizationAndNavigation/#errors","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> Invalid request parameters.  Tips: check that <code>robot_id</code> is not empty and <code>goal</code> is not nil. <code>PERMISSION_DENIED</code> Attempting to localize a <code>robot_id</code> you don't own.  Tips: check the spelling of the <code>robot_id</code>. <code>FAILED_PRECONDITION</code> While the robot is localizing, any subsequent requests  to localize the robot will return a error until the process is completed. <code>INTERNAL</code> Communication failure with the robot."},{"location":"v1.1/resources/LocalizationAndNavigation/#subscribeemergencystopstatus","title":"SubscribeEmergencyStopStatus","text":"<p>A server side streaming RPC endpoint to Subscribe to the software emergency stop state. Upon subscription, the latest emergency stop state is sent immediately. State updates are streamed whenever the emergency stop state changes.</p>"},{"location":"v1.1/resources/LocalizationAndNavigation/#request_1","title":"Request","text":""},{"location":"v1.1/resources/LocalizationAndNavigation/#robot_id-string-required_1","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that emergency stop subscription request is sent to.</p>"},{"location":"v1.1/resources/LocalizationAndNavigation/#json-request-example_1","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"pennybot-123123\"\n  }\n</code></pre>"},{"location":"v1.1/resources/LocalizationAndNavigation/#response_1","title":"Response","text":""},{"location":"v1.1/resources/LocalizationAndNavigation/#metadata-eventmetadata","title":"metadata <code>EventMetadata</code>","text":"Field Message Type Description <code>timestamp</code> <code>Timestamp</code> The time when the event was recorded. <code>sequence_number</code> <code>int64</code> An incremental sequence number generated by the robot.The sequence number should never be negative and can be reset to 0.i.e. sequence is valid if it is larger than the previous number or 0."},{"location":"v1.1/resources/LocalizationAndNavigation/#e_stop_state-emergencystopstate","title":"e_stop_state <code>EmergencyStopState</code>","text":"<p>The current emergency stop state of the robot.</p> Field Message Type Description <code>emergency</code> <code>Emergency</code> enum Whether the software level emergency stop is engaged. <code>button_pressed</code> <code>Emergency</code> enum Whether the physical emergency stop button is engaged."},{"location":"v1.1/resources/LocalizationAndNavigation/#emergency-enum","title":"Emergency <code>enum</code>","text":"Name Number Description EMERGENCY_UNKNOWN 0 Default value. It means the <code>state</code> field is not returned. EMERGENCY_ENGAGED 1 Triggers an emergency stop.  Overrides and sets navigation-related velocity command to 0 to the motor. EMERGENCY_DISENGAGED 2 Wheels will resume acting upon software navigation commands."},{"location":"v1.1/resources/LocalizationAndNavigation/#json-response-example_1","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"metadata\": {\n    \"timestamp\": \"2025-04-01T17:30:00Z\",\n    \"sequenceNumber\": 42\n  },\n  \"eStopState\": {\n    \"emergency\": \"EMERGENCY_ENGAGED\",\n    \"buttonPressed\": \"EMERGENCY_DISENGAGED\"\n  }\n}\n</code></pre>"},{"location":"v1.1/resources/LocalizationAndNavigation/#errors_1","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> Invalid request parameters.  Tips: check that <code>robot_id</code> is not empty. <code>PERMISSION_DENIED</code> Attempting to request status for <code>robot_id</code> you don't own.  Tips: check the spelling of the <code>robot_id</code>."},{"location":"v1.1/resources/LocalizationAndNavigation/#subscribelocalizationstatus","title":"SubscribeLocalizationStatus","text":"<p>A server side streaming RPC endpoint to get the robot\u2019s localization state. Upon subscription, the latest localization state is sent immediately. State updates are streamed while localization is active.</p>"},{"location":"v1.1/resources/LocalizationAndNavigation/#request_2","title":"Request","text":""},{"location":"v1.1/resources/LocalizationAndNavigation/#robot_id-string-required_2","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that subscription request is sent to.</p>"},{"location":"v1.1/resources/LocalizationAndNavigation/#json-request-example_2","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"pennybot-123123\"\n  }\n</code></pre>"},{"location":"v1.1/resources/LocalizationAndNavigation/#response_2","title":"Response","text":""},{"location":"v1.1/resources/LocalizationAndNavigation/#metadata-eventmetadata_1","title":"metadata <code>EventMetadata</code>","text":"Field Message Type Description <code>timestamp</code> <code>Timestamp</code> The time when the event was recorded. <code>sequence_number</code> <code>int64</code> An incremental sequence number generated by the robot.The sequence number should never be negative and can be reset to 0.i.e. sequence is valid if it is larger than the previous number or 0."},{"location":"v1.1/resources/LocalizationAndNavigation/#localizationstate-enum","title":"LocalizationState <code>enum</code>","text":"Name Number Description STATE_UNKNOWN 0 Default value. It means the <code>state</code> field is not returned. STATE_FAILED 1 Localization failed. STATE_SUCCEEDED 2 Localization completed successfully. STATE_LOCALIZING 3 The robot is actively attempting to localize."},{"location":"v1.1/resources/LocalizationAndNavigation/#json-response-example_2","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"metadata\": {\n    \"timestamp\": \"2025-04-01T17:30:00Z\",\n    \"sequenceNumber\": 98\n  },\n  \"localizationState\": {\n    \"state\": \"STATE_LOCALIZING\"\n  }\n}\n</code></pre>"},{"location":"v1.1/resources/LocalizationAndNavigation/#errors_2","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> Invalid request parameters.  Tips: check that <code>robot_id</code> is not empty. <code>PERMISSION_DENIED</code> Attempting to request status for a <code>robot_id</code> you don't own.  Tips: check the spelling of all <code>robot_id</code> values."},{"location":"v1.1/resources/LocalizationAndNavigation/#subscriberobotpose","title":"SubscribeRobotPose","text":"<p>A server side streaming RPC endpoint to subscribe to the robot's pose estimates at a regular frequency. (~10Hz) Use this to track the robot's position in real time.</p>"},{"location":"v1.1/resources/LocalizationAndNavigation/#request_3","title":"Request","text":""},{"location":"v1.1/resources/LocalizationAndNavigation/#selector-robotselector-required","title":"selector <code>RobotSelector</code> <code>required</code>","text":"<p><code>RobotSelector</code> is used to select specific robots.   It supports selection by a list of robot IDs OR all robots at a given location.</p> Field Message Type Description <code>robot_ids</code> <code>RobotIDs</code> Selects robots by their specific IDs.  Example: <code>[\"pennybot-123abc\", \"pennybot-abc123\"]</code> <code>location_id</code> <code>string</code> Selects all robots at the specified location."},{"location":"v1.1/resources/LocalizationAndNavigation/#json-request-example_3","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"selector\": {\n      \"robot_ids\": {\n        \"ids\": [\"pennybot-abc123\", \"pennybot-123abc\"]\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/LocalizationAndNavigation/#response_3","title":"Response","text":""},{"location":"v1.1/resources/LocalizationAndNavigation/#poses-mapstring-posewithmetadata","title":"poses <code>map&lt;string, PoseWithMetadata&gt;</code>","text":"<p>A mapping of robot IDs to their current pose estimates. Each entry pairs a robot ID (key) with its corresponding pose estimate and metadata.</p>"},{"location":"v1.1/resources/LocalizationAndNavigation/#posewithmetadata","title":"PoseWithMetadata","text":"Field Message Type Description <code>metadata</code> <code>EventMetadata</code> Metadata associated with the event. <code>pose</code> <code>Pose</code> Pose of the robot on the map."},{"location":"v1.1/resources/LocalizationAndNavigation/#json-response-example_3","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"poses\": {\n    \"pennybot-abc123\": {\n      \"metadata\": {\n        \"timestamp\": \"2025-04-01T17:45:00Z\",\n        \"sequenceNumber\": 201\n      },\n      \"pose\": {\n        \"xMeters\": 1.5,\n        \"yMeters\": 3.2,\n        \"headingRadians\": 0.78\n      }\n    },\n    \"pennybot-123abc\": {\n      \"metadata\": {\n        \"timestamp\": \"2025-04-01T17:45:02Z\",\n        \"sequenceNumber\": 202\n      },\n      \"pose\": {\n        \"xMeters\": 0.0,\n        \"yMeters\": 0.0,\n        \"headingRadians\": -3.14\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"v1.1/resources/LocalizationAndNavigation/#errors_3","title":"Errors","text":"ErrorCode Description <code>PERMISSION_DENIED</code> Attempting to request status for a <code>robot_id</code>  or <code>location_id</code> you don't own.  Tip: check the spelling of all <code>robot_id</code> or <code>location_id</code> values. <code>INTERNAL</code> Failed to subscribe to robot pose updates."},{"location":"v1.1/resources/LocalizationAndNavigation/#setpose","title":"SetPose","text":"<p>Sets the robot's current pose to a specified position and orientation.</p>"},{"location":"v1.1/resources/LocalizationAndNavigation/#request_4","title":"Request","text":""},{"location":"v1.1/resources/LocalizationAndNavigation/#robot_id-string-required_3","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot to set the pose for.</p>"},{"location":"v1.1/resources/LocalizationAndNavigation/#pose-pose-required","title":"pose <code>Pose</code> <code>required</code>","text":"<p>The new <code>pose</code> for the robot.</p>"},{"location":"v1.1/resources/LocalizationAndNavigation/#json-request-example_4","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"pennybot-abc123\",\n    \"pose\": {\n      \"xMeters\": 2.5,\n      \"yMeters\": 3.0,\n      \"headingRadians\": 1.57\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/LocalizationAndNavigation/#response_4","title":"Response","text":"<p>(No fields defined)</p>"},{"location":"v1.1/resources/LocalizationAndNavigation/#json-response-example_4","title":"JSON Response Example","text":"JSON <pre><code>  {}\n</code></pre>"},{"location":"v1.1/resources/LocalizationAndNavigation/#errors_4","title":"Errors","text":"ErrorCode Description <code>PERMISSION_DENIED</code> Attempting to set pose for a <code>robot_id</code> you don't own.  Tip: check the spelling of the <code>robot_id</code> value. <code>NOT_FOUND</code> The specified robot ID does not exist or is not accessible. <code>INVALID_ARGUMENT</code> The specified pose is invalid or out of bounds. <code>UNAVAILABLE</code> The robot is offline and cannot set pose."},{"location":"v1.1/resources/LocationsAndMaps/","title":"Locations & Maps","text":"<p>Retrieve data about a robot's operating environment, including maps, floors, annotations, and navigable destinations.</p>"},{"location":"v1.1/resources/LocationsAndMaps/#getcurrentmap","title":"GetCurrentMap","text":"<p>Retrieves the current map used by the robot. </p> <p>The returned map includes annotations and destinations, which can be used in mission destination, localization goals, and navigation. </p>"},{"location":"v1.1/resources/LocationsAndMaps/#request","title":"Request","text":""},{"location":"v1.1/resources/LocationsAndMaps/#robot_id-string-required","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The robot ID used to request the map currently loaded on the robot.</p>"},{"location":"v1.1/resources/LocationsAndMaps/#json-request-example","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robot_id\": \"pennybot-abc123\"\n  }\n</code></pre>"},{"location":"v1.1/resources/LocationsAndMaps/#response","title":"Response","text":""},{"location":"v1.1/resources/LocationsAndMaps/#map-map","title":"map <code>Map</code>","text":"<p>Map represents a navigable map used by robots, including metadata and associated annotations.</p> Field Message Type Description <code>map_id</code> <code>string</code> Unique identifier for the map.e.g., \"9578\" <code>created_time</code> <code>Timestamp</code> Indicating when the map was created. <code>modified_time</code> <code>Timestamp</code> Indicating the last time the map was modified. <code>display_name</code> <code>string</code> Display name of the map, matching the name used in Bear Universe. e.g., \"ITCT SEOUL\" <code>annotation</code> <code>Annotation</code> Annotation associated with this map, defining specific areas and destinations."},{"location":"v1.1/resources/LocationsAndMaps/#annotation","title":"Annotation","text":"<p>Annotation defines a specific area on the map, often used to group destinations or assign special parameters. </p> Field Message Type Description <code>annotation_id</code> <code>string</code> Unique identifier for the annotation.e.g., \"67305\" <code>display_name</code> <code>string</code> Descriptive name for the annotation.e.g., \"ITCT annotation A\" <code>created_time</code> <code>Timestamp</code> Timestamp indicating when the annotation  was created. <code>destinations</code> <code>map&lt;string, Destination&gt;</code>  See Destination A collection of destinations associated with  this annotation. Each entry pairs a destination ID (key)  with its corresponding Destination message (value)."},{"location":"v1.1/resources/LocationsAndMaps/#destination","title":"Destination","text":"<p>Destination represents a single point of interest on the map that a robot can navigate to and align itself with.</p> Field Message Type Description <code>destination_id</code> string Unique identifier for the destination. <code>display_name</code> string Human-readable name for the destination."},{"location":"v1.1/resources/LocationsAndMaps/#json-response-example","title":"JSON Response Example","text":"JSON <pre><code>   {\n    \"mapId\": \"map-01\",\n    \"createdTime\": \"2025-03-28T12:00:00Z\",\n    \"modifiedTime\": \"2025-04-01T09:45:00Z\",\n    \"displayName\": \"Main Floor Map\",\n    \"annotation\": {\n      \"annotationId\": \"annot-123\",\n      \"displayName\": \"Service Area Zones\",\n      \"createdTime\": \"2025-03-30T10:15:00Z\",\n      \"destinations\": {\n        \"Loading Dock 1\": {\n          // destinationId and displayName are the same values. \n          \"destinationId\": \"Loading Dock 1\",\n          \"displayName\": \"Loading Dock 1\"\n        },\n        \"Main Kitchen\": {\n          \"destinationId\": \"Main Kitchen\",\n          \"displayName\": \"Main Kitchen\"\n        }\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/LocationsAndMaps/#errors","title":"Errors","text":"ErrorCode Description <code>NOT_FOUND</code> The annotation (of the requested map) does not exist."},{"location":"v1.1/resources/LocationsAndMaps/#getlocationinfo","title":"GetLocationInfo","text":"<p>Retrieves information about a specific location by its ID. </p> <p>The location includes metadata such as floors, sections, and their associated maps. </p>"},{"location":"v1.1/resources/LocationsAndMaps/#request_1","title":"Request","text":""},{"location":"v1.1/resources/LocationsAndMaps/#location_id-string-required","title":"location_id <code>string</code> <code>required</code>","text":"<p>The location_id is a 4 character alphanumeric identifier for the location.  e.g., \"3R0A\"</p>"},{"location":"v1.1/resources/LocationsAndMaps/#json-request-example_1","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"location_id\": \"3R0A\"\n  }\n</code></pre>"},{"location":"v1.1/resources/LocationsAndMaps/#response_1","title":"Response","text":""},{"location":"v1.1/resources/LocationsAndMaps/#location-location","title":"location <code>Location</code>","text":"<p>Location represents a physical space where robots operate, containing floors, sections, and maps.</p> Field Message Type Description <code>location_id</code> <code>string</code> A 4 character alphanumeric identifier for the location. e.g., \"3R0A\" <code>created_time</code> <code>Timestamp</code> Timestamp indicating when the location was created. <code>modified_time</code> <code>Timestamp</code> Timestamp indicating the last time the location was modified. <code>display_name</code> <code>string</code> Display name of the location, matching the name shown in Universe. e.g., \"City Deli &amp; Grill\", \"KNTH\" <code>floors</code> map&lt;<code>int32</code>, <code>Floor</code>&gt; Map of floors in the location, keyed by their floor level. The floor level is any non-negative integer starting from 0."},{"location":"v1.1/resources/LocationsAndMaps/#floor","title":"Floor","text":"<p>Represents a single floor within a location.</p> Field Message Type Description <code>display_name</code> <code>string</code> Display name of the floor, matching the name shown in Universe. <code>sections</code> repeated <code>Section</code> List of sections on this floor."},{"location":"v1.1/resources/LocationsAndMaps/#section","title":"Section","text":"<p>Represents a section within a floor.</p> Field Message Type Description <code>display_name</code> <code>string</code> Display name of the section, matching the name shown in Universe. <code>current_map_id</code> <code>string</code> ID of the current map associated with the section."},{"location":"v1.1/resources/LocationsAndMaps/#json-response-example_1","title":"JSON Response Example","text":"JSON <pre><code>  {\n    \"location\": {\n      \"locationId\": \"3R0A\",\n      \"createdTime\": \"2025-03-28T12:00:00Z\",\n      \"modifiedTime\": \"2025-04-01T09:45:00Z\",\n      \"displayName\": \"Main Office Building\",\n      \"floors\": {\n        \"0\": {\n          \"displayName\": \"Ground Floor\",\n          \"sections\": [\n            {\n              \"displayName\": \"Lobby Area\",\n              \"currentMapId\": \"map-lobby-001\"\n            }\n          ]\n        },\n        \"1\": {\n          \"displayName\": \"Second Floor\",\n          \"sections\": [\n            {\n              \"displayName\": \"Office Area\",\n              \"currentMapId\": \"map-office-001\"\n            }\n          ]\n        }\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/LocationsAndMaps/#errors_1","title":"Errors","text":"ErrorCode Description <code>NOT_FOUND</code> The location with the specified ID does not exist."},{"location":"v1.1/resources/LocationsAndMaps/#getmap","title":"GetMap","text":"<p>Retrieves a saved map by map_id from the cloud. </p> <p>Use this to fetch a stored map from the cloud database. </p>"},{"location":"v1.1/resources/LocationsAndMaps/#request_2","title":"Request","text":""},{"location":"v1.1/resources/LocationsAndMaps/#map_id-string-required","title":"map_id <code>string</code> <code>required</code>","text":"<p>The unique identifier of the map to retrieve.</p>"},{"location":"v1.1/resources/LocationsAndMaps/#json-request-example_2","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"map_id\": \"map-001\"\n  }\n</code></pre>"},{"location":"v1.1/resources/LocationsAndMaps/#response_2","title":"Response","text":""},{"location":"v1.1/resources/LocationsAndMaps/#map-map_1","title":"map <code>Map</code>","text":"<p>Map represents a navigable map used by robots, including metadata and associated annotations.</p> Field Message Type Description <code>map_id</code> <code>string</code> Unique identifier for the map. e.g., \"9578\" <code>created_time</code> <code>Timestamp</code> Indicating when the map was created. <code>modified_time</code> <code>Timestamp</code> Indicating the last time the map was modified. <code>display_name</code> <code>string</code> Display name of the map, matching the name used in Bear Universe. e.g., \"ITCT SEOUL\" <code>annotation</code> <code>Annotation</code> Annotation associated with this map, defining specific areas and destinations. <code>image_download_info</code> <code>MapImageDownloadInfo</code> Information for downloading the map image, including signed URL and file metadata. This field is typically populated by the cloud service. <code>origin</code> <code>Origin</code> Origin of the map relative to the map frame. <code>resolution</code> <code>float</code> Resolution of the map in meters per pixel."},{"location":"v1.1/resources/LocationsAndMaps/#mapimagedownloadinfo","title":"MapImageDownloadInfo","text":"<p>Contains the information needed to download a map image.</p> Field Message Type Description <code>file_info</code> <code>MapImageFileInfo</code> Information about the map image file for integrity verification. <code>download_url</code> <code>SignedURL</code> The signed URL for downloading the map image."},{"location":"v1.1/resources/LocationsAndMaps/#origin","title":"Origin","text":"<p>Represents the starting point of the map in terms of its coordinates and orientation.</p> Field Message Type Description <code>x_m</code> <code>float</code> X-coordinate of the map origin in meters. <code>y_m</code> <code>float</code> Y-coordinate of the map origin in meters. <code>yaw_radians</code> <code>float</code> Orientation (yaw) of the map origin in radians."},{"location":"v1.1/resources/LocationsAndMaps/#mapimagefileinfo","title":"MapImageFileInfo","text":"<p>Contains metadata about the map image file for integrity verification.</p> Field Message Type Description <code>checksum</code> <code>uint32</code> CRC32C checksum of the map image file. <code>size</code> <code>int64</code> Size of the map image file in bytes."},{"location":"v1.1/resources/LocationsAndMaps/#signedurl","title":"SignedURL","text":"<p>Represents a signed URL for file access with expiration.</p> Field Message Type Description <code>url</code> <code>string</code> The signed URL for file access. <code>expires_at</code> <code>Timestamp</code> Timestamp when the signed URL expires."},{"location":"v1.1/resources/LocationsAndMaps/#json-response-example_2","title":"JSON Response Example","text":"JSON <pre><code>  {\n    \"map\": {\n      \"mapId\": \"map-001\",\n      \"createdTime\": \"2025-03-28T12:00:00Z\",\n      \"modifiedTime\": \"2025-04-01T09:45:00Z\",\n      \"displayName\": \"Office Floor Plan\",\n      \"annotation\": {\n        \"annotationId\": \"annot-001\",\n        \"displayName\": \"Office Zones\",\n        \"createdTime\": \"2025-03-30T10:15:00Z\",\n        \"destinations\": {\n          \"Reception\": {\n            \"destinationId\": \"Reception\",\n            \"displayName\": \"Reception Desk\"\n          }\n        }\n      },\n      \"imageDownloadInfo\": {\n        \"fileInfo\": {\n          \"checksum\": 1234567890,\n          \"size\": 2048576\n        },\n        \"downloadUrl\": {\n          \"url\": \"https://storage.googleapis.com/maps/map-001.png?signature=...\",\n          \"expiresAt\": \"2025-04-01T12:00:00Z\"\n        }\n      },\n      \"origin\": {\n        \"xM\": 0.0,\n        \"yM\": 0.0,\n        \"yawRadians\": 0.0\n      },\n      \"resolution\": 0.05\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/LocationsAndMaps/#errors_2","title":"Errors","text":"ErrorCode Description <code>NOT_FOUND</code> The map with the specified ID does not exist."},{"location":"v1.1/resources/LocationsAndMaps/#switchmap","title":"SwitchMap","text":"<p>Switch the robot's current map to a specified map. </p> <p>The request must specify the floor level and section index of the desired map. </p>"},{"location":"v1.1/resources/LocationsAndMaps/#request_3","title":"Request","text":""},{"location":"v1.1/resources/LocationsAndMaps/#robot_id-string-required_1","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that will switch maps.</p>"},{"location":"v1.1/resources/LocationsAndMaps/#map_selector-mapselector-required","title":"map_selector <code>MapSelector</code> <code>required</code>","text":"<p>Specifies which map to switch to.</p> Field Message Type Description <code>floor_level</code> <code>int32</code> Positive integer floor level begins at 1. <code>section_index</code> <code>int32</code> Non-negative integer section index begins at 0."},{"location":"v1.1/resources/LocationsAndMaps/#json-request-example_3","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robot_id\": \"pennybot-abc123\",\n    \"map_selector\": {\n      \"floor_level\": 1,\n      \"section_index\": 0\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/LocationsAndMaps/#response_3","title":"Response","text":""},{"location":"v1.1/resources/LocationsAndMaps/#map_id-string","title":"map_id <code>string</code>","text":"<p>The ID of the new map that the robot is now using.</p>"},{"location":"v1.1/resources/LocationsAndMaps/#json-response-example_3","title":"JSON Response Example","text":"JSON <pre><code>  {\n    \"map_id\": \"map-lobby-001\"\n  }\n</code></pre>"},{"location":"v1.1/resources/LocationsAndMaps/#errors_3","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> No matching map found for the specified floor level and section index. <code>NOT_FOUND</code> The robot with the specified ID does not exist."},{"location":"v1.1/resources/Mission/","title":"Mission","text":"<p>Missions are atomic units of behavior that define a robot's high-level actions. This API enables users to control robot behavior\u2014from simple navigation tasks to complex, conditional workflows.</p>"},{"location":"v1.1/resources/Mission/#createmission","title":"CreateMission","text":"<p>Send a robot on a mission of specified type.  </p>"},{"location":"v1.1/resources/Mission/#request","title":"Request","text":""},{"location":"v1.1/resources/Mission/#robot_id-string-required","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that will receive this command.</p>"},{"location":"v1.1/resources/Mission/#mission-mission-required","title":"mission <code>Mission</code> <code>required</code>","text":"<p>Universal wrapper for mission types. Only one mission type may be set at a time.</p> Field (oneof) Message Type Description <code>base_mission</code> <code>BaseMission</code> Base missions are specific to the Base units. <code>servi_mission</code> <code>servi.Mission</code> Servi missions are specific to the Servi robot family.  Refer to Servi for how to create and send a servi mission. <code>carti_mission</code> <code>carti.Mission</code> Carti missions are specific to the Carti robot family. Refer to Carti for how to create and send a carti mission."},{"location":"v1.1/resources/Mission/#basemission","title":"<code>BaseMission</code>","text":"<p>Use the <code>base_mission</code> field to send a mission to a Base unit. Current API version supports 2 types of base missions.</p> Field (oneof) Message Type Description <code>navigate_mission</code> <code>NavigateMission</code> Create a base mission of type <code>Navigate</code>. <code>navigate_auto_mission</code> <code>NavigateAutoMission</code> Create a base mission of type <code>NavigateAuto</code>."},{"location":"v1.1/resources/Mission/#navigatemission","title":"<code>NavigateMission</code>","text":"<p>A mission consisting of a single, explicitly defined goal.</p> Field Message Type Description <code>goal</code> <code>Goal</code><code>required</code> The target destination for the mission."},{"location":"v1.1/resources/Mission/#navigateautomission","title":"<code>NavigateAutoMission</code>","text":"<p>A mission that automatically selects the first unoccupied and unclaimed goal from the provided list, preferring goals with lower index values.</p> <p>For example, when sending a robot to one of several possible goals <code>[T1, T2, T3]</code>, it will first check if <code>T1</code> is unoccupied and unclaimed, then <code>T2</code>, and finally <code>T3</code>. If all goals are occupied (other robot is already present) or claimed (other robot is already en route to the destination), the mission will fail.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code><code>required</code> The list of target destinations for the mission."},{"location":"v1.1/resources/Mission/#json-request-example","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"robot-001\",\n    \"mission\": {\n      \"baseMission\": {\n        \"navigateMission\": {\n          \"goal\": {\n            \"pose\": {\n              \"xMeters\": 2.5,\n              \"yMeters\": 3.0,\n              \"headingRadians\": 1.57\n            }\n          }\n        }\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/Mission/#response","title":"Response","text":""},{"location":"v1.1/resources/Mission/#mission_id-string","title":"mission_id <code>string</code>","text":"<p>The ID of the mission created. </p>"},{"location":"v1.1/resources/Mission/#json-response-example","title":"JSON Response Example","text":"JSON <pre><code>  {\n    \"missionId\": \"cbd47ab1-df21-479e-9f72-677b81ab55b0\"\n  }\n</code></pre>"},{"location":"v1.1/resources/Mission/#errors","title":"Errors","text":"ErrorCode Description <code>FAILED_PRECONDITION</code> The robot is already executing another mission. <code>CreateMission</code> is only valid if there is no running mission on the target robot, with its state in one of the terminal states, i.e., Cancelled, Succeeded, Failed, Default <code>INVALID_ARGUMENT</code> The client supplied a request with invalid format. This covers sending empty requests, invalid goals, goals that do not match mission type, and other format errors. Client should update their usage to have correctly formatted requests with valid goals for the missions as defined in documentation. <code>INTERNAL</code> The request failed to execute due to internal error in mission system. Client should retry creating the mission. <code>DEADLINE_EXCEEDED</code> The request was sent internally, but timed out waiting for confirmation response of request being accepted. Client should retry creating the mission."},{"location":"v1.1/resources/Mission/#appendmission","title":"AppendMission","text":"<p>Appends a mission to the end of the mission queue. Use this when a mission is currently running; otherwise, prefer CreateMission.  Missions are executed in the order they are appended.</p>"},{"location":"v1.1/resources/Mission/#request-response","title":"Request / Response","text":"<p>Note</p> <p>AppendMission request and response message types are the same as CreateMission. See CreateMission JSON Examples.</p>"},{"location":"v1.1/resources/Mission/#errors_1","title":"Errors","text":"ErrorCode Description <code>FAILED_PRECONDITION</code> There is no mission in the mission queue. Client should first create the initial mission, and only use Append for queuing additional missions. <code>INVALID_ARGUMENT</code> The client supplied a request with invalid format. This covers sending empty requests, invalid goals, goals that do not match mission type, and other format errors. Client should update their usage to have correctly formatted requests with valid goals for the missions as defined in documentation. <code>INTERNAL</code> The request failed to execute due to internal error in mission system. Client should retry appending the mission. <code>DEADLINE_EXCEEDED</code> The request was sent internally, but timed out waiting for confirmation response of request being accepted. Client should retry appending the mission."},{"location":"v1.1/resources/Mission/#updatemission","title":"UpdateMission","text":"<p>Issues a command to control or update the current mission (e.g., pause, cancel).</p> <p>Warning</p> <p>We currently do not support updating missions in mission queue.  Attempting to send UpdateMission command to a queued mission will result in <code>NOT_FOUND</code> error.</p>"},{"location":"v1.1/resources/Mission/#request_1","title":"Request","text":""},{"location":"v1.1/resources/Mission/#robot_id-string-required_1","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that will receive this command.</p>"},{"location":"v1.1/resources/Mission/#mission_command-missioncommand-required","title":"mission_command <code>MissionCommand</code> <code>required</code>","text":"<p>Command to update the state of an active mission.</p> Field Message Type Description <code>mission_id</code> <code>string</code> <code>required</code> The ID of the mission to control. <code>command</code> <code>Command</code> enum <code>required</code> Command to update the state of an active mission."},{"location":"v1.1/resources/Mission/#command-enum","title":"Command <code>enum</code>","text":"Name Number Description COMMAND_UNKNOWN 0 Default value. This should never be used explicitly.  It means the <code>command</code> field is not set COMMAND_CANCEL 1 Cancel this mission. COMMAND_PAUSE 2 Pause this mission. COMMAND_RESUME 3 Resume a paused mission. COMMAND_FINISH 4 Mark the mission as completed."},{"location":"v1.1/resources/Mission/#json-request-example_1","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robot_id\": \"pennybot-abc123\",\n    \"mission_command\": {\n      \"mission_id\": \"f842c8ac-62de-412e-90fb-bf37022db2f4\",\n      \"command\": \"COMMAND_PAUSE\"\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/Mission/#response_1","title":"Response","text":"<p>(No fields defined)</p>"},{"location":"v1.1/resources/Mission/#json-response-example_1","title":"JSON Response Example","text":"JSON <pre><code>  {}\n</code></pre>"},{"location":"v1.1/resources/Mission/#errors_2","title":"Errors","text":"ErrorCode Description <code>FAILED_PRECONDITION</code> The robot is either not on a mission, or the command is invalid for the robot's current state. For example, mission in terminal state (Cancelled, Succeeded, Failed) can't be updated. <code>INVALID_ARGUMENT</code> The client supplied a request with invalid format. This covers sending empty requests, invalid commands, incorrect mission ID, and other format errors. Client should update their usage to have correctly formatted requests with valid commands, and ensure the mission id matches the currently running mission. <code>INTERNAL</code> The request failed to execute due to internal error in mission system. Client should retry appending the mission. <code>DEADLINE_EXCEEDED</code> The request was sent internally, but timed out waiting for confirmation response of request being accepted. Client should retry appending the mission."},{"location":"v1.1/resources/Mission/#subscribemissionstatus","title":"SubscribeMissionStatus","text":"<p>A server side streaming RPC endpoint to get updates on the robot's mission state. Upon subscription, the latest known mission state is sent immediately. Subsequent updates are streamed as the state changes. </p>"},{"location":"v1.1/resources/Mission/#request_2","title":"Request","text":""},{"location":"v1.1/resources/Mission/#selector-robotselector-required","title":"selector <code>RobotSelector</code> <code>required</code>","text":"<p><code>RobotSelector</code> is used to select specific robots.   It supports selection by a list of robot IDs OR all robots at a given location.</p> Field Message Type Description <code>robot_ids</code> <code>RobotIDs</code> Selects robots by their specific IDs.  Example: <code>[\"pennybot-123abc\", \"pennybot-abc123\"]</code> <code>location_id</code> <code>string</code> Selects all robots at the specified location."},{"location":"v1.1/resources/Mission/#json-request-example_2","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"selector\": {\n      \"robot_ids\": {\n        \"ids\": [\"pennybot-abc123\", \"pennybot-123abc\"]\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/Mission/#response_2","title":"Response","text":"<p>This endpoint returns a stream of messages in response.  Each message includes:</p>"},{"location":"v1.1/resources/Mission/#eventmetadata","title":"<code>EventMetadata</code>","text":"Field Message Type Description <code>timestamp</code> <code>Timestamp</code> The time when the event was recorded. <code>sequence_number</code> <code>int64</code> An incremental sequence number generated by the robot.The sequence number should never be negative and can be reset to 0.i.e. sequence is valid if it is larger than the previous number or 0."},{"location":"v1.1/resources/Mission/#robot_id-string","title":"robot_id <code>string</code>","text":"<p>The robotID the message is associated with. </p>"},{"location":"v1.1/resources/Mission/#missionstates","title":"<code>MissionStates</code>","text":"Field Message Type Description <code>missions</code> repeated <code>MissionState</code> List of all missions assigned to the robot, in order from first to last assigned mission. <code>current_mission_index</code> <code>int32</code> Index of the currently active mission in the missions list. -1 if no mission is currently active."},{"location":"v1.1/resources/Mission/#missionstate","title":"<code>MissionState</code>","text":"Field Message Type Description <code>mission_id</code> <code>string</code> Unique identifier for the mission. <code>state</code> <code>State</code> enum Current lifecycle state of the mission. <code>goals</code> repeated <code>Goal</code> All goals associated with the mission, in the order the request was given. <code>current_goal_index</code> <code>int32</code> Index of the currently active goal in the goals list. <code>mission_feedback</code> <code>MissionFeedback</code> Latest feedback for the mission. <code>mission_type</code> <code>MissionType</code> Type of the mission. <code>owner</code> <code>string</code> Owner of the mission (e.g., \"touchscreen\", \"api\", etc.)."},{"location":"v1.1/resources/Mission/#state-enum","title":"State <code>enum</code>","text":"Name Number Description STATE_UNKNOWN 0 Default value. It means the <code>state</code> field is not returned. STATE_DEFAULT 1 Initial state when no mission has been run (e.g., feedback is empty). STATE_RUNNING 2 The mission is actively running. STATE_PAUSED 3 The mission is paused. STATE_CANCELED 4 The mission was canceled before completion. STATE_SUCCEEDED 5 The mission completed successfully. STATE_FAILED 6 The mission encountered an error or failure."},{"location":"v1.1/resources/Mission/#missionfeedback","title":"MissionFeedback","text":"<p>Provides mission-specific runtime information.</p> Field (oneof) Message Type Description <code>base_feedback</code> <code>BaseFeedback</code> Feedback specific to Base unit mission types. <code>servi_feedback</code> <code>servi.Feedback</code> Feedback specific to Servi missions. <code>carti_feedback</code> <code>carti.Feedback</code> Feedback specific to Carti missions."},{"location":"v1.1/resources/Mission/#missiontype","title":"MissionType","text":"<p>Defines the different types of missions that can be executed.</p> Field (oneof) Message Type Description <code>base_type</code> <code>BaseType</code> enum Base-specific mission types. <code>servi_type</code> <code>servi.ServiType</code> enum Servi-specific mission types. <code>carti_type</code> <code>carti.CartiType</code> enum Carti-specific mission types."},{"location":"v1.1/resources/Mission/#basefeedback","title":"BaseFeedback","text":"Field Message Type Description <code>status</code> <code>Status</code> enum Current feedback status of the robot."},{"location":"v1.1/resources/Mission/#servifeedback-enum","title":"servi.Feedback <code>enum</code>","text":"Name Number Description STATUS_UNKNOWN 0 Default value. It means <code>status</code> field is not returned. STATUS_NAVIGATING 1 The robot is currently navigating to its goal. STATUS_ARRIVED 2 The robot has arrived at a goal. STATUS_DOCKING 3 The robot is performing a docking maneuver. STATUS_UNDOCKING 4 The robot is performing an undocking maneuver."},{"location":"v1.1/resources/Mission/#cartifeedback-enum","title":"carti.Feedback <code>enum</code>","text":"Name Number Description STATUS_UNKNOWN 0 Default value. It means <code>status</code> field is not returned. STATUS_NAVIGATING 1 The robot is currently navigating to its goal. STATUS_ARRIVED 2 The robot has arrived at a goal. STATUS_DOCKING 3 The robot is performing a docking maneuver. STATUS_UNDOCKING 4 The robot is performing an undocking maneuver."},{"location":"v1.1/resources/Mission/#basetype-enum","title":"BaseType <code>enum</code>","text":"Name Number Description BASE_TYPE_UNKNOWN 0 Default value for base type. BASE_TYPE_NAVIGATE 1 A single navigation mission with a predefined goal. BASE_TYPE_NAVIGATE_AUTO 2 An automated navigation mission that selects the best available goal from a list."},{"location":"v1.1/resources/Mission/#serviservitype-enum","title":"servi.ServiType <code>enum</code>","text":"Name Number Description SERVI_TYPE_UNKNOWN 0 Default value for servi type. SERVI_TYPE_SERVING 1 A serving mission that navigates to goals, stopping until weight is removed. SERVI_TYPE_SERVING_PATROL 2 A serving patrol mission that continuously loops until all weight is removed. SERVI_TYPE_BUSSING 3 A bussing mission that navigates to goals, stopping until weight is added. SERVI_TYPE_BUSSING_PATROL 4 A bussing patrol mission that continuously loops until weight exceeds threshold. SERVI_TYPE_NAVIGATE 5 A single navigation mission with a predefined goal. SERVI_TYPE_NAVIGATE_AUTO 6 An automated navigation mission that selects the first available goal from a list."},{"location":"v1.1/resources/Mission/#carticartitype-enum","title":"carti.CartiType <code>enum</code>","text":"Name Number Description CARTI_TYPE_UNKNOWN 0 Default value for carti type. CARTI_TYPE_TRAVERSE 1 A traverse mission that follows a sequence of goals. CARTI_TYPE_TRAVERSE_PATROL 2 A traverse patrol mission that follows a sequence of goals on loops. CARTI_TYPE_NAVIGATE 3 A single navigation mission with a predefined goal. CARTI_TYPE_NAVIGATE_AUTO 4 An automated navigation mission that selects the first available goal from a list."},{"location":"v1.1/resources/Mission/#status-enum","title":"Status <code>enum</code>","text":"Name Number Description STATUS_UNKNOWN 0 Default value. It means <code>status</code> field is not returned. STATUS_NAVIGATING 1 The robot is currently navigating to its target."},{"location":"v1.1/resources/Mission/#json-response-example_2","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"metadata\": {\n    \"timestamp\": \"2025-04-01T15:30:00Z\",\n    \"sequenceNumber\": 128\n  },\n  \"robot_id\": \"pennybot-abc123\",\n  \"mission_states\": {\n    \"missions\": [\n      {\n        \"mission_id\": \"d6637a14-5f6b-43f6-bd86-cc1871a8322e\",\n        \"state\": \"STATE_RUNNING\",\n        \"goals\": [\n          {\n            \"destinationId\": \"pickup_zone\"\n          },\n          {\n            \"pose\": {\n              \"xMeters\": 4.2,\n              \"yMeters\": 7.8,\n              \"headingRadians\": 1.57\n            }\n          }\n        ],\n        \"current_goal_index\": 1,\n        \"mission_feedback\": {\n          \"baseFeedback\": {\n            \"status\": \"STATUS_NAVIGATING\"\n          }\n        },\n        \"mission_type\": {\n          \"baseType\": \"BASE_TYPE_NAVIGATE\"\n        },\n        \"owner\": \"api\"\n      }\n    ],\n    \"current_mission_index\": 0\n  }\n}\n</code></pre>"},{"location":"v1.1/resources/Mission/#errors_3","title":"Errors","text":"ErrorCode Description <code>PERMISSION_DENIED</code> Attempting to request status for a <code>robot_id</code> or <code>location_id</code> you don't own.  Tip: check the spelling of all <code>robot_id</code> or <code>location_id</code> values. <code>INVALID_ARGUMENT</code> One or more request parameters are malformed or logically incorrect.  Example: Using an invalid robot ID format."},{"location":"v1.1/resources/Mission/#chargerobot","title":"ChargeRobot","text":"<p><code>ChargeRobot</code> is a special type of mission. Use this command to instruct the robot to begin charging, regardless of its current battery level. This command is only supported on robots equipped with a contact-based charging dock. You can use <code>SubscribeBatteryStatus</code> to monitor the charging process. </p>"},{"location":"v1.1/resources/Mission/#request_3","title":"Request","text":""},{"location":"v1.1/resources/Mission/#robot_id-string-required_2","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that will receive this command.</p>"},{"location":"v1.1/resources/Mission/#json-request-example_3","title":"JSON Request Example","text":"JSON <pre><code>{\n  \"robot_id\": \"pennybot-abc123\"\n}\n</code></pre>"},{"location":"v1.1/resources/Mission/#response_3","title":"Response","text":""},{"location":"v1.1/resources/Mission/#mission_id-string_1","title":"mission_id <code>string</code>","text":"<p>The ID of the mission created. Since this command is a special type of mission, its execution state is also avaiable in response messages from <code>SubscribeMissionStatus</code>. </p>"},{"location":"v1.1/resources/Mission/#json-response-example_3","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"mission_id\": \"mission-xyz-001\"\n}\n</code></pre>"},{"location":"v1.1/resources/Mission/#errors_4","title":"Errors","text":"ErrorCode Description <code>FAILED_PRECONDITION</code> The robot is already executing a mission. The current mission must be canceled before issuing this command. <code>INTERNAL</code> The request failed to execute due to internal error in mission system. Client should retry creating the mission. <code>DEADLINE_EXCEEDED</code> The request was sent internally, but timed out waiting for confirmation response of request being accepted. Client should retry creating the mission."},{"location":"v1.1/resources/RestAPI/","title":"REST API","text":"<p>Warning</p> <ul> <li>This REST API currently supports a subset of our gRPC APIs and is under active development.</li> </ul> <p>A REST version of the unary gRPC endpoints are available.</p> <p>Note</p> <ul> <li>Refer to the translation table to see how a gRPC status code maps to a HTTP status code and vice versa.</li> <li>In cases of an error response (non-200 status code), the detailed error message along with the gRPC status code will be accessible under the <code>grpc-message</code> and <code>grpc-status</code> response headers.</li> <li>Schemas for request and response bodies are available both under the gRPC API section (since they share the same request/response body format) or under each endpoint (click on the \"Schema\" text shown in \"Request body\" and \"Responses\" section).</li> </ul> <p>To test out the APIs on Swagger, a valid JWT token has to be passed to the \"Authorize\" Button below. You can obtain one via the command below with a credentials JSON file.</p> <pre><code>curl -X POST https://api-auth.bearrobotics.ai/authorizeApiAccess \\\n    -H \"Content-Type: application/json\" \\\n    -d $(cat /path/to/credentials.json)'\n</code></pre> <p></p>"},{"location":"v1.1/resources/RobotStatus/","title":"Robot Status","text":"<p>Streaming endpoints that provide real-time updates on robot health, including battery levels, charging state, and connectivity.</p>"},{"location":"v1.1/resources/RobotStatus/#getrobotstatus","title":"GetRobotStatus","text":"<p>Get the latest robot state.</p> <p>Robot state includes connectivity and operational states.</p>"},{"location":"v1.1/resources/RobotStatus/#request","title":"Request","text":""},{"location":"v1.1/resources/RobotStatus/#robot_id-string-required","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot to get status for.</p>"},{"location":"v1.1/resources/RobotStatus/#json-request-example","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"pennybot-abc123\"\n  }\n</code></pre>"},{"location":"v1.1/resources/RobotStatus/#response","title":"Response","text":""},{"location":"v1.1/resources/RobotStatus/#robot_state-robotstate","title":"robot_state <code>RobotState</code>","text":"<p>The current robot state including connectivity, battery, emergency stop, mission, pose, and error information.</p> Field Message Type Description <code>connection</code> <code>RobotConnection</code> Connection state of the robot. <code>battery</code> <code>BatteryState</code> Battery state of the robot. <code>emergency_stop</code> <code>EmergencyStopState</code> Emergency stop state of the robot. <code>mission</code> <code>MissionState</code> Mission state of the robot. <code>pose</code> <code>Pose</code> Current pose of the robot. <code>error_codes</code> <code>ErrorCodes</code> Error codes returned by the robot. <code>typed_status</code> oneof Robot type-specific state information. Only one type may be set at a time."},{"location":"v1.1/resources/RobotStatus/#robotconnection","title":"RobotConnection","text":"<p>Represents the online connection state between the cloud and the robot.</p> Field Message Type Description <code>state</code> <code>State</code> enum Current connection state of the robot."},{"location":"v1.1/resources/RobotStatus/#batterystate","title":"BatteryState","text":"<p>Represents the state of the robot's battery system.</p> Field Message Type Description <code>charge_percent</code> <code>int32</code> State of charge, from 0 (empty) to 100 (fully charged). <code>state</code> <code>State</code> enum High-level charging state of the battery. <code>charge_method</code> <code>ChargeMethod</code> enum Method by which the robot is being charged."},{"location":"v1.1/resources/RobotStatus/#emergencystopstate","title":"EmergencyStopState","text":"<p>Represents the state of the robot's emergency stop system.</p> Field Message Type Description <code>emergency</code> <code>Emergency</code> enum Whether the software level emergency stop is engaged. <code>button_pressed</code> <code>Emergency</code> enum Whether the physical emergency stop button is engaged."},{"location":"v1.1/resources/RobotStatus/#errorcodes","title":"ErrorCodes","text":"<p>Represents the error codes returned by the robot.</p> Field Message Type Description <code>codes</code> repeated <code>string</code> List of error codes currently active on the robot."},{"location":"v1.1/resources/RobotStatus/#typed_status-oneof","title":"typed_status <code>oneof</code>","text":"<p>Robot type-specific state information. Only one type may be set at a time.</p> Field (oneof) Message Type Description <code>servi_state</code> <code>ServiState</code> Servi-specific robot state (only for Servi robots). <code>carti_state</code> <code>CartiState</code> Carti-specific robot state (only for Carti robots)."},{"location":"v1.1/resources/RobotStatus/#robotconnection-state-enum","title":"(RobotConnection) State <code>enum</code>","text":"Name Number Description STATE_UNKNOWN 0 Default value. It means the <code>state</code> field is not returned. STATE_CONNECTED 1 The robot is connected to Bear cloud services. STATE_DISCONNECTED 2 The robot is offline or unreachable from the cloud."},{"location":"v1.1/resources/RobotStatus/#batterystate-state-enum","title":"(BatteryState) State <code>enum</code>","text":"Name Number Description STATE_UNKNOWN 0 Default value. It means the <code>state</code> field is not returned. STATE_CHARGING 1 Battery is currently charging. STATE_DISCHARGING 2 Robot is not connected to a charger and is consuming battery power. STATE_FULL 3 Battery is fully charged while connected to a charger; no additional energy is being stored."},{"location":"v1.1/resources/RobotStatus/#chargemethod-enum","title":"ChargeMethod <code>enum</code>","text":"Name Number Description CHARGE_METHOD_UNKNOWN 0 Default value. It means the <code>charge_method</code> field is not returned. CHARGE_METHOD_NONE 1 No charging method is currently active or applicable. CHARGE_METHOD_WIRED 2 Charging via a wired connection. CHARGE_METHOD_CONTACT 3 Charging via contact-based interface (e.g., docking station)."},{"location":"v1.1/resources/RobotStatus/#emergency-enum","title":"Emergency <code>enum</code>","text":"Name Number Description EMERGENCY_UNKNOWN 0 Default value. It means the <code>emergency</code> field is not returned. EMERGENCY_ENGAGED 1 Triggers an emergency stop. Overrides and sets navigation-related velocity command to 0 to the motor. EMERGENCY_DISENGAGED 2 Wheels will resume acting upon software navigation commands."},{"location":"v1.1/resources/RobotStatus/#json-response-example","title":"JSON Response Example","text":"JSON <pre><code>  {\n    \"robotState\": {\n      \"connection\": {\n        \"state\": \"STATE_CONNECTED\"\n      },\n      \"battery\": {\n        \"chargePercent\": 85,\n        \"state\": \"STATE_CHARGING\",\n        \"chargeMethod\": \"CHARGE_METHOD_CONTACT\"\n      },\n      \"emergencyStop\": {\n        \"emergency\": \"EMERGENCY_DISENGAGED\",\n        \"buttonPressed\": \"EMERGENCY_DISENGAGED\"\n      },\n      \"mission\": {\n        \"missionId\": \"mission-123\",\n        \"state\": \"STATE_ACTIVE\",\n        \"goals\": [],\n        \"currentGoalIndex\": 0\n      },\n      \"pose\": {\n        \"xMeters\": 1.5,\n        \"yMeters\": 2.8,\n        \"headingRadians\": 0.78\n      },\n      \"errorCodes\": {\n        \"codes\": [\"E001\", \"E042\"]\n      },\n      \"serviState\": {\n        \"trayStates\": {\n          \"trayStates\": [\n            {\n              \"trayName\": \"top\",\n              \"loadState\": \"LOAD_STATE_LOADED\",\n              \"weightKg\": 2.5,\n              \"loadRatio\": 0.8\n            },\n            {\n              \"trayName\": \"middle\",\n              \"loadState\": \"LOAD_STATE_EMPTY\",\n              \"weightKg\": 0.0,\n              \"loadRatio\": 0.0\n            }\n          ]\n        }\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/RobotStatus/#errors","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> Invalid request parameters.  Tips: check that <code>robot_id</code> is not empty. <code>PERMISSION_DENIED</code> Attempting to get status for a <code>robot_id</code> you don't own.  Tip: check the spelling of the <code>robot_id</code> value. <code>INTERNAL</code> Communication failure with the robot."},{"location":"v1.1/resources/RobotStatus/#subscribebatterystatus","title":"SubscribeBatteryStatus","text":"<p>A server side streaming RPC endpoint to get battery state updates for the robot. Upon subscription, the latest battery state is sent immediately. Updates are streamed whenever the state changes.</p>"},{"location":"v1.1/resources/RobotStatus/#request_1","title":"Request","text":""},{"location":"v1.1/resources/RobotStatus/#selector-robotselector-required","title":"selector <code>RobotSelector</code> <code>required</code>","text":"<p><code>RobotSelector</code> is used to select specific robots.   It supports selection by a list of robot IDs OR all robots at a given location.</p> Field Message Type Description <code>robot_ids</code> <code>RobotIDs</code> Selects robots by their specific IDs.  Example: <code>[\"pennybot-123abc\", \"pennybot-abc123\"]</code> <code>location_id</code> <code>string</code> Selects all robots at the specified location."},{"location":"v1.1/resources/RobotStatus/#json-request-example_1","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"selector\": {\n      \"robot_ids\": {\n        \"ids\": [\"pennybot-abc123\", \"pennybot-123abc\"]\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/RobotStatus/#response_1","title":"Response","text":""},{"location":"v1.1/resources/RobotStatus/#metadata-eventmetadata","title":"metadata <code>EventMetadata</code>","text":"Field Message Type Description <code>timestamp</code> <code>Timestamp</code> The time when the event was recorded. <code>sequence_number</code> <code>int64</code> An incremental sequence number generated by the robot.The sequence number should never be negative and can be reset to 0.i.e. sequence is valid if it is larger than the previous number or 0."},{"location":"v1.1/resources/RobotStatus/#robot_id-string","title":"robot_id <code>string</code>","text":"<p>The robotID the message is associated with.</p>"},{"location":"v1.1/resources/RobotStatus/#batterystate_1","title":"BatteryState","text":"<p>Represents the state of the robot's battery system.</p> Field Message Type Description <code>charge_percent</code> <code>int32</code> State of charge, from 0 (empty) to 100 (fully charged). <code>state</code> <code>State</code> enum High-level charging state of the battery. <code>charge_method</code> <code>ChargeMethod</code> enum Method by which the robot is being charged."},{"location":"v1.1/resources/RobotStatus/#state-enum","title":"State <code>enum</code>","text":"Name Number Description STATE_UNKNOWN 0 Default value. It means the <code>state</code> field is not returned. STATE_CHARGING 1 Battery is currently charging. STATE_DISCHARGING 2 Robot is not connected to a charger and is consuming battery power. STATE_FULL 3 Battery is fully charged while connected to a charger; no additional energy is being stored."},{"location":"v1.1/resources/RobotStatus/#chargemethod-enum_1","title":"ChargeMethod <code>enum</code>","text":"Name Number Description CHARGE_METHOD_UNKNOWN 0 Default value. It means the <code>charge_method</code> field is not returned. CHARGE_METHOD_NONE 1 No charging method is currently active or applicable. CHARGE_METHOD_WIRED 2 Charging via a wired connection. CHARGE_METHOD_CONTACT 3 Charging via contact-based interface (e.g., docking station)."},{"location":"v1.1/resources/RobotStatus/#json-response-examples","title":"JSON Response Examples","text":"JSON <pre><code>{\n  \"metadata\": {\n    \"timestamp\": \"2025-04-01T16:45:00Z\",\n    \"sequenceNumber\": 112\n  },\n  \"robotId\": \"pennybot-123abc\",\n  \"batteryState\": {\n    \"chargePercent\": 78,\n    \"state\": \"STATE_CHARGING\",\n    \"chargeMethod\": \"CHARGE_METHOD_CONTACT\"\n  }\n}\n{\n  \"metadata\": {\n    \"timestamp\": \"2025-04-01T16:45:02Z\",\n    \"sequenceNumber\": 113\n  },\n  \"robotId\": \"pennybot-abc123\",\n  \"batteryState\": {\n    \"chargePercent\": 42,\n    \"state\": \"STATE_DISCHARGING\",\n    \"chargeMethod\": \"CHARGE_METHOD_NONE\"\n  }\n}\n</code></pre>"},{"location":"v1.1/resources/RobotStatus/#errors_1","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> Invalid request parameters.  Tips: check that <code>selector</code> is not null, <code>robot_ids</code> is not empty, or <code>location_id</code> is not empty. <code>NOT_FOUND</code> No robots found for the specified <code>location_id</code>. <code>PERMISSION_DENIED</code> Attempting to request status for a <code>robot_id</code> or <code>location_id</code> you don't own.  Tip: check the spelling of all <code>robot_id</code> or <code>location_id</code> values. <code>INTERNAL</code> Internal server error occurred while processing the request."},{"location":"v1.1/resources/RobotStatus/#subscriberobotstatus","title":"SubscribeRobotStatus","text":"<p>A server side streaming RPC endpoint to get the robot's connectivity and operational state. Upon subscription, the latest battery state is sent immediately. Updates are streamed as the robot's state changes.</p>"},{"location":"v1.1/resources/RobotStatus/#request_2","title":"Request","text":""},{"location":"v1.1/resources/RobotStatus/#selector-robotselector-required_1","title":"selector <code>RobotSelector</code> <code>required</code>","text":"<p><code>RobotSelector</code> is used to select specific robots.   It supports selection by a list of robot IDs OR all robots at a given location.</p> Field Message Type Description <code>robot_ids</code> <code>RobotIDs</code> Selects robots by their specific IDs.  Example: <code>[\"pennybot-123abc\", \"pennybot-abc123\"]</code> <code>location_id</code> <code>string</code> Selects all robots at the specified location."},{"location":"v1.1/resources/RobotStatus/#json-request-example_2","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"selector\": {\n      \"robot_ids\": {\n        \"ids\": [\"pennybot-abc123\", \"pennybot-123abc\"]\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/RobotStatus/#response_2","title":"Response","text":""},{"location":"v1.1/resources/RobotStatus/#metadata-eventmetadata_1","title":"metadata <code>EventMetadata</code>","text":"Field Message Type Description <code>timestamp</code> <code>Timestamp</code> The time when the event was recorded. <code>sequence_number</code> <code>int64</code> An incremental sequence number generated by the robot.The sequence number should never be negative and can be reset to 0.i.e. sequence is valid if it is larger than the previous number or 0."},{"location":"v1.1/resources/RobotStatus/#robot_id-string_1","title":"robot_id <code>string</code>","text":"<p>The robotID the message is associated with.</p>"},{"location":"v1.1/resources/RobotStatus/#robot_state-robotstate_1","title":"robot_state <code>RobotState</code>","text":"<p>The current robot state including connectivity, battery, emergency stop, mission, pose, and error information.</p> Field Message Type Description <code>connection</code> <code>RobotConnection</code> Connection state of the robot. <code>battery</code> <code>BatteryState</code> Battery state of the robot. <code>emergency_stop</code> <code>EmergencyStopState</code> Emergency stop state of the robot. <code>mission</code> <code>MissionState</code> Mission state of the robot. <code>pose</code> <code>Pose</code> Current pose of the robot. <code>error_codes</code> <code>ErrorCodes</code> Error codes returned by the robot. <code>typed_status</code> oneof Robot type-specific state information. Only one type may be set at a time."},{"location":"v1.1/resources/RobotStatus/#json-response-example_1","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"metadata\": {\n    \"timestamp\": \"2025-04-01T17:05:00Z\",\n    \"sequenceNumber\": 211\n  },\n  \"robotId\": \"pennybot-123abc\",\n  \"robotState\": {\n    \"connection\": {\n      \"state\": \"STATE_CONNECTED\"\n    },\n    \"battery\": {\n      \"chargePercent\": 75,\n      \"state\": \"STATE_CHARGING\",\n      \"chargeMethod\": \"CHARGE_METHOD_CONTACT\"\n    },\n    \"emergencyStop\": {\n      \"emergency\": \"EMERGENCY_DISENGAGED\",\n      \"buttonPressed\": \"EMERGENCY_DISENGAGED\"\n    },\n    \"mission\": {\n      \"missionId\": \"mission-456\",\n      \"state\": \"STATE_RUNNING\",\n      \"goals\": [\n        {\n          \"goal\": {\n            \"pose\": {\n              \"xMeters\": 5.2,\n              \"yMeters\": 3.1,\n              \"headingRadians\": 0.0\n            }\n          }\n        }\n      ],\n      \"currentGoalIndex\": 1\n    },\n    \"pose\": {\n      \"xMeters\": 2.1,\n      \"yMeters\": 1.8,\n      \"headingRadians\": 1.2\n    },\n    \"errorCodes\": {\n      \"codes\": [\"E001\", \"E042\"]\n    }\n  }\n}\n</code></pre>"},{"location":"v1.1/resources/RobotStatus/#errors_2","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> Invalid request parameters.  Tips: check that <code>selector</code> is not null, <code>robot_ids</code> is not empty, or <code>location_id</code> is not empty. <code>NOT_FOUND</code> No robots found for the specified <code>location_id</code>. <code>PERMISSION_DENIED</code> Attempting to request status for a <code>robot_id</code> or <code>location_id</code> you don't own.  Tip: check the spelling of all <code>robot_id</code> or <code>location_id</code> values. <code>INTERNAL</code> Internal server error occurred while processing the request."},{"location":"v1.1/resources/RobotStatus/#subscribeerrorcodes","title":"SubscribeErrorCodes","text":"<p>A server side streaming RPC endpoint to subscribe to error codes returned by the robot. Upon subscription, the latest known error codes are sent immediately. Updates are streamed when error codes change.</p>"},{"location":"v1.1/resources/RobotStatus/#request_3","title":"Request","text":""},{"location":"v1.1/resources/RobotStatus/#selector-robotselector-required_2","title":"selector <code>RobotSelector</code> <code>required</code>","text":"<p><code>RobotSelector</code> is used to select specific robots. It supports selection by a list of robot IDs OR all robots at a given location.</p> Field Message Type Description <code>robot_ids</code> <code>RobotIDs</code> Selects robots by their specific IDs.  Example: <code>[\"pennybot-123abc\", \"pennybot-abc123\"]</code> <code>location_id</code> <code>string</code> Selects all robots at the specified location."},{"location":"v1.1/resources/RobotStatus/#json-request-example_3","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"selector\": {\n      \"robotIds\": {\n        \"ids\": [\"pennybot-abc123\", \"pennybot-123abc\"]\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/RobotStatus/#response_3","title":"Response","text":""},{"location":"v1.1/resources/RobotStatus/#error_codes-mapstring-errorcodeswithmetadata","title":"error_codes <code>map&lt;string, ErrorCodesWithMetadata&gt;</code>","text":"<p>A mapping of error codes returned by individual robots. Each entry pairs a robot ID (key) with a corresponding error code and metadata. Note that each robot maintains its own metadata, so messages should be correlated if and only if they correspond to the same robot ID.</p>"},{"location":"v1.1/resources/RobotStatus/#errorcodeswithmetadata","title":"ErrorCodesWithMetadata","text":"Field Message Type Description <code>metadata</code> <code>EventMetadata</code> Metadata associated with the error codes. <code>codes</code> repeated <code>ErrorCode</code> The error codes reported by the robot."},{"location":"v1.1/resources/RobotStatus/#errorcode","title":"ErrorCode","text":"Field Message Type Description <code>code</code> <code>int32</code> Integer code indicating the type of error. Does not indicate severity. <code>severity</code> <code>Severity</code> enum Level of criticality of an error. <code>message</code> <code>string</code> Message about the error e.g. \"Up camera process error.\""},{"location":"v1.1/resources/RobotStatus/#severity-enum","title":"Severity <code>enum</code>","text":"Name Number Description SEVERITY_UNKNOWN 0 Default value. It means the <code>severity</code> field is not returned. SEVERITY_LOW 1 Low severity indicates an identified issue that is not visible. SEVERITY_MEDIUM 2 Medium severity indicates an identified issue that does not block operation. SEVERITY_HIGH 3 High severity indicates an identified issue that blocks operation."},{"location":"v1.1/resources/RobotStatus/#json-response-example_2","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"errorCodes\": {\n    \"pennybot-abc123\": {\n      \"metadata\": {\n        \"timestamp\": \"2025-04-01T17:10:00Z\",\n        \"sequenceNumber\": 215\n      },\n      \"codes\": [\n        {\n          \"code\": 1001,\n          \"severity\": \"SEVERITY_MEDIUM\",\n          \"message\": \"Low battery warning\"\n        },\n        {\n          \"code\": 2042,\n          \"severity\": \"SEVERITY_HIGH\",\n          \"message\": \"Camera connection lost\"\n        }\n      ]\n    },\n    \"pennybot-123abc\": {\n      \"metadata\": {\n        \"timestamp\": \"2025-04-01T17:10:00Z\",\n        \"sequenceNumber\": 216\n      },\n      \"codes\": []\n    }\n  }\n}\n</code></pre>"},{"location":"v1.1/resources/RobotStatus/#errors_3","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> Invalid request parameters.  Tips: check that <code>selector</code> is not null, <code>robot_ids</code> is not empty, or <code>location_id</code> is not empty. <code>NOT_FOUND</code> No robots found for the specified <code>location_id</code>. <code>PERMISSION_DENIED</code> Attempting to request error codes for a <code>robot_id</code> or <code>location_id</code> you don't own.  Tip: check the spelling of all <code>robot_id</code> or <code>location_id</code> values. <code>INTERNAL</code> Internal server error occurred while processing the request."},{"location":"v1.1/resources/RobotStatus/#subscribenetworkstatus","title":"SubscribeNetworkStatus","text":"<p>A server side streaming RPC endpoint to subscribe to network status updates for robots. Upon subscription, the latest known network states are sent immediately. Updates are streamed when any network state changes.</p>"},{"location":"v1.1/resources/RobotStatus/#request_4","title":"Request","text":""},{"location":"v1.1/resources/RobotStatus/#selector-robotselector-required_3","title":"selector <code>RobotSelector</code> <code>required</code>","text":"<p><code>RobotSelector</code> is used to select specific robots. It supports selection by a list of robot IDs OR all robots at a given location.</p> Field Message Type Description <code>robot_ids</code> <code>RobotIDs</code> Selects robots by their specific IDs.  Example: <code>[\"pennybot-123abc\", \"pennybot-abc123\"]</code> <code>location_id</code> <code>string</code> Selects all robots at the specified location."},{"location":"v1.1/resources/RobotStatus/#json-request-example_4","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"selector\": {\n      \"robotIds\": {\n        \"ids\": [\"pennybot-abc123\", \"pennybot-123abc\"]\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/RobotStatus/#response_4","title":"Response","text":""},{"location":"v1.1/resources/RobotStatus/#network_states-mapstring-networkstatewithmetadata","title":"network_states <code>map&lt;string, NetworkStateWithMetadata&gt;</code>","text":"<p>A mapping of network states reported by individual robots. Each entry pairs a robot ID (key) with its corresponding network state and metadata. Note that each robot maintains its own metadata, so messages should be correlated if and only if they correspond to the same robot ID.</p>"},{"location":"v1.1/resources/RobotStatus/#networkstatewithmetadata","title":"NetworkStateWithMetadata","text":"Field Message Type Description <code>metadata</code> <code>EventMetadata</code> Metadata associated with the network state. <code>connected_wifi</code> <code>Wifi</code> optional Current network connection of the robot. If the field is not set, it indicates that the robot is not connected to any Wi-Fi networks."},{"location":"v1.1/resources/RobotStatus/#wifi","title":"Wifi","text":"<p>Represents the Wifi connection of a robot.</p> Field Message Type Description <code>ssid</code> <code>string</code> SSID of the Wi-Fi network (not necessarily unique). <code>signal_level_dbm</code> <code>int32</code> Signal level of the Wifi in dBm. <code>link_quality</code> <code>int32</code> Link quality of the Wifi. Ranges from 0 to 70, where 70 is highest quality. <code>security</code> <code>Security</code> enum Security requirements for the network."},{"location":"v1.1/resources/RobotStatus/#security-enum","title":"Security <code>enum</code>","text":"Name Number Description SECURITY_UNKNOWN 0 Default value. It means the <code>security</code> field is not returned. SECURITY_UNSECURED 1 Unsecured network that do not require any authentication. SECURITY_PASSWORD_SECURED 2 Password secured network. e.g. WPA2, WPA3 and WEP networks SECURITY_USERNAME_PASSWORD_SECURED 3 Login required network. i.e. Enterprise networks"},{"location":"v1.1/resources/RobotStatus/#errors_4","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> Invalid request parameters.  Tips: check that <code>selector</code> is not null, <code>robot_ids</code> is not empty, or <code>location_id</code> is not empty. <code>NOT_FOUND</code> No robots found for the specified <code>location_id</code>. <code>PERMISSION_DENIED</code> Attempting to request network status for a <code>robot_id</code> or <code>location_id</code> you don't own.  Tip: check the spelling of all <code>robot_id</code> or <code>location_id</code> values. <code>INTERNAL</code> Internal server error occurred while processing the request."},{"location":"v1.1/resources/RobotStatus/#json-response-example_3","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"networkStates\": {\n    \"pennybot-abc123\": {\n      \"metadata\": {\n        \"timestamp\": \"2025-04-01T16:00:00Z\",\n        \"sequenceNumber\": 105\n      },\n      \"connectedWifi\": {\n        \"ssid\": \"BearRobotics-Office\",\n        \"signalLevelDbm\": -45,\n        \"linkQuality\": 65,\n        \"security\": \"SECURITY_PASSWORD_SECURED\"\n      }\n    },\n    \"pennybot-123abc\": {\n      \"metadata\": {\n        \"timestamp\": \"2025-04-01T16:00:00Z\",\n        \"sequenceNumber\": 106\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"v1.1/resources/RobotSystem/","title":"Robot System","text":"<p>System-level operations and information for robots.</p>"},{"location":"v1.1/resources/RobotSystem/#getrobotsysteminfo","title":"GetRobotSystemInfo","text":"<p>Get the overall robot system information, including software version, robot family, robot ID, and display name.</p>"},{"location":"v1.1/resources/RobotSystem/#request","title":"Request","text":""},{"location":"v1.1/resources/RobotSystem/#robot_id-string-required","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot to retrieve system information for.</p>"},{"location":"v1.1/resources/RobotSystem/#json-request-example","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"pennybot-abc123\"\n  }\n</code></pre>"},{"location":"v1.1/resources/RobotSystem/#response","title":"Response","text":""},{"location":"v1.1/resources/RobotSystem/#system_info-systeminfo","title":"system_info <code>SystemInfo</code>","text":"<p>Contains system-level information about the robot.</p> Field Message Type Description <code>software_version</code> <code>string</code> The distribution version currently installed and running on the robot. <code>robot_family</code> <code>RobotFamily</code> enum The classification or family of the robot. <code>robot_id</code> <code>string</code> Unique identifier for the robot. <code>display_name</code> <code>string</code> A user-friendly name for the robot, typically used for display purposes."},{"location":"v1.1/resources/RobotSystem/#robotfamily-enum","title":"RobotFamily <code>enum</code>","text":"Name Number Description ROBOT_FAMILY_UNKNOWN 0 Default value. It means the <code>robot_family</code> field is not returned. ROBOT_FAMILY_SERVI 1 Servi robot family. ROBOT_FAMILY_SERVI_MINI 2 Servi Mini robot family. ROBOT_FAMILY_SERVI_PLUS 3 Servi Plus robot family. ROBOT_FAMILY_SERVI_LIFT 4 Servi Lift robot family. ROBOT_FAMILY_CARTI_100 5 Carti 100 robot family. ROBOT_FAMILY_CARTI_600 6 Carti 600 robot family."},{"location":"v1.1/resources/RobotSystem/#json-response-example","title":"JSON Response Example","text":"JSON <pre><code>  {\n    \"systemInfo\": {\n      \"softwareVersion\": \"servi-24.03\",\n      \"robotFamily\": \"ROBOT_FAMILY_SERVI_PLUS\",\n      \"robotId\": \"pennybot-abc123\",\n      \"displayName\": \"Main Kitchen\"\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/RobotSystem/#errors","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> Invalid request parameters.  Tips: check that <code>robot_id</code> is not empty. <code>PERMISSION_DENIED</code> Attempting to retrieve system information for a <code>robot_id</code> you don't own.  Tip: check the spelling of the <code>robot_id</code> value. <code>INTERNAL</code> Internal server error occurred while processing the request."},{"location":"v1.1/resources/RobotSystem/#runsystemcommand","title":"RunSystemCommand","text":"<p>Execute a OS-level command on a robot.</p> <p>Note</p> <p>When rebooting the robot, a response will return immediately to acknowledge the request but may take several minutes before the robot reconnects.</p>"},{"location":"v1.1/resources/RobotSystem/#request_1","title":"Request","text":""},{"location":"v1.1/resources/RobotSystem/#robot_id-string-required_1","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that will receive this command.</p>"},{"location":"v1.1/resources/RobotSystem/#system_command-systemcommand-required","title":"system_command <code>SystemCommand</code> <code>required</code>","text":"<p>The system command to execute on the robot.</p>"},{"location":"v1.1/resources/RobotSystem/#systemcommand","title":"SystemCommand","text":"Field (oneof) Message Type Description <code>reboot</code> <code>Reboot</code> Reboot the robot with specified type."},{"location":"v1.1/resources/RobotSystem/#reboot","title":"Reboot","text":"Field Message Type Description <code>type</code> <code>Type</code> enum The type of reboot to perform."},{"location":"v1.1/resources/RobotSystem/#type-enum","title":"Type <code>enum</code>","text":"Name Number Description TYPE_UNKNOWN 0 Default value. This should never be used explicitly. TYPE_SOFTWARE_ONLY 1 Perform an OS-level reboot without powering off hardware devices. TYPE_WITH_HARDWARE 2 Perform a full power-cycle including hardware devices."},{"location":"v1.1/resources/RobotSystem/#json-request-example_1","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"pennybot-abc123\",\n    \"systemCommand\": {\n      \"reboot\": {\n        \"type\": \"TYPE_SOFTWARE_ONLY\"\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/RobotSystem/#response_1","title":"Response","text":"<p>(No fields defined)</p>"},{"location":"v1.1/resources/RobotSystem/#json-response-example_1","title":"JSON Response Example","text":"JSON <pre><code>  {}\n</code></pre>"},{"location":"v1.1/resources/RobotSystem/#errors_1","title":"Errors","text":"ErrorCode Description <code>PERMISSION_DENIED</code> Attempting to execute system command for a <code>robot_id</code> you don't own.  Tip: check the spelling of the <code>robot_id</code> value. <code>NOT_FOUND</code> The specified robot ID does not exist or is not accessible. <code>INVALID_ARGUMENT</code> The system command is invalid or not supported. <code>INTERNAL</code> The request failed to execute due to internal error. Client should retry the command."},{"location":"v1.1/resources/Servi/","title":"Servi","text":"<p>These endpoints and their message types are only available for the Servi robot family. Attempting to run a Servi commands on a non Servi robot will result in an INVALID_ARGUMENT error.</p>"},{"location":"v1.1/resources/Servi/#createmission","title":"CreateMission","text":"<p>Use the shared <code>CreateMission</code> endpoint to send missions for Servi robots. Servi-specific missions must be sent using the appropriate request message format. </p> <p>Note</p> <p>When sending a Servi mission, <code>servi.Feedback</code> and <code>ServiType</code> are returned in <code>SubscribeMissionStatus</code> response message.</p>"},{"location":"v1.1/resources/Servi/#servifeedback-enum","title":"servi.Feedback <code>enum</code>","text":"Name Number Description STATUS_UNKNOWN 0 Default value. It means <code>status</code> field is not returned. STATUS_NAVIGATING 1 The robot is currently navigating to its goal. STATUS_ARRIVED 2 The robot has arrived at a goal. STATUS_DOCKING 3 The robot is performing a docking maneuver. STATUS_UNDOCKING 4 The robot is performing an undocking maneuver."},{"location":"v1.1/resources/Servi/#servitype-enum","title":"ServiType <code>enum</code>","text":"Name Number Description SERVI_TYPE_UNKNOWN 0 Default value for servi type. SERVI_TYPE_SERVING 1 A serving mission that navigates to goals, stopping until weight is removed. SERVI_TYPE_SERVING_PATROL 2 A serving patrol mission that continuously loops until all weight is removed. SERVI_TYPE_BUSSING 3 A bussing mission that navigates to goals, stopping until weight is added. SERVI_TYPE_BUSSING_PATROL 4 A bussing patrol mission that continuously loops until weight exceeds threshold. SERVI_TYPE_NAVIGATE 5 A single navigation mission with a predefined goal. SERVI_TYPE_NAVIGATE_AUTO 6 An automated navigation mission that selects the best available goal from a list."},{"location":"v1.1/resources/Servi/#request","title":"Request","text":""},{"location":"v1.1/resources/Servi/#robot_id-string-required","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot that will receive this command.</p>"},{"location":"v1.1/resources/Servi/#mission-mission-required","title":"mission <code>Mission</code> <code>required</code>","text":"<p>Universal wrapper for mission types. Only one mission type may be set at a time.</p> Field (oneof) Message Type Description <code>base_mission</code> <code>BaseMission</code> Base missions are applicable to all robot families.  Refer to Mission for how to create and send a base mission. <code>servi_mission</code> <code>servi.Mission</code> Servi missions are specific to the Servi robot family. <code>carti_mission</code> <code>carti.Mission</code> Carti missions are specific to the Carti robot family. Refer to Carti for how to create and send a carti mission."},{"location":"v1.1/resources/Servi/#servi_mission-servimission","title":"servi_mission <code>servi.Mission</code>","text":"<p>Use the field <code>servi_mission</code> to create and send a servi mission. Current API version supports 6 types of Servi mission.</p> Field (oneof) Message Type Description <code>delivery_mission</code> <code>DeliveryMission</code> Create a servi mission of type <code>Delivery</code>. <code>bussing_mission</code> <code>BussingMission</code> Create a servi mission of type <code>Bussing</code>. <code>delivery_patrol_mission</code> <code>DeliveryPatrolMission</code> Create a servi mission of type <code>DeliveryPatrol</code>. <code>bussing_patrol_mission</code> <code>BussingPatrolMission</code> Create a servi mission of type <code>BussingPatrol</code>. <code>navigate_mission</code> <code>NavigateMission</code> Create a servi mission of type <code>Navigate</code>. <code>navigate_auto_mission</code> <code>NavigateAutoMission</code> Create a servi mission of type <code>NavigateAuto</code>."},{"location":"v1.1/resources/Servi/#delivery_mission-deliverymission","title":"delivery_mission <code>DeliveryMission</code>","text":"<p>A mission that navigates to one or more goals, stopping at each for a set amount of time or until some weight is removed.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code> <code>required</code> a list of <code>Goal</code> <code>params</code> <code>DeliveryParams</code> Parameters for delivery mission."},{"location":"v1.1/resources/Servi/#bussing_mission-bussingmission","title":"bussing_mission <code>BussingMission</code>","text":"<p>A mission that navigates to one or more goals, stopping at each for a set amount of time or until some weight is added.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code> <code>required</code> a list of <code>Goal</code> <code>params</code> <code>BussingParams</code> There is no param defined in this API version."},{"location":"v1.1/resources/Servi/#delivery_patrol_mission-deliverypatrolmission","title":"delivery_patrol_mission <code>DeliveryPatrolMission</code>","text":"<p>A mission that continuously loops through goals, stopping at each for a set amount of time or until all weight is removed.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code> <code>required</code> a list of <code>Goal</code> <code>params</code> <code>DeliveryPatrolParams</code> There is no param defined in this API version."},{"location":"v1.1/resources/Servi/#bussing_patrol_mission-bussingpatrolmission","title":"bussing_patrol_mission <code>BussingPatrolMission</code>","text":"<p>A mission that continuously loops through goals, stopping at each for a set amount of time or until weight exceeds a threshold.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code> <code>required</code> a list of <code>Goal</code> <code>params</code> <code>BussingPatrolParams</code> There is no param defined in this API version."},{"location":"v1.1/resources/Servi/#navigate_mission-navigatemission","title":"navigate_mission <code>NavigateMission</code>","text":"<p>A mission consisting of a single, explicitly defined goal.</p> Field Message Type Description <code>goal</code> <code>Goal</code> <code>required</code> Single target goal for navigation."},{"location":"v1.1/resources/Servi/#navigate_auto_mission-navigateautomission","title":"navigate_auto_mission <code>NavigateAutoMission</code>","text":"<p>A mission that automatically selects the first unoccupied and unclaimed goal from the provided list, preferring goals with lower index values. For example, when sending a robot to one of several possible goals [T1, T2, T3], it will first check if T1 is unoccupied and unclaimed, then T2, and finally T3. If all goals are occupied or claimed, the mission will fail.</p> Field Message Type Description <code>goals</code> repeated <code>Goal</code> <code>required</code> List of potential goals to choose from."},{"location":"v1.1/resources/Servi/#deliveryparams-deliveryparams","title":"DeliveryParams <code>DeliveryParams</code>","text":"<p>Parameters for a delivery mission.</p> Field Message Type Description <code>tray_mappings</code> repeated <code>TrayMapping</code> Tray mappings for the delivery mission. Only supported for Servi+ robots."},{"location":"v1.1/resources/Servi/#traymapping-traymapping","title":"TrayMapping <code>TrayMapping</code>","text":"<p>Mapping between a given tray to a goal. Note: Tray mapping is only supported for Servi+ robots.</p> Field Message Type Description <code>tray_name</code> <code>string</code> Name of the tray. <code>goal</code> <code>Goal</code> Target goal for this tray."},{"location":"v1.1/resources/Servi/#json-request-example","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"pennybot-456efg\",\n    \"mission\": {\n      \"serviMission\": {\n        \"navigateMission\": {\n          \"goal\": {\n            \"pose\": {\n              \"xMeters\": 2.5,\n              \"yMeters\": 1.8,\n              \"headingRadians\": 1.57\n            }\n          }\n        }\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/Servi/#response","title":"Response","text":""},{"location":"v1.1/resources/Servi/#mission_id-string","title":"mission_id <code>string</code>","text":"<p>The ID of the mission created. </p>"},{"location":"v1.1/resources/Servi/#json-response-example","title":"JSON Response Example","text":"JSON <pre><code>  {\n    \"missionId\": \"mission-abc123\"\n  }\n</code></pre>"},{"location":"v1.1/resources/Servi/#errors","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> This command is sending to is not a Servi family robot. <code>FAILED_PRECONDITION</code> The robot is already executing another mission.  This command is valid if current mission is in terminal state,  e.g Cancelled, Succeeded, Failed."},{"location":"v1.1/resources/Servi/#calibratetrays","title":"CalibrateTrays","text":"<p>Calibrates the trays on the robot.</p> <p>Only applicable for tray-equipped robots (e.g., Servi, Servi Plus).</p> <p>Calibrates all trays if no tray names are provided. Returns an INVALID_ARGUMENT error and rejects the request if any tray name is invalid. Returns an empty response on success.</p>"},{"location":"v1.1/resources/Servi/#request_1","title":"Request","text":""},{"location":"v1.1/resources/Servi/#robot_id-string-required_1","title":"robot_id <code>string</code> <code>required</code>","text":"<p>The ID of the robot to calibrate trays on.</p>"},{"location":"v1.1/resources/Servi/#selector-servitrayselector-required","title":"selector <code>servi.TraySelector</code> <code>required</code>","text":"<p>Selector to specify which trays to calibrate.</p> Field Message Type Description <code>tray_names</code> repeated <code>string</code> List of tray names to calibrate. If empty, calibrates all trays."},{"location":"v1.1/resources/Servi/#json-request-example_1","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"robotId\": \"pennybot-456efg\",\n    \"selector\": {\n      \"trayNames\": [\"top\", \"middle\"]\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/Servi/#response_1","title":"Response","text":"<p>(No fields defined)</p>"},{"location":"v1.1/resources/Servi/#json-response-example_1","title":"JSON Response Example","text":"JSON <pre><code>  {}\n</code></pre>"},{"location":"v1.1/resources/Servi/#errors_1","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> This command is being sent to a non-Servi robot, or any tray name is invalid. <code>PERMISSION_DENIED</code> Attempting to calibrate trays for a <code>robot_id</code> you don't own.  Tip: check the spelling of the <code>robot_id</code> value. <code>NOT_FOUND</code> The specified robot ID does not exist. <code>INTERNAL</code> Internal server error occurred while processing the request."},{"location":"v1.1/resources/Servi/#subscribetraystatuses","title":"SubscribeTrayStatuses","text":"<p>Subscribes to the robot's tray status updates.  Upon subscription, the latest known tray states are sent immediately. Updates are streamed when any tray state changes.</p> <p>Note</p> <p>Weight changes are reported with 10g precision.</p>"},{"location":"v1.1/resources/Servi/#request_2","title":"Request","text":""},{"location":"v1.1/resources/Servi/#selector-robotselector-required","title":"selector <code>RobotSelector</code> <code>required</code>","text":"<p><code>RobotSelector</code> is used to select specific robots.   It supports selection by a list of robot IDs OR all robots at a given location.</p> Field Message Type Description <code>robot_ids</code> <code>RobotIDs</code> Selects robots by their specific IDs.  Example: <code>[\"pennybot-123abc\", \"pennybot-abc123\"]</code> <code>location_id</code> <code>string</code> Selects all robots at the specified location."},{"location":"v1.1/resources/Servi/#json-request-example_2","title":"JSON Request Example","text":"JSON <pre><code>  {\n    \"selector\": {\n      \"robotIds\": {\n        \"ids\": [\n          \"pennybot-456efg\"\n        ]\n      }\n    }\n  }\n</code></pre>"},{"location":"v1.1/resources/Servi/#response_2","title":"Response","text":""},{"location":"v1.1/resources/Servi/#tray_states-mapstring-traystateswithmetadata","title":"tray_states <code>map&lt;string, TrayStatesWithMetadata&gt;</code>","text":"<p>A mapping of tray states reported by individual robots. Each entry pairs a robot ID (key) with its corresponding tray states.</p>"},{"location":"v1.1/resources/Servi/#traystateswithmetadata","title":"TrayStatesWithMetadata","text":"Field Message Type Description <code>metadata</code> <code>EventMetadata</code> Metadata associated with the tray states. <code>tray_states</code> <code>TrayStates</code> The tray states reported by the robot."},{"location":"v1.1/resources/Servi/#traystates-traystate-repeated","title":"TrayStates <code>TrayState</code> <code>repeated</code>","text":"<p>State of enabled trays, ordered from the top-most tray on the robot to the bottom.</p>"},{"location":"v1.1/resources/Servi/#traystate","title":"TrayState","text":"<p>Represents the state of a single tray.</p> Field Message Type Description <code>tray_name</code> <code>string</code> Unique string name for the given tray.  e.g. \"top\", \"middle\", \"bottom\"  See illustrations for tray configurations on different robot models. <code>load_state</code> <code>LoadState</code> enum Current load state of the tray. <code>weight_kg</code> <code>float</code> Weight on the tray in kilograms. Minimum precision is 10g. <code>load_ratio</code> <code>float</code> Ratio of the current load to the tray's maximum load capacity.This value may exceed 1.0 if the tray is overloaded. Caveats:- If the maximum load is misconfigured (e.g., set to 0.0),  this value may return NaN."},{"location":"v1.1/resources/Servi/#loadstate-enum","title":"LoadState <code>enum</code>","text":"Name Number Description LOAD_STATE_UNKNOWN 0 Default value. It means the <code>load_state</code> field is not returned. LOAD_STATE_LOADED 1 The tray has a valid load. LOAD_STATE_EMPTY 2 The tray is empty. LOAD_STATE_OVERLOADED 3 The tray is carrying more than its maximum capacity."},{"location":"v1.1/resources/Servi/#errors_2","title":"Errors","text":"ErrorCode Description <code>INVALID_ARGUMENT</code> This command is sending to is not a Servi family robot. <code>PERMISSION_DENIED</code> Attempting to request status for a <code>robot_id</code> or <code>location_id</code> you don't own.  Tip: check the spelling of all <code>robot_id</code> or <code>location_id</code> values. <code>INTERNAL</code> Internal server error occurred while processing the request."},{"location":"v1.1/resources/Servi/#json-response-example_2","title":"JSON Response Example","text":"JSON <pre><code>{\n  \"trayStates\": {\n    \"pennybot-456efg\": {\n      \"metadata\": {\n        \"timestamp\": \"2025-04-01T16:00:00Z\",\n        \"sequenceNumber\": 105\n      },\n      \"trayStates\": [\n        {\n          \"trayName\": \"top\",\n          \"loadState\": \"LOAD_STATE_OVERLOADED\",\n          \"weightKg\": 8.1,\n          \"loadRatio\": 1.18\n        },\n        {\n          \"trayName\": \"middle\",\n          \"loadState\": \"LOAD_STATE_LOADED\",\n          \"weightKg\": 2.3,\n          \"loadRatio\": 0.76\n        },\n        {\n          \"trayName\": \"bottom\",\n          \"loadState\": \"LOAD_STATE_EMPTY\",\n          \"weightKg\": 0,\n          \"loadRatio\": 0\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"v1.1/resources/Servi/#tray-configurations-on-different-servi-models","title":"Tray configurations on different Servi models","text":""},{"location":"v1.1/resources/Servi/#servi-plus","title":"Servi Plus","text":""},{"location":"v1.1/resources/Servi/#servi_1","title":"Servi","text":""},{"location":"v1.1/resources/Servi/#servi-mini","title":"Servi Mini","text":""}]}